
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftUNIONINTERSECTIONDIFFERENCEleftPLUSMINUSleftMULDIVrightUMINUSADD ASSIGN BEGIN CBR COMMA COMPLEMENT CONCAT CPAR DIFFERENCE DIGRAPH DIV EDGE EDGES_COUNT ELIF ELSE END EQUAL FLOAT FOREDGE FORVERTEX GRAPH GREATER GREATEREQ ID IF IN INT INTERSECTION LESS LESSEQ MINUS MUL MULTIGRAPH NEQUAL NODES_COUNT OBR OPAR PLOT PLUS POINT PSEUDOGRAPH STRING UNION WEIGHT_SUMInstructions    : Instructions InstructionInstructions    : Instruction Instruction      : Plot_instr\n                        | If_instr\n                        | If_else_instr\n                        | For_vertex_instr\n                        | Assign_instr\n                        | For_edge_instr\n                        | Add_vertex_instr\n                        | Add_edge_instr\n                        | Add_vertex_and_edge_instrIf_instr         : IF OPAR logic_expression CPAR BEGIN Instructions ENDIf_else_instr  : IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions ENDFor_vertex_instr   : FORVERTEX ID IN ID BEGIN Instructions ENDFor_edge_instr   : FOREDGE ID IN ID BEGIN Instructions ENDPlot_instr   : PLOT OPAR ID CPARAssign_instr     : ID ASSIGN graph_expressionAdd_vertex_instr      : ID ADD OPAR vertex_expression CPARAdd_edge_instr     : ID ADD OPAR edge_expression CPARAdd_vertex_and_edge_instr      : ID ADD OPAR vertex_expression COMMA edge_expression CPARgraph_expression       : OPAR graph_expression CPARgraph_expression   : GRAPH OPAR value_expression COMMA edge_expression CPAR\n                            | DIGRAPH OPAR value_expression COMMA edge_expression CPAR\n                            | GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR\n                            | DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR\n                            | graph_expression UNION graph_expression\n                            | graph_expression INTERSECTION graph_expression\n                            | graph_expression DIFFERENCE graph_expression\n                            | graph_expression CONCAT graph_expression\n                            | COMPLEMENT OPAR graph_expression CPAR\n                            | ID\n                            vertex_expression    : vertex_expression INT\n                            | INTedge_expression  : edge_expression OPAR INT COMMA INT CPAR\n                        | OPAR INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA INT CPAR\n                        | OPAR INT COMMA INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR \n                        | OPAR INT COMMA INT COMMA FLOAT CPAR\n                        | empty\n                        logic_expression     : value_expression EQUAL value_expression\n                            | value_expression GREATER value_expression\n                            | value_expression LESS value_expression\n                            | value_expression GREATEREQ value_expression\n                            | value_expression LESSEQ value_expression\n                            | value_expression NEQUAL value_expressionvalue_expression     : algebraic_expression\n                            | functionalgebraic_expression      : INT\n                                | FLOATalgebraic_expression       : OPAR algebraic_expression CPARalgebraic_expression       : functionalgebraic_expression     : algebraic_expression PLUS algebraic_expression\n                                | algebraic_expression MINUS algebraic_expression\n                                | algebraic_expression MUL algebraic_expression\n                                | algebraic_expression DIV algebraic_expression\n                                | MINUS algebraic_expression %prec UMINUS\n                                empty :function     : graph_expression POINT NODES_COUNT\n                    | graph_expression POINT EDGES_COUNT\n                    | graph_expression POINT WEIGHT_SUM'
    
_lr_action_items = {'PLOT':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,43,75,76,77,78,79,86,90,92,106,107,112,116,117,118,124,126,127,128,129,131,143,144,145,150,153,],[12,12,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,12,12,12,-30,12,12,12,-20,-12,-14,-15,-22,-23,12,-24,-25,12,-13,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,43,75,76,77,78,79,86,90,92,106,107,112,116,117,118,124,126,127,128,129,131,143,144,145,150,153,],[14,14,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,14,14,14,-30,14,14,14,-20,-12,-14,-15,-22,-23,14,-24,-25,14,-13,]),'FORVERTEX':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,43,75,76,77,78,79,86,90,92,106,107,112,116,117,118,124,126,127,128,129,131,143,144,145,150,153,],[15,15,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,15,15,15,-30,15,15,15,-20,-12,-14,-15,-22,-23,15,-24,-25,15,-13,]),'ID':([0,1,2,3,4,5,6,7,8,9,10,11,15,16,17,18,19,21,25,26,27,32,39,41,42,43,44,45,46,47,49,50,51,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,86,90,92,106,107,112,116,117,118,124,126,127,128,129,131,143,144,145,150,153,],[13,13,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,22,23,-1,24,25,25,-31,-17,25,25,25,73,74,-16,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-26,-27,-28,-29,-21,-18,-19,13,13,13,-30,13,13,13,-20,-12,-14,-15,-22,-23,13,-24,-25,13,-13,]),'FOREDGE':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,43,75,76,77,78,79,86,90,92,106,107,112,116,117,118,124,126,127,128,129,131,143,144,145,150,153,],[16,16,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,16,16,16,-30,16,16,16,-20,-12,-14,-15,-22,-23,16,-24,-25,16,-13,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,17,25,26,43,75,76,77,78,79,86,90,112,124,126,127,128,129,131,144,145,153,],[0,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,-30,-20,-12,-14,-15,-22,-23,-24,-25,-13,]),'END':([2,3,4,5,6,7,8,9,10,11,17,25,26,43,75,76,77,78,79,86,90,112,116,117,118,124,126,127,128,129,131,144,145,150,153,],[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,-30,126,127,128,-20,-12,-14,-15,-22,-23,-24,-25,153,-13,]),'OPAR':([12,14,19,20,21,27,28,29,30,31,32,39,44,45,46,47,49,50,51,54,56,61,62,63,64,65,66,67,68,69,70,87,108,110,114,119,121,130,132,134,137,138,142,146,147,151,152,],[18,21,27,31,32,27,49,50,51,52,32,32,27,27,27,27,32,32,27,89,-40,32,32,32,32,32,32,32,32,32,32,52,52,52,89,89,89,52,52,-35,89,89,-34,-37,-39,-36,-38,]),'ASSIGN':([13,],[19,]),'ADD':([13,],[20,]),'GRAPH':([19,21,27,32,39,44,45,46,47,49,50,51,61,62,63,64,65,66,67,68,69,70,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'DIGRAPH':([19,21,27,32,39,44,45,46,47,49,50,51,61,62,63,64,65,66,67,68,69,70,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'COMPLEMENT':([19,21,27,32,39,44,45,46,47,49,50,51,61,62,63,64,65,66,67,68,69,70,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'INT':([21,31,32,39,49,50,52,53,55,61,62,63,64,65,66,67,68,69,70,81,83,88,89,109,111,113,125,133,141,],[37,55,37,37,37,37,85,88,-33,37,37,37,37,37,37,37,37,37,37,55,55,-32,115,88,88,123,135,139,148,]),'FLOAT':([21,32,39,49,50,61,62,63,64,65,66,67,68,69,70,133,141,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,140,149,]),'MINUS':([21,32,35,36,37,38,39,49,50,57,59,61,62,63,64,65,66,67,68,69,70,71,91,99,100,101,102,103,104,105,],[39,39,68,-52,-49,-50,39,39,39,68,-52,39,39,39,39,39,39,39,39,39,39,-57,-51,-53,-54,-55,-56,-59,-60,-61,]),'IN':([22,23,],[41,42,]),'CPAR':([24,25,31,33,35,36,37,38,48,53,54,55,56,57,58,59,71,75,76,77,78,79,84,87,88,91,93,94,95,96,97,98,99,100,101,102,103,104,105,108,110,112,114,119,121,123,129,130,131,132,134,135,137,138,139,140,142,144,145,146,147,148,149,151,152,],[43,-31,-58,60,-47,-48,-49,-50,79,86,90,-33,-40,91,79,-52,-57,-26,-27,-28,-29,-21,112,-58,-32,-51,-41,-42,-43,-44,-45,-46,-53,-54,-55,-56,-59,-60,-61,-58,-58,-30,124,129,131,134,-22,-58,-23,-58,-35,142,144,145,146,147,-34,-24,-25,-37,-39,151,152,-36,-38,]),'UNION':([25,26,40,48,58,75,76,77,78,79,84,112,129,131,144,145,],[-31,44,44,44,44,-26,-27,-28,44,-21,44,-30,-22,-23,-24,-25,]),'INTERSECTION':([25,26,40,48,58,75,76,77,78,79,84,112,129,131,144,145,],[-31,45,45,45,45,-26,-27,-28,45,-21,45,-30,-22,-23,-24,-25,]),'DIFFERENCE':([25,26,40,48,58,75,76,77,78,79,84,112,129,131,144,145,],[-31,46,46,46,46,-26,-27,-28,46,-21,46,-30,-22,-23,-24,-25,]),'CONCAT':([25,26,40,48,58,75,76,77,78,79,84,112,129,131,144,145,],[-31,47,47,47,47,-26,-27,-28,-29,-21,47,-30,-22,-23,-24,-25,]),'POINT':([25,40,58,75,76,77,78,79,112,129,131,144,145,],[-31,72,72,-26,-27,-28,-29,-21,-30,-22,-23,-24,-25,]),'EQUAL':([34,35,36,37,38,59,71,91,99,100,101,102,103,104,105,],[61,-47,-48,-49,-50,-52,-57,-51,-53,-54,-55,-56,-59,-60,-61,]),'GREATER':([34,35,36,37,38,59,71,91,99,100,101,102,103,104,105,],[62,-47,-48,-49,-50,-52,-57,-51,-53,-54,-55,-56,-59,-60,-61,]),'LESS':([34,35,36,37,38,59,71,91,99,100,101,102,103,104,105,],[63,-47,-48,-49,-50,-52,-57,-51,-53,-54,-55,-56,-59,-60,-61,]),'GREATEREQ':([34,35,36,37,38,59,71,91,99,100,101,102,103,104,105,],[64,-47,-48,-49,-50,-52,-57,-51,-53,-54,-55,-56,-59,-60,-61,]),'LESSEQ':([34,35,36,37,38,59,71,91,99,100,101,102,103,104,105,],[65,-47,-48,-49,-50,-52,-57,-51,-53,-54,-55,-56,-59,-60,-61,]),'NEQUAL':([34,35,36,37,38,59,71,91,99,100,101,102,103,104,105,],[66,-47,-48,-49,-50,-52,-57,-51,-53,-54,-55,-56,-59,-60,-61,]),'COMMA':([35,36,37,38,53,55,59,71,80,82,85,88,91,99,100,101,102,103,104,105,115,120,122,123,135,],[-47,-48,-49,-50,87,-33,-52,-57,108,110,113,-32,-51,-53,-54,-55,-56,-59,-60,-61,125,130,132,133,141,]),'PLUS':([35,36,37,38,57,59,71,91,99,100,101,102,103,104,105,],[67,-52,-49,-50,67,-52,-57,-51,-53,-54,-55,-56,-59,-60,-61,]),'MUL':([35,36,37,38,57,59,71,91,99,100,101,102,103,104,105,],[69,-52,-49,-50,69,-52,-57,-51,69,69,-55,-56,-59,-60,-61,]),'DIV':([35,36,37,38,57,59,71,91,99,100,101,102,103,104,105,],[70,-52,-49,-50,70,-52,-57,-51,70,70,-55,-56,-59,-60,-61,]),'OBR':([49,50,],[81,83,]),'CBR':([55,88,109,111,],[-33,-32,120,122,]),'BEGIN':([60,73,74,136,],[92,106,107,143,]),'NODES_COUNT':([72,],[103,]),'EDGES_COUNT':([72,],[104,]),'WEIGHT_SUM':([72,],[105,]),'ELSE':([126,],[136,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Instructions':([0,92,106,107,143,],[1,116,117,118,150,]),'Instruction':([0,1,92,106,107,116,117,118,143,150,],[2,17,2,2,2,17,17,17,2,17,]),'Plot_instr':([0,1,92,106,107,116,117,118,143,150,],[3,3,3,3,3,3,3,3,3,3,]),'If_instr':([0,1,92,106,107,116,117,118,143,150,],[4,4,4,4,4,4,4,4,4,4,]),'If_else_instr':([0,1,92,106,107,116,117,118,143,150,],[5,5,5,5,5,5,5,5,5,5,]),'For_vertex_instr':([0,1,92,106,107,116,117,118,143,150,],[6,6,6,6,6,6,6,6,6,6,]),'Assign_instr':([0,1,92,106,107,116,117,118,143,150,],[7,7,7,7,7,7,7,7,7,7,]),'For_edge_instr':([0,1,92,106,107,116,117,118,143,150,],[8,8,8,8,8,8,8,8,8,8,]),'Add_vertex_instr':([0,1,92,106,107,116,117,118,143,150,],[9,9,9,9,9,9,9,9,9,9,]),'Add_edge_instr':([0,1,92,106,107,116,117,118,143,150,],[10,10,10,10,10,10,10,10,10,10,]),'Add_vertex_and_edge_instr':([0,1,92,106,107,116,117,118,143,150,],[11,11,11,11,11,11,11,11,11,11,]),'graph_expression':([19,21,27,32,39,44,45,46,47,49,50,51,61,62,63,64,65,66,67,68,69,70,],[26,40,48,58,40,75,76,77,78,40,40,84,40,40,40,40,40,40,40,40,40,40,]),'logic_expression':([21,],[33,]),'value_expression':([21,49,50,61,62,63,64,65,66,],[34,80,82,93,94,95,96,97,98,]),'algebraic_expression':([21,32,39,49,50,61,62,63,64,65,66,67,68,69,70,],[35,57,71,35,35,35,35,35,35,35,35,99,100,101,102,]),'function':([21,32,39,49,50,61,62,63,64,65,66,67,68,69,70,],[36,59,59,36,36,36,36,36,36,36,36,59,59,59,59,]),'vertex_expression':([31,81,83,],[53,109,111,]),'edge_expression':([31,87,108,110,130,132,],[54,114,119,121,137,138,]),'empty':([31,87,108,110,130,132,],[56,56,56,56,56,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Instructions","S'",1,None,None,None),
  ('Instructions -> Instructions Instruction','Instructions',2,'p_instructions_list','parser_rules.py',17),
  ('Instructions -> Instruction','Instructions',1,'p_instructions_instruction','parser_rules.py',23),
  ('Instruction -> Plot_instr','Instruction',1,'p_instruction','parser_rules.py',28),
  ('Instruction -> If_instr','Instruction',1,'p_instruction','parser_rules.py',29),
  ('Instruction -> If_else_instr','Instruction',1,'p_instruction','parser_rules.py',30),
  ('Instruction -> For_vertex_instr','Instruction',1,'p_instruction','parser_rules.py',31),
  ('Instruction -> Assign_instr','Instruction',1,'p_instruction','parser_rules.py',32),
  ('Instruction -> For_edge_instr','Instruction',1,'p_instruction','parser_rules.py',33),
  ('Instruction -> Add_vertex_instr','Instruction',1,'p_instruction','parser_rules.py',34),
  ('Instruction -> Add_edge_instr','Instruction',1,'p_instruction','parser_rules.py',35),
  ('Instruction -> Add_vertex_and_edge_instr','Instruction',1,'p_instruction','parser_rules.py',36),
  ('If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END','If_instr',7,'p_if_instr','parser_rules.py',42),
  ('If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END','If_else_instr',11,'p_if_else_instr','parser_rules.py',47),
  ('For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END','For_vertex_instr',7,'p_for_vertex_instr','parser_rules.py',52),
  ('For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END','For_edge_instr',7,'p_for_edge_instr','parser_rules.py',57),
  ('Plot_instr -> PLOT OPAR ID CPAR','Plot_instr',4,'p_Plot_instr','parser_rules.py',63),
  ('Assign_instr -> ID ASSIGN graph_expression','Assign_instr',3,'p_assign_instr','parser_rules.py',69),
  ('Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR','Add_vertex_instr',5,'p_add_vertex_instr','parser_rules.py',75),
  ('Add_edge_instr -> ID ADD OPAR edge_expression CPAR','Add_edge_instr',5,'p_add_edge_instr','parser_rules.py',81),
  ('Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR','Add_vertex_and_edge_instr',7,'p_add_vertex_and_edge_instr','parser_rules.py',86),
  ('graph_expression -> OPAR graph_expression CPAR','graph_expression',3,'p_graph_expression_grouping','parser_rules.py',92),
  ('graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR','graph_expression',6,'p_graph_expression','parser_rules.py',98),
  ('graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR','graph_expression',6,'p_graph_expression','parser_rules.py',99),
  ('graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR','graph_expression',8,'p_graph_expression','parser_rules.py',100),
  ('graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR','graph_expression',8,'p_graph_expression','parser_rules.py',101),
  ('graph_expression -> graph_expression UNION graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',102),
  ('graph_expression -> graph_expression INTERSECTION graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',103),
  ('graph_expression -> graph_expression DIFFERENCE graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',104),
  ('graph_expression -> graph_expression CONCAT graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',105),
  ('graph_expression -> COMPLEMENT OPAR graph_expression CPAR','graph_expression',4,'p_graph_expression','parser_rules.py',106),
  ('graph_expression -> ID','graph_expression',1,'p_graph_expression','parser_rules.py',107),
  ('vertex_expression -> vertex_expression INT','vertex_expression',2,'p_vertex_expression','parser_rules.py',125),
  ('vertex_expression -> INT','vertex_expression',1,'p_vertex_expression','parser_rules.py',126),
  ('edge_expression -> edge_expression OPAR INT COMMA INT CPAR','edge_expression',6,'p_edge_expression','parser_rules.py',134),
  ('edge_expression -> OPAR INT COMMA INT CPAR','edge_expression',5,'p_edge_expression','parser_rules.py',135),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',136),
  ('edge_expression -> OPAR INT COMMA INT COMMA INT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',137),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',138),
  ('edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',139),
  ('edge_expression -> empty','edge_expression',1,'p_edge_expression','parser_rules.py',140),
  ('logic_expression -> value_expression EQUAL value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',156),
  ('logic_expression -> value_expression GREATER value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',157),
  ('logic_expression -> value_expression LESS value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',158),
  ('logic_expression -> value_expression GREATEREQ value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',159),
  ('logic_expression -> value_expression LESSEQ value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',160),
  ('logic_expression -> value_expression NEQUAL value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',161),
  ('value_expression -> algebraic_expression','value_expression',1,'p_value_expression','parser_rules.py',166),
  ('value_expression -> function','value_expression',1,'p_value_expression','parser_rules.py',167),
  ('algebraic_expression -> INT','algebraic_expression',1,'p_algebraic_expression_number','parser_rules.py',173),
  ('algebraic_expression -> FLOAT','algebraic_expression',1,'p_algebraic_expression_number','parser_rules.py',174),
  ('algebraic_expression -> OPAR algebraic_expression CPAR','algebraic_expression',3,'p_algebraic_expression_grouping','parser_rules.py',179),
  ('algebraic_expression -> function','algebraic_expression',1,'p_algebraic_expression_function','parser_rules.py',184),
  ('algebraic_expression -> algebraic_expression PLUS algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',190),
  ('algebraic_expression -> algebraic_expression MINUS algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',191),
  ('algebraic_expression -> algebraic_expression MUL algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',192),
  ('algebraic_expression -> algebraic_expression DIV algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',193),
  ('algebraic_expression -> MINUS algebraic_expression','algebraic_expression',2,'p_algebraic_expression','parser_rules.py',194),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',203),
  ('function -> graph_expression POINT NODES_COUNT','function',3,'p_functions','parser_rules.py',207),
  ('function -> graph_expression POINT EDGES_COUNT','function',3,'p_functions','parser_rules.py',208),
  ('function -> graph_expression POINT WEIGHT_SUM','function',3,'p_functions','parser_rules.py',209),
]
