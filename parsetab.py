
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftUNIONINTERSECTIONDIFFERENCEleftPLUSMINUSleftMULDIVrightUMINUSADD ASSIGN BEGIN CBR COMMA COMPLEMENT CONCAT CONTAIN_VERTEX CPAR DIFFERENCE DIGRAPH DIV EDGE EDGES_COUNT ELIF ELSE END EQUAL FLOAT FOREDGE FORVERTEX GRAPH GREATER GREATEREQ ID IF IN INT INTERSECTION LESS LESSEQ MINUS MUL MULTIGRAPH NEQUAL NODES_COUNT OBR OPAR PLOT PLUS POINT PSEUDOGRAPH STRING UNION WEIGHT_SUMInstructions    : Instructions InstructionInstructions    : Instruction Instruction      : Plot_instr\n                        | If_instr\n                        | If_else_instr\n                        | For_vertex_instr\n                        | Assign_instr\n                        | For_edge_instr\n                        | Add_vertex_instr\n                        | Add_edge_instr\n                        | Add_vertex_and_edge_instrIf_instr         : IF OPAR logic_expression CPAR BEGIN Instructions ENDIf_else_instr  : IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions ENDFor_vertex_instr   : FORVERTEX ID IN ID BEGIN Instructions ENDFor_edge_instr   : FOREDGE ID IN ID BEGIN Instructions ENDPlot_instr   : PLOT OPAR ID CPARAssign_instr     : ID ASSIGN graph_expressionAdd_vertex_instr      : ID ADD OPAR vertex_expression CPARAdd_edge_instr     : ID ADD OPAR edge_expression CPARAdd_vertex_and_edge_instr      : ID ADD OPAR vertex_expression COMMA edge_expression CPARgraph_expression       : OPAR graph_expression CPARgraph_expression   : GRAPH OPAR value_expression COMMA edge_expression CPAR\n                            | DIGRAPH OPAR value_expression COMMA edge_expression CPAR\n                            | GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR\n                            | DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR\n                            | graph_expression UNION graph_expression\n                            | graph_expression INTERSECTION graph_expression\n                            | graph_expression DIFFERENCE graph_expression\n                            | graph_expression CONCAT graph_expression\n                            | COMPLEMENT OPAR graph_expression CPAR\n                            | ID\n                            vertex_expression    : vertex_expression INT\n                            | INTedge_expression  : edge_expression OPAR INT COMMA INT CPAR\n                        | OPAR INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA INT CPAR\n                        | OPAR INT COMMA INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR \n                        | OPAR INT COMMA INT COMMA FLOAT CPAR\n                        | empty\n                        logic_expression     : value_expression EQUAL value_expression\n                            | value_expression GREATER value_expression\n                            | value_expression LESS value_expression\n                            | value_expression GREATEREQ value_expression\n                            | value_expression LESSEQ value_expression\n                            | value_expression NEQUAL value_expression\n                            | logic_functionvalue_expression     : algebraic_expression\n                            | numeric_functionalgebraic_expression      : INT\n                                | FLOATalgebraic_expression       : OPAR algebraic_expression CPARalgebraic_expression       : numeric_functionalgebraic_expression     : algebraic_expression PLUS algebraic_expression\n                                | algebraic_expression MINUS algebraic_expression\n                                | algebraic_expression MUL algebraic_expression\n                                | algebraic_expression DIV algebraic_expression\n                                | MINUS algebraic_expression %prec UMINUS\n                                empty :numeric_function     : graph_expression POINT NODES_COUNT\n                            | graph_expression POINT EDGES_COUNT\n                            | graph_expression POINT WEIGHT_SUMlogic_function       : graph_expression POINT CONTAIN_VERTEX value_expression'
    
_lr_action_items = {'PLOT':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,44,77,78,79,80,81,88,92,95,110,111,116,120,122,123,129,131,132,133,134,136,148,149,150,155,158,],[12,12,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,12,12,12,-30,12,12,12,-20,-12,-14,-15,-22,-23,12,-24,-25,12,-13,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,44,77,78,79,80,81,88,92,95,110,111,116,120,122,123,129,131,132,133,134,136,148,149,150,155,158,],[14,14,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,14,14,14,-30,14,14,14,-20,-12,-14,-15,-22,-23,14,-24,-25,14,-13,]),'FORVERTEX':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,44,77,78,79,80,81,88,92,95,110,111,116,120,122,123,129,131,132,133,134,136,148,149,150,155,158,],[15,15,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,15,15,15,-30,15,15,15,-20,-12,-14,-15,-22,-23,15,-24,-25,15,-13,]),'ID':([0,1,2,3,4,5,6,7,8,9,10,11,15,16,17,18,19,21,25,26,27,32,41,42,43,44,45,46,47,48,50,51,52,62,63,64,65,66,67,68,69,70,71,77,78,79,80,81,88,92,95,106,110,111,116,120,122,123,129,131,132,133,134,136,148,149,150,155,158,],[13,13,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,22,23,-1,24,25,25,-31,-17,25,25,25,75,76,-16,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-26,-27,-28,-29,-21,-18,-19,13,25,13,13,-30,13,13,13,-20,-12,-14,-15,-22,-23,13,-24,-25,13,-13,]),'FOREDGE':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,44,77,78,79,80,81,88,92,95,110,111,116,120,122,123,129,131,132,133,134,136,148,149,150,155,158,],[16,16,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,16,16,16,-30,16,16,16,-20,-12,-14,-15,-22,-23,16,-24,-25,16,-13,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,17,25,26,44,77,78,79,80,81,88,92,116,129,131,132,133,134,136,149,150,158,],[0,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,-30,-20,-12,-14,-15,-22,-23,-24,-25,-13,]),'END':([2,3,4,5,6,7,8,9,10,11,17,25,26,44,77,78,79,80,81,88,92,116,120,122,123,129,131,132,133,134,136,149,150,155,158,],[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-31,-17,-16,-26,-27,-28,-29,-21,-18,-19,-30,131,132,133,-20,-12,-14,-15,-22,-23,-24,-25,158,-13,]),'OPAR':([12,14,19,20,21,27,28,29,30,31,32,41,45,46,47,48,50,51,52,55,57,62,63,64,65,66,67,68,69,70,71,89,106,112,114,118,124,126,135,137,139,142,143,147,151,152,156,157,],[18,21,27,31,32,27,50,51,52,53,32,32,27,27,27,27,32,32,27,91,-40,32,32,32,32,32,32,32,32,32,32,53,32,53,53,91,91,91,53,53,-35,91,91,-34,-37,-39,-36,-38,]),'ASSIGN':([13,],[19,]),'ADD':([13,],[20,]),'GRAPH':([19,21,27,32,41,45,46,47,48,50,51,52,62,63,64,65,66,67,68,69,70,71,106,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'DIGRAPH':([19,21,27,32,41,45,46,47,48,50,51,52,62,63,64,65,66,67,68,69,70,71,106,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'COMPLEMENT':([19,21,27,32,41,45,46,47,48,50,51,52,62,63,64,65,66,67,68,69,70,71,106,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'INT':([21,31,32,41,50,51,53,54,56,62,63,64,65,66,67,68,69,70,71,83,85,90,91,106,113,115,117,130,138,146,],[39,56,39,39,39,39,87,90,-33,39,39,39,39,39,39,39,39,39,39,56,56,-32,119,39,90,90,128,140,144,153,]),'FLOAT':([21,32,41,50,51,62,63,64,65,66,67,68,69,70,71,106,138,146,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,145,154,]),'MINUS':([21,32,36,37,39,40,41,50,51,58,60,62,63,64,65,66,67,68,69,70,71,73,93,102,103,104,105,106,107,108,109,],[41,41,69,-53,-50,-51,41,41,41,69,-53,41,41,41,41,41,41,41,41,41,41,-58,-52,-54,-55,-56,-57,41,-60,-61,-62,]),'IN':([22,23,],[42,43,]),'CPAR':([24,25,31,33,35,36,37,39,40,49,54,55,56,57,58,59,60,73,77,78,79,80,81,86,89,90,93,96,97,98,99,100,101,102,103,104,105,107,108,109,112,114,116,118,121,124,126,128,134,135,136,137,139,140,142,143,144,145,147,149,150,151,152,153,154,156,157,],[44,-31,-59,61,-47,-48,-49,-50,-51,81,88,92,-33,-40,93,81,-53,-58,-26,-27,-28,-29,-21,116,-59,-32,-52,-41,-42,-43,-44,-45,-46,-54,-55,-56,-57,-60,-61,-62,-59,-59,-30,129,-63,134,136,139,-22,-59,-23,-59,-35,147,149,150,151,152,-34,-24,-25,-37,-39,156,157,-36,-38,]),'UNION':([25,26,38,49,59,74,77,78,79,80,81,86,116,134,136,149,150,],[-31,45,45,45,45,45,-26,-27,-28,45,-21,45,-30,-22,-23,-24,-25,]),'INTERSECTION':([25,26,38,49,59,74,77,78,79,80,81,86,116,134,136,149,150,],[-31,46,46,46,46,46,-26,-27,-28,46,-21,46,-30,-22,-23,-24,-25,]),'DIFFERENCE':([25,26,38,49,59,74,77,78,79,80,81,86,116,134,136,149,150,],[-31,47,47,47,47,47,-26,-27,-28,47,-21,47,-30,-22,-23,-24,-25,]),'CONCAT':([25,26,38,49,59,74,77,78,79,80,81,86,116,134,136,149,150,],[-31,48,48,48,48,48,-26,-27,-28,-29,-21,48,-30,-22,-23,-24,-25,]),'POINT':([25,38,59,74,77,78,79,80,81,116,134,136,149,150,],[-31,72,94,94,-26,-27,-28,-29,-21,-30,-22,-23,-24,-25,]),'EQUAL':([34,36,37,39,40,60,73,93,102,103,104,105,107,108,109,],[62,-48,-49,-50,-51,-53,-58,-52,-54,-55,-56,-57,-60,-61,-62,]),'GREATER':([34,36,37,39,40,60,73,93,102,103,104,105,107,108,109,],[63,-48,-49,-50,-51,-53,-58,-52,-54,-55,-56,-57,-60,-61,-62,]),'LESS':([34,36,37,39,40,60,73,93,102,103,104,105,107,108,109,],[64,-48,-49,-50,-51,-53,-58,-52,-54,-55,-56,-57,-60,-61,-62,]),'GREATEREQ':([34,36,37,39,40,60,73,93,102,103,104,105,107,108,109,],[65,-48,-49,-50,-51,-53,-58,-52,-54,-55,-56,-57,-60,-61,-62,]),'LESSEQ':([34,36,37,39,40,60,73,93,102,103,104,105,107,108,109,],[66,-48,-49,-50,-51,-53,-58,-52,-54,-55,-56,-57,-60,-61,-62,]),'NEQUAL':([34,36,37,39,40,60,73,93,102,103,104,105,107,108,109,],[67,-48,-49,-50,-51,-53,-58,-52,-54,-55,-56,-57,-60,-61,-62,]),'COMMA':([36,37,39,40,54,56,60,73,82,84,87,90,93,102,103,104,105,107,108,109,119,125,127,128,140,],[-48,-49,-50,-51,89,-33,-53,-58,112,114,117,-32,-52,-54,-55,-56,-57,-60,-61,-62,130,135,137,138,146,]),'PLUS':([36,37,39,40,58,60,73,93,102,103,104,105,107,108,109,],[68,-53,-50,-51,68,-53,-58,-52,-54,-55,-56,-57,-60,-61,-62,]),'MUL':([36,37,39,40,58,60,73,93,102,103,104,105,107,108,109,],[70,-53,-50,-51,70,-53,-58,-52,70,70,-56,-57,-60,-61,-62,]),'DIV':([36,37,39,40,58,60,73,93,102,103,104,105,107,108,109,],[71,-53,-50,-51,71,-53,-58,-52,71,71,-56,-57,-60,-61,-62,]),'OBR':([50,51,],[83,85,]),'CBR':([56,90,113,115,],[-33,-32,125,127,]),'BEGIN':([61,75,76,141,],[95,110,111,148,]),'CONTAIN_VERTEX':([72,],[106,]),'NODES_COUNT':([72,94,],[107,107,]),'EDGES_COUNT':([72,94,],[108,108,]),'WEIGHT_SUM':([72,94,],[109,109,]),'ELSE':([131,],[141,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Instructions':([0,95,110,111,148,],[1,120,122,123,155,]),'Instruction':([0,1,95,110,111,120,122,123,148,155,],[2,17,2,2,2,17,17,17,2,17,]),'Plot_instr':([0,1,95,110,111,120,122,123,148,155,],[3,3,3,3,3,3,3,3,3,3,]),'If_instr':([0,1,95,110,111,120,122,123,148,155,],[4,4,4,4,4,4,4,4,4,4,]),'If_else_instr':([0,1,95,110,111,120,122,123,148,155,],[5,5,5,5,5,5,5,5,5,5,]),'For_vertex_instr':([0,1,95,110,111,120,122,123,148,155,],[6,6,6,6,6,6,6,6,6,6,]),'Assign_instr':([0,1,95,110,111,120,122,123,148,155,],[7,7,7,7,7,7,7,7,7,7,]),'For_edge_instr':([0,1,95,110,111,120,122,123,148,155,],[8,8,8,8,8,8,8,8,8,8,]),'Add_vertex_instr':([0,1,95,110,111,120,122,123,148,155,],[9,9,9,9,9,9,9,9,9,9,]),'Add_edge_instr':([0,1,95,110,111,120,122,123,148,155,],[10,10,10,10,10,10,10,10,10,10,]),'Add_vertex_and_edge_instr':([0,1,95,110,111,120,122,123,148,155,],[11,11,11,11,11,11,11,11,11,11,]),'graph_expression':([19,21,27,32,41,45,46,47,48,50,51,52,62,63,64,65,66,67,68,69,70,71,106,],[26,38,49,59,74,77,78,79,80,74,74,86,74,74,74,74,74,74,74,74,74,74,74,]),'logic_expression':([21,],[33,]),'value_expression':([21,50,51,62,63,64,65,66,67,106,],[34,82,84,96,97,98,99,100,101,121,]),'logic_function':([21,],[35,]),'algebraic_expression':([21,32,41,50,51,62,63,64,65,66,67,68,69,70,71,106,],[36,58,73,36,36,36,36,36,36,36,36,102,103,104,105,36,]),'numeric_function':([21,32,41,50,51,62,63,64,65,66,67,68,69,70,71,106,],[37,60,60,37,37,37,37,37,37,37,37,60,60,60,60,37,]),'vertex_expression':([31,83,85,],[54,113,115,]),'edge_expression':([31,89,112,114,135,137,],[55,118,124,126,142,143,]),'empty':([31,89,112,114,135,137,],[57,57,57,57,57,57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Instructions","S'",1,None,None,None),
  ('Instructions -> Instructions Instruction','Instructions',2,'p_instructions_list','parser_rules.py',17),
  ('Instructions -> Instruction','Instructions',1,'p_instructions_instruction','parser_rules.py',23),
  ('Instruction -> Plot_instr','Instruction',1,'p_instruction','parser_rules.py',28),
  ('Instruction -> If_instr','Instruction',1,'p_instruction','parser_rules.py',29),
  ('Instruction -> If_else_instr','Instruction',1,'p_instruction','parser_rules.py',30),
  ('Instruction -> For_vertex_instr','Instruction',1,'p_instruction','parser_rules.py',31),
  ('Instruction -> Assign_instr','Instruction',1,'p_instruction','parser_rules.py',32),
  ('Instruction -> For_edge_instr','Instruction',1,'p_instruction','parser_rules.py',33),
  ('Instruction -> Add_vertex_instr','Instruction',1,'p_instruction','parser_rules.py',34),
  ('Instruction -> Add_edge_instr','Instruction',1,'p_instruction','parser_rules.py',35),
  ('Instruction -> Add_vertex_and_edge_instr','Instruction',1,'p_instruction','parser_rules.py',36),
  ('If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END','If_instr',7,'p_if_instr','parser_rules.py',42),
  ('If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END','If_else_instr',11,'p_if_else_instr','parser_rules.py',47),
  ('For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END','For_vertex_instr',7,'p_for_vertex_instr','parser_rules.py',52),
  ('For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END','For_edge_instr',7,'p_for_edge_instr','parser_rules.py',57),
  ('Plot_instr -> PLOT OPAR ID CPAR','Plot_instr',4,'p_Plot_instr','parser_rules.py',63),
  ('Assign_instr -> ID ASSIGN graph_expression','Assign_instr',3,'p_assign_instr','parser_rules.py',69),
  ('Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR','Add_vertex_instr',5,'p_add_vertex_instr','parser_rules.py',75),
  ('Add_edge_instr -> ID ADD OPAR edge_expression CPAR','Add_edge_instr',5,'p_add_edge_instr','parser_rules.py',81),
  ('Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR','Add_vertex_and_edge_instr',7,'p_add_vertex_and_edge_instr','parser_rules.py',86),
  ('graph_expression -> OPAR graph_expression CPAR','graph_expression',3,'p_graph_expression_grouping','parser_rules.py',92),
  ('graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR','graph_expression',6,'p_graph_expression','parser_rules.py',98),
  ('graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR','graph_expression',6,'p_graph_expression','parser_rules.py',99),
  ('graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR','graph_expression',8,'p_graph_expression','parser_rules.py',100),
  ('graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR','graph_expression',8,'p_graph_expression','parser_rules.py',101),
  ('graph_expression -> graph_expression UNION graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',102),
  ('graph_expression -> graph_expression INTERSECTION graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',103),
  ('graph_expression -> graph_expression DIFFERENCE graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',104),
  ('graph_expression -> graph_expression CONCAT graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',105),
  ('graph_expression -> COMPLEMENT OPAR graph_expression CPAR','graph_expression',4,'p_graph_expression','parser_rules.py',106),
  ('graph_expression -> ID','graph_expression',1,'p_graph_expression','parser_rules.py',107),
  ('vertex_expression -> vertex_expression INT','vertex_expression',2,'p_vertex_expression','parser_rules.py',125),
  ('vertex_expression -> INT','vertex_expression',1,'p_vertex_expression','parser_rules.py',126),
  ('edge_expression -> edge_expression OPAR INT COMMA INT CPAR','edge_expression',6,'p_edge_expression','parser_rules.py',134),
  ('edge_expression -> OPAR INT COMMA INT CPAR','edge_expression',5,'p_edge_expression','parser_rules.py',135),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',136),
  ('edge_expression -> OPAR INT COMMA INT COMMA INT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',137),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',138),
  ('edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',139),
  ('edge_expression -> empty','edge_expression',1,'p_edge_expression','parser_rules.py',140),
  ('logic_expression -> value_expression EQUAL value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',156),
  ('logic_expression -> value_expression GREATER value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',157),
  ('logic_expression -> value_expression LESS value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',158),
  ('logic_expression -> value_expression GREATEREQ value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',159),
  ('logic_expression -> value_expression LESSEQ value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',160),
  ('logic_expression -> value_expression NEQUAL value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',161),
  ('logic_expression -> logic_function','logic_expression',1,'p_logic_expression','parser_rules.py',162),
  ('value_expression -> algebraic_expression','value_expression',1,'p_value_expression','parser_rules.py',170),
  ('value_expression -> numeric_function','value_expression',1,'p_value_expression','parser_rules.py',171),
  ('algebraic_expression -> INT','algebraic_expression',1,'p_algebraic_expression_number','parser_rules.py',177),
  ('algebraic_expression -> FLOAT','algebraic_expression',1,'p_algebraic_expression_number','parser_rules.py',178),
  ('algebraic_expression -> OPAR algebraic_expression CPAR','algebraic_expression',3,'p_algebraic_expression_grouping','parser_rules.py',183),
  ('algebraic_expression -> numeric_function','algebraic_expression',1,'p_algebraic_expression_function','parser_rules.py',188),
  ('algebraic_expression -> algebraic_expression PLUS algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',194),
  ('algebraic_expression -> algebraic_expression MINUS algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',195),
  ('algebraic_expression -> algebraic_expression MUL algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',196),
  ('algebraic_expression -> algebraic_expression DIV algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',197),
  ('algebraic_expression -> MINUS algebraic_expression','algebraic_expression',2,'p_algebraic_expression','parser_rules.py',198),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',207),
  ('numeric_function -> graph_expression POINT NODES_COUNT','numeric_function',3,'p_numeric_functions','parser_rules.py',211),
  ('numeric_function -> graph_expression POINT EDGES_COUNT','numeric_function',3,'p_numeric_functions','parser_rules.py',212),
  ('numeric_function -> graph_expression POINT WEIGHT_SUM','numeric_function',3,'p_numeric_functions','parser_rules.py',213),
  ('logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression','logic_function',4,'p_logic_functions','parser_rules.py',219),
]
