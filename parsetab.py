
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftUNIONINTERSECTIONDIFFERENCEleftPLUSMINUSleftMULDIVrightUMINUSADD ASSIGN BEGIN BFS CBR COMMA COMPLEMENT CONCAT CONTAIN_EDGES CONTAIN_VERTEX CPAR DIFFERENCE DIGRAPH DIV EDGE EDGES_COUNT ELIF ELSE END EQUAL FLOAT FOREDGE FORVERTEX GRAPH GREATER GREATEREQ ID IF IN INT INTERSECTION KRUSKAL K_COLOR_PLOT LESS LESSEQ MINUS MUL MULTIGRAPH NEQUAL NODES_COUNT OBR OPAR PLOT PLUS POINT PRIM PSEUDOGRAPH STRING UNION WEIGHTED_PLOT WEIGHT_SUMInstructions    : Instructions InstructionInstructions    : Instruction Instruction      : Plot_instr\n                        | If_instr\n                        | If_else_instr\n                        | For_vertex_instr\n                        | Assign_instr\n                        | For_edge_instr\n                        | Add_vertex_instr\n                        | Add_edge_instr\n                        | Add_vertex_and_edge_instr\n                        | K_color_plot_instr\n                        | Weighted_plt_instrIf_instr         : IF OPAR logic_expression CPAR BEGIN Instructions ENDIf_else_instr  : IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions ENDFor_vertex_instr   : FORVERTEX ID IN ID BEGIN Instructions ENDFor_edge_instr   : FOREDGE ID IN ID BEGIN Instructions ENDPlot_instr   : PLOT OPAR graph_expression CPARAssign_instr     : ID ASSIGN graph_expressionAdd_vertex_instr      : ID ADD OPAR vertex_expression CPARK_color_plot_instr       : K_COLOR_PLOT OPAR graph_expression CPARWeighted_plt_instr       : WEIGHTED_PLOT OPAR graph_expression CPARAdd_edge_instr     : ID ADD OPAR edge_expression CPARAdd_vertex_and_edge_instr      : ID ADD OPAR vertex_expression COMMA edge_expression CPARgraph_expression       : OPAR graph_expression CPARgraph_expression         : KRUSKAL OPAR graph_expression CPAR\n                                | PRIM OPAR graph_expression CPAR\n                                | BFS OPAR graph_expression COMMA value_expression CPARgraph_expression   : GRAPH OPAR value_expression COMMA edge_expression CPAR\n                            | DIGRAPH OPAR value_expression COMMA edge_expression CPAR\n                            | GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR\n                            | DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR\n                            | graph_expression UNION graph_expression\n                            | graph_expression INTERSECTION graph_expression\n                            | graph_expression DIFFERENCE graph_expression\n                            | graph_expression CONCAT graph_expression\n                            | COMPLEMENT OPAR graph_expression CPAR\n                            | ID\n                            vertex_expression    : vertex_expression INT\n                            | INTedge_expression  : edge_expression OPAR INT COMMA INT CPAR\n                        | OPAR INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA INT CPAR\n                        | OPAR INT COMMA INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR \n                        | OPAR INT COMMA INT COMMA FLOAT CPAR\n                        | empty\n                        logic_expression     : value_expression EQUAL value_expression\n                            | value_expression GREATER value_expression\n                            | value_expression LESS value_expression\n                            | value_expression GREATEREQ value_expression\n                            | value_expression LESSEQ value_expression\n                            | value_expression NEQUAL value_expression\n                            | logic_functionvalue_expression     : algebraic_expression\n                            | numeric_functionalgebraic_expression      : INT\n                                | FLOATalgebraic_expression       : OPAR algebraic_expression CPARalgebraic_expression       : numeric_functionalgebraic_expression     : algebraic_expression PLUS algebraic_expression\n                                | algebraic_expression MINUS algebraic_expression\n                                | algebraic_expression MUL algebraic_expression\n                                | algebraic_expression DIV algebraic_expression\n                                | MINUS algebraic_expression %prec UMINUS\n                                empty :numeric_function     : graph_expression POINT NODES_COUNT\n                            | graph_expression POINT EDGES_COUNT\n                            | graph_expression POINT WEIGHT_SUMlogic_function       : graph_expression POINT CONTAIN_VERTEX value_expression\n                            | graph_expression POINT CONTAIN_EDGES edge_expression'
    
_lr_action_items = {'PLOT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,38,50,56,91,92,93,94,95,96,97,108,124,126,130,131,132,133,139,140,143,147,153,154,156,158,159,160,162,170,175,176,177,182,],[14,14,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-38,-19,-18,-21,-22,-25,-33,-34,-35,-36,14,14,-20,-23,14,-26,-27,-37,14,14,14,-14,-16,-24,-17,-28,-29,-30,14,-31,-32,14,-15,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,38,50,56,91,92,93,94,95,96,97,108,124,126,130,131,132,133,139,140,143,147,153,154,156,158,159,160,162,170,175,176,177,182,],[15,15,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-38,-19,-18,-21,-22,-25,-33,-34,-35,-36,15,15,-20,-23,15,-26,-27,-37,15,15,15,-14,-16,-24,-17,-28,-29,-30,15,-31,-32,15,-15,]),'FORVERTEX':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,38,50,56,91,92,93,94,95,96,97,108,124,126,130,131,132,133,139,140,143,147,153,154,156,158,159,160,162,170,175,176,177,182,],[16,16,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-38,-19,-18,-21,-22,-25,-33,-34,-35,-36,16,16,-20,-23,16,-26,-27,-37,16,16,16,-14,-16,-24,-17,-28,-29,-30,16,-31,-32,16,-15,]),'ID':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,21,22,23,25,28,29,30,38,39,48,49,50,52,56,57,58,59,60,61,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,91,92,93,94,95,96,97,108,119,124,126,130,131,132,133,134,139,140,143,147,153,154,156,158,159,160,162,170,175,176,177,182,],[17,17,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,24,27,-1,38,38,38,38,38,38,-38,38,38,84,-19,90,-18,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-21,-22,-25,-33,-34,-35,-36,17,38,17,-20,-23,17,-26,-27,38,-37,17,17,17,-14,-16,-24,-17,-28,-29,-30,17,-31,-32,17,-15,]),'FOREDGE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,38,50,56,91,92,93,94,95,96,97,108,124,126,130,131,132,133,139,140,143,147,153,154,156,158,159,160,162,170,175,176,177,182,],[18,18,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-38,-19,-18,-21,-22,-25,-33,-34,-35,-36,18,18,-20,-23,18,-26,-27,-37,18,18,18,-14,-16,-24,-17,-28,-29,-30,18,-31,-32,18,-15,]),'K_COLOR_PLOT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,38,50,56,91,92,93,94,95,96,97,108,124,126,130,131,132,133,139,140,143,147,153,154,156,158,159,160,162,170,175,176,177,182,],[19,19,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-38,-19,-18,-21,-22,-25,-33,-34,-35,-36,19,19,-20,-23,19,-26,-27,-37,19,19,19,-14,-16,-24,-17,-28,-29,-30,19,-31,-32,19,-15,]),'WEIGHTED_PLOT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,38,50,56,91,92,93,94,95,96,97,108,124,126,130,131,132,133,139,140,143,147,153,154,156,158,159,160,162,170,175,176,177,182,],[20,20,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-38,-19,-18,-21,-22,-25,-33,-34,-35,-36,20,20,-20,-23,20,-26,-27,-37,20,20,20,-14,-16,-24,-17,-28,-29,-30,20,-31,-32,20,-15,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,21,38,50,56,91,92,93,94,95,96,97,126,130,132,133,139,153,154,156,158,159,160,162,175,176,182,],[0,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-38,-19,-18,-21,-22,-25,-33,-34,-35,-36,-20,-23,-26,-27,-37,-14,-16,-24,-17,-28,-29,-30,-31,-32,-15,]),'END':([2,3,4,5,6,7,8,9,10,11,12,13,21,38,50,56,91,92,93,94,95,96,97,126,130,132,133,139,140,143,147,153,154,156,158,159,160,162,175,176,177,182,],[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-38,-19,-18,-21,-22,-25,-33,-34,-35,-36,-20,-23,-26,-27,-37,153,154,158,-14,-16,-24,-17,-28,-29,-30,-31,-32,182,-15,]),'OPAR':([14,15,19,20,22,23,25,26,28,29,30,32,33,34,35,36,37,39,48,51,57,58,59,60,61,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,87,89,119,120,127,134,135,137,142,145,149,151,161,163,166,168,169,174,178,179,183,184,],[22,23,28,29,30,39,30,51,30,30,30,61,62,63,64,65,66,39,39,85,30,30,30,30,30,30,30,39,39,30,39,39,39,39,39,39,39,39,39,39,129,-47,39,85,85,39,85,85,129,129,129,129,85,85,-42,129,129,-41,-44,-46,-43,-45,]),'ASSIGN':([17,],[25,]),'ADD':([17,],[26,]),'KRUSKAL':([22,23,25,28,29,30,39,48,57,58,59,60,61,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,119,134,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'PRIM':([22,23,25,28,29,30,39,48,57,58,59,60,61,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,119,134,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'BFS':([22,23,25,28,29,30,39,48,57,58,59,60,61,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,119,134,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'GRAPH':([22,23,25,28,29,30,39,48,57,58,59,60,61,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,119,134,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'DIGRAPH':([22,23,25,28,29,30,39,48,57,58,59,60,61,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,119,134,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'COMPLEMENT':([22,23,25,28,29,30,39,48,57,58,59,60,61,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,119,134,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'INT':([23,39,48,51,64,65,71,72,73,74,75,76,77,78,79,80,85,86,88,102,104,119,128,129,134,136,138,144,157,165,173,],[46,46,46,88,46,46,46,46,46,46,46,46,46,46,46,46,125,128,-40,88,88,46,-39,146,46,128,128,155,167,171,180,]),'FLOAT':([23,39,48,64,65,71,72,73,74,75,76,77,78,79,80,119,134,165,173,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,172,181,]),'MINUS':([23,39,43,44,46,47,48,64,65,67,69,71,72,73,74,75,76,77,78,79,80,82,106,115,116,117,118,119,121,122,123,134,],[48,48,78,-60,-57,-58,48,48,48,78,-60,48,48,48,48,48,48,48,48,48,48,-65,-59,-61,-62,-63,-64,48,-67,-68,-69,48,]),'IN':([24,27,],[49,52,]),'CPAR':([31,38,40,42,43,44,46,47,51,53,54,55,67,68,69,82,86,87,88,89,93,94,95,96,97,98,99,105,106,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,128,132,133,135,137,139,141,142,145,148,149,151,155,159,160,161,162,163,166,167,168,169,171,172,174,175,176,178,179,180,181,183,184,],[56,-38,70,-54,-55,-56,-57,-58,-66,91,92,93,106,93,-60,-65,126,130,-40,-47,-25,-33,-34,-35,-36,132,133,139,-59,-48,-49,-50,-51,-52,-53,-61,-62,-63,-64,-66,-67,-68,-69,-66,-39,-26,-27,-66,-66,-37,-70,-71,156,159,160,162,166,-28,-29,-66,-30,-66,-42,174,175,176,178,179,-41,-31,-32,-44,-46,183,184,-43,-45,]),'UNION':([31,38,45,50,53,54,55,68,83,93,94,95,96,97,98,99,100,105,132,133,139,159,160,162,175,176,],[57,-38,57,57,57,57,57,57,57,-25,-33,-34,-35,57,57,57,57,57,-26,-27,-37,-28,-29,-30,-31,-32,]),'INTERSECTION':([31,38,45,50,53,54,55,68,83,93,94,95,96,97,98,99,100,105,132,133,139,159,160,162,175,176,],[58,-38,58,58,58,58,58,58,58,-25,-33,-34,-35,58,58,58,58,58,-26,-27,-37,-28,-29,-30,-31,-32,]),'DIFFERENCE':([31,38,45,50,53,54,55,68,83,93,94,95,96,97,98,99,100,105,132,133,139,159,160,162,175,176,],[59,-38,59,59,59,59,59,59,59,-25,-33,-34,-35,59,59,59,59,59,-26,-27,-37,-28,-29,-30,-31,-32,]),'CONCAT':([31,38,45,50,53,54,55,68,83,93,94,95,96,97,98,99,100,105,132,133,139,159,160,162,175,176,],[60,-38,60,60,60,60,60,60,60,-25,-33,-34,-35,-36,60,60,60,60,-26,-27,-37,-28,-29,-30,-31,-32,]),'POINT':([38,45,68,83,93,94,95,96,97,132,133,139,159,160,162,175,176,],[-38,81,107,107,-25,-33,-34,-35,-36,-26,-27,-37,-28,-29,-30,-31,-32,]),'COMMA':([38,43,44,46,47,69,82,86,88,93,94,95,96,97,100,101,103,106,115,116,117,118,121,122,123,125,128,132,133,139,146,150,152,155,159,160,162,167,175,176,],[-38,-55,-56,-57,-58,-60,-65,127,-40,-25,-33,-34,-35,-36,134,135,137,-59,-61,-62,-63,-64,-67,-68,-69,144,-39,-26,-27,-37,157,161,163,165,-28,-29,-30,173,-31,-32,]),'EQUAL':([41,43,44,46,47,69,82,106,115,116,117,118,121,122,123,],[71,-55,-56,-57,-58,-60,-65,-59,-61,-62,-63,-64,-67,-68,-69,]),'GREATER':([41,43,44,46,47,69,82,106,115,116,117,118,121,122,123,],[72,-55,-56,-57,-58,-60,-65,-59,-61,-62,-63,-64,-67,-68,-69,]),'LESS':([41,43,44,46,47,69,82,106,115,116,117,118,121,122,123,],[73,-55,-56,-57,-58,-60,-65,-59,-61,-62,-63,-64,-67,-68,-69,]),'GREATEREQ':([41,43,44,46,47,69,82,106,115,116,117,118,121,122,123,],[74,-55,-56,-57,-58,-60,-65,-59,-61,-62,-63,-64,-67,-68,-69,]),'LESSEQ':([41,43,44,46,47,69,82,106,115,116,117,118,121,122,123,],[75,-55,-56,-57,-58,-60,-65,-59,-61,-62,-63,-64,-67,-68,-69,]),'NEQUAL':([41,43,44,46,47,69,82,106,115,116,117,118,121,122,123,],[76,-55,-56,-57,-58,-60,-65,-59,-61,-62,-63,-64,-67,-68,-69,]),'PLUS':([43,44,46,47,67,69,82,106,115,116,117,118,121,122,123,],[77,-60,-57,-58,77,-60,-65,-59,-61,-62,-63,-64,-67,-68,-69,]),'MUL':([43,44,46,47,67,69,82,106,115,116,117,118,121,122,123,],[79,-60,-57,-58,79,-60,-65,-59,79,79,-63,-64,-67,-68,-69,]),'DIV':([43,44,46,47,67,69,82,106,115,116,117,118,121,122,123,],[80,-60,-57,-58,80,-60,-65,-59,80,80,-63,-64,-67,-68,-69,]),'OBR':([64,65,],[102,104,]),'BEGIN':([70,84,90,164,],[108,124,131,170,]),'CONTAIN_VERTEX':([81,],[119,]),'CONTAIN_EDGES':([81,],[120,]),'NODES_COUNT':([81,107,],[121,121,]),'EDGES_COUNT':([81,107,],[122,122,]),'WEIGHT_SUM':([81,107,],[123,123,]),'CBR':([88,128,136,138,],[-40,-39,150,152,]),'ELSE':([153,],[164,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Instructions':([0,108,124,131,170,],[1,140,143,147,177,]),'Instruction':([0,1,108,124,131,140,143,147,170,177,],[2,21,2,2,2,21,21,21,2,21,]),'Plot_instr':([0,1,108,124,131,140,143,147,170,177,],[3,3,3,3,3,3,3,3,3,3,]),'If_instr':([0,1,108,124,131,140,143,147,170,177,],[4,4,4,4,4,4,4,4,4,4,]),'If_else_instr':([0,1,108,124,131,140,143,147,170,177,],[5,5,5,5,5,5,5,5,5,5,]),'For_vertex_instr':([0,1,108,124,131,140,143,147,170,177,],[6,6,6,6,6,6,6,6,6,6,]),'Assign_instr':([0,1,108,124,131,140,143,147,170,177,],[7,7,7,7,7,7,7,7,7,7,]),'For_edge_instr':([0,1,108,124,131,140,143,147,170,177,],[8,8,8,8,8,8,8,8,8,8,]),'Add_vertex_instr':([0,1,108,124,131,140,143,147,170,177,],[9,9,9,9,9,9,9,9,9,9,]),'Add_edge_instr':([0,1,108,124,131,140,143,147,170,177,],[10,10,10,10,10,10,10,10,10,10,]),'Add_vertex_and_edge_instr':([0,1,108,124,131,140,143,147,170,177,],[11,11,11,11,11,11,11,11,11,11,]),'K_color_plot_instr':([0,1,108,124,131,140,143,147,170,177,],[12,12,12,12,12,12,12,12,12,12,]),'Weighted_plt_instr':([0,1,108,124,131,140,143,147,170,177,],[13,13,13,13,13,13,13,13,13,13,]),'graph_expression':([22,23,25,28,29,30,39,48,57,58,59,60,61,62,63,64,65,66,71,72,73,74,75,76,77,78,79,80,119,134,],[31,45,50,53,54,55,68,83,94,95,96,97,98,99,100,83,83,105,83,83,83,83,83,83,83,83,83,83,83,83,]),'logic_expression':([23,],[40,]),'value_expression':([23,64,65,71,72,73,74,75,76,119,134,],[41,101,103,109,110,111,112,113,114,141,148,]),'logic_function':([23,],[42,]),'algebraic_expression':([23,39,48,64,65,71,72,73,74,75,76,77,78,79,80,119,134,],[43,67,82,43,43,43,43,43,43,43,43,115,116,117,118,43,43,]),'numeric_function':([23,39,48,64,65,71,72,73,74,75,76,77,78,79,80,119,134,],[44,69,69,44,44,44,44,44,44,44,44,69,69,69,69,44,44,]),'vertex_expression':([51,102,104,],[86,136,138,]),'edge_expression':([51,120,127,135,137,161,163,],[87,142,145,149,151,168,169,]),'empty':([51,120,127,135,137,161,163,],[89,89,89,89,89,89,89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Instructions","S'",1,None,None,None),
  ('Instructions -> Instructions Instruction','Instructions',2,'p_instructions_list','parser_rules.py',17),
  ('Instructions -> Instruction','Instructions',1,'p_instructions_instruction','parser_rules.py',23),
  ('Instruction -> Plot_instr','Instruction',1,'p_instruction','parser_rules.py',28),
  ('Instruction -> If_instr','Instruction',1,'p_instruction','parser_rules.py',29),
  ('Instruction -> If_else_instr','Instruction',1,'p_instruction','parser_rules.py',30),
  ('Instruction -> For_vertex_instr','Instruction',1,'p_instruction','parser_rules.py',31),
  ('Instruction -> Assign_instr','Instruction',1,'p_instruction','parser_rules.py',32),
  ('Instruction -> For_edge_instr','Instruction',1,'p_instruction','parser_rules.py',33),
  ('Instruction -> Add_vertex_instr','Instruction',1,'p_instruction','parser_rules.py',34),
  ('Instruction -> Add_edge_instr','Instruction',1,'p_instruction','parser_rules.py',35),
  ('Instruction -> Add_vertex_and_edge_instr','Instruction',1,'p_instruction','parser_rules.py',36),
  ('Instruction -> K_color_plot_instr','Instruction',1,'p_instruction','parser_rules.py',37),
  ('Instruction -> Weighted_plt_instr','Instruction',1,'p_instruction','parser_rules.py',38),
  ('If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END','If_instr',7,'p_if_instr','parser_rules.py',44),
  ('If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END','If_else_instr',11,'p_if_else_instr','parser_rules.py',49),
  ('For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END','For_vertex_instr',7,'p_for_vertex_instr','parser_rules.py',54),
  ('For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END','For_edge_instr',7,'p_for_edge_instr','parser_rules.py',59),
  ('Plot_instr -> PLOT OPAR graph_expression CPAR','Plot_instr',4,'p_plot_instr','parser_rules.py',65),
  ('Assign_instr -> ID ASSIGN graph_expression','Assign_instr',3,'p_assign_instr','parser_rules.py',71),
  ('Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR','Add_vertex_instr',5,'p_add_vertex_instr','parser_rules.py',77),
  ('K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR','K_color_plot_instr',4,'p_k_color_plot_instr','parser_rules.py',83),
  ('Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR','Weighted_plt_instr',4,'p_weighted_plot_instr','parser_rules.py',89),
  ('Add_edge_instr -> ID ADD OPAR edge_expression CPAR','Add_edge_instr',5,'p_add_edge_instr','parser_rules.py',94),
  ('Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR','Add_vertex_and_edge_instr',7,'p_add_vertex_and_edge_instr','parser_rules.py',99),
  ('graph_expression -> OPAR graph_expression CPAR','graph_expression',3,'p_graph_expression_grouping','parser_rules.py',105),
  ('graph_expression -> KRUSKAL OPAR graph_expression CPAR','graph_expression',4,'p_graph_expression_algorithm','parser_rules.py',110),
  ('graph_expression -> PRIM OPAR graph_expression CPAR','graph_expression',4,'p_graph_expression_algorithm','parser_rules.py',111),
  ('graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR','graph_expression',6,'p_graph_expression_algorithm','parser_rules.py',112),
  ('graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR','graph_expression',6,'p_graph_expression','parser_rules.py',121),
  ('graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR','graph_expression',6,'p_graph_expression','parser_rules.py',122),
  ('graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR','graph_expression',8,'p_graph_expression','parser_rules.py',123),
  ('graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR','graph_expression',8,'p_graph_expression','parser_rules.py',124),
  ('graph_expression -> graph_expression UNION graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',125),
  ('graph_expression -> graph_expression INTERSECTION graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',126),
  ('graph_expression -> graph_expression DIFFERENCE graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',127),
  ('graph_expression -> graph_expression CONCAT graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',128),
  ('graph_expression -> COMPLEMENT OPAR graph_expression CPAR','graph_expression',4,'p_graph_expression','parser_rules.py',129),
  ('graph_expression -> ID','graph_expression',1,'p_graph_expression','parser_rules.py',130),
  ('vertex_expression -> vertex_expression INT','vertex_expression',2,'p_vertex_expression','parser_rules.py',148),
  ('vertex_expression -> INT','vertex_expression',1,'p_vertex_expression','parser_rules.py',149),
  ('edge_expression -> edge_expression OPAR INT COMMA INT CPAR','edge_expression',6,'p_edge_expression','parser_rules.py',157),
  ('edge_expression -> OPAR INT COMMA INT CPAR','edge_expression',5,'p_edge_expression','parser_rules.py',158),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',159),
  ('edge_expression -> OPAR INT COMMA INT COMMA INT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',160),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',161),
  ('edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',162),
  ('edge_expression -> empty','edge_expression',1,'p_edge_expression','parser_rules.py',163),
  ('logic_expression -> value_expression EQUAL value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',179),
  ('logic_expression -> value_expression GREATER value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',180),
  ('logic_expression -> value_expression LESS value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',181),
  ('logic_expression -> value_expression GREATEREQ value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',182),
  ('logic_expression -> value_expression LESSEQ value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',183),
  ('logic_expression -> value_expression NEQUAL value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',184),
  ('logic_expression -> logic_function','logic_expression',1,'p_logic_expression','parser_rules.py',185),
  ('value_expression -> algebraic_expression','value_expression',1,'p_value_expression','parser_rules.py',193),
  ('value_expression -> numeric_function','value_expression',1,'p_value_expression','parser_rules.py',194),
  ('algebraic_expression -> INT','algebraic_expression',1,'p_algebraic_expression_number','parser_rules.py',200),
  ('algebraic_expression -> FLOAT','algebraic_expression',1,'p_algebraic_expression_number','parser_rules.py',201),
  ('algebraic_expression -> OPAR algebraic_expression CPAR','algebraic_expression',3,'p_algebraic_expression_grouping','parser_rules.py',206),
  ('algebraic_expression -> numeric_function','algebraic_expression',1,'p_algebraic_expression_function','parser_rules.py',211),
  ('algebraic_expression -> algebraic_expression PLUS algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',217),
  ('algebraic_expression -> algebraic_expression MINUS algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',218),
  ('algebraic_expression -> algebraic_expression MUL algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',219),
  ('algebraic_expression -> algebraic_expression DIV algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',220),
  ('algebraic_expression -> MINUS algebraic_expression','algebraic_expression',2,'p_algebraic_expression','parser_rules.py',221),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',230),
  ('numeric_function -> graph_expression POINT NODES_COUNT','numeric_function',3,'p_numeric_functions','parser_rules.py',234),
  ('numeric_function -> graph_expression POINT EDGES_COUNT','numeric_function',3,'p_numeric_functions','parser_rules.py',235),
  ('numeric_function -> graph_expression POINT WEIGHT_SUM','numeric_function',3,'p_numeric_functions','parser_rules.py',236),
  ('logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression','logic_function',4,'p_logic_functions','parser_rules.py',242),
  ('logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression','logic_function',4,'p_logic_functions','parser_rules.py',243),
]
