
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCONCATleftUNIONINTERSECTIONDIFFERENCEleftPLUSMINUSleftMULDIVrightUMINUSADD ASSIGN BEGIN CBR COMMA COMPLEMENT CONCAT CONTAIN_EDGES CONTAIN_VERTEX CPAR DIFFERENCE DIGRAPH DIV EDGE EDGES_COUNT ELIF ELSE END EQUAL FLOAT FOREDGE FORVERTEX GRAPH GREATER GREATEREQ ID IF IN INT INTERSECTION K_COLOR_PLOT LESS LESSEQ MINUS MUL MULTIGRAPH NEQUAL NODES_COUNT OBR OPAR PLOT PLUS POINT PSEUDOGRAPH STRING UNION WEIGHTED_PLOT WEIGHT_SUMInstructions    : Instructions InstructionInstructions    : Instruction Instruction      : Plot_instr\n                        | If_instr\n                        | If_else_instr\n                        | For_vertex_instr\n                        | Assign_instr\n                        | For_edge_instr\n                        | Add_vertex_instr\n                        | Add_edge_instr\n                        | Add_vertex_and_edge_instr\n                        | K_color_plot_instr\n                        | Weighted_plt_instrIf_instr         : IF OPAR logic_expression CPAR BEGIN Instructions ENDIf_else_instr  : IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions ENDFor_vertex_instr   : FORVERTEX ID IN ID BEGIN Instructions ENDFor_edge_instr   : FOREDGE ID IN ID BEGIN Instructions ENDPlot_instr   : PLOT OPAR graph_expression CPARAssign_instr     : ID ASSIGN graph_expressionAdd_vertex_instr      : ID ADD OPAR vertex_expression CPARK_color_plot_instr       : K_COLOR_PLOT OPAR graph_expression CPARWeighted_plt_instr       : WEIGHTED_PLOT OPAR graph_expression CPARAdd_edge_instr     : ID ADD OPAR edge_expression CPARAdd_vertex_and_edge_instr      : ID ADD OPAR vertex_expression COMMA edge_expression CPARgraph_expression       : OPAR graph_expression CPARgraph_expression   : GRAPH OPAR value_expression COMMA edge_expression CPAR\n                            | DIGRAPH OPAR value_expression COMMA edge_expression CPAR\n                            | GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR\n                            | DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR\n                            | graph_expression UNION graph_expression\n                            | graph_expression INTERSECTION graph_expression\n                            | graph_expression DIFFERENCE graph_expression\n                            | graph_expression CONCAT graph_expression\n                            | COMPLEMENT OPAR graph_expression CPAR\n                            | ID\n                            vertex_expression    : vertex_expression INT\n                            | INTedge_expression  : edge_expression OPAR INT COMMA INT CPAR\n                        | OPAR INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA INT CPAR\n                        | OPAR INT COMMA INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR \n                        | OPAR INT COMMA INT COMMA FLOAT CPAR\n                        | empty\n                        logic_expression     : value_expression EQUAL value_expression\n                            | value_expression GREATER value_expression\n                            | value_expression LESS value_expression\n                            | value_expression GREATEREQ value_expression\n                            | value_expression LESSEQ value_expression\n                            | value_expression NEQUAL value_expression\n                            | logic_functionvalue_expression     : algebraic_expression\n                            | numeric_functionalgebraic_expression      : INT\n                                | FLOATalgebraic_expression       : OPAR algebraic_expression CPARalgebraic_expression       : numeric_functionalgebraic_expression     : algebraic_expression PLUS algebraic_expression\n                                | algebraic_expression MINUS algebraic_expression\n                                | algebraic_expression MUL algebraic_expression\n                                | algebraic_expression DIV algebraic_expression\n                                | MINUS algebraic_expression %prec UMINUS\n                                empty :numeric_function     : graph_expression POINT NODES_COUNT\n                            | graph_expression POINT EDGES_COUNT\n                            | graph_expression POINT WEIGHT_SUMlogic_function       : graph_expression POINT CONTAIN_VERTEX value_expression\n                            | graph_expression POINT CONTAIN_EDGES edge_expression'
    
_lr_action_items = {'PLOT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,35,47,53,85,86,87,88,89,90,91,99,115,117,121,122,127,128,131,135,140,141,143,145,146,148,156,161,162,163,168,],[14,14,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-35,-19,-18,-21,-22,-25,-30,-31,-32,-33,14,14,-20,-23,14,-34,14,14,14,-14,-16,-24,-17,-26,-27,14,-28,-29,14,-15,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,35,47,53,85,86,87,88,89,90,91,99,115,117,121,122,127,128,131,135,140,141,143,145,146,148,156,161,162,163,168,],[15,15,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-35,-19,-18,-21,-22,-25,-30,-31,-32,-33,15,15,-20,-23,15,-34,15,15,15,-14,-16,-24,-17,-26,-27,15,-28,-29,15,-15,]),'FORVERTEX':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,35,47,53,85,86,87,88,89,90,91,99,115,117,121,122,127,128,131,135,140,141,143,145,146,148,156,161,162,163,168,],[16,16,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-35,-19,-18,-21,-22,-25,-30,-31,-32,-33,16,16,-20,-23,16,-34,16,16,16,-14,-16,-24,-17,-26,-27,16,-28,-29,16,-15,]),'ID':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,21,22,23,25,28,29,30,35,36,45,46,47,49,53,54,55,56,57,58,59,60,65,66,67,68,69,70,71,72,73,74,85,86,87,88,89,90,91,99,110,115,117,121,122,127,128,131,135,140,141,143,145,146,148,156,161,162,163,168,],[17,17,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,24,27,-1,35,35,35,35,35,35,-35,35,35,78,-19,84,-18,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-21,-22,-25,-30,-31,-32,-33,17,35,17,-20,-23,17,-34,17,17,17,-14,-16,-24,-17,-26,-27,17,-28,-29,17,-15,]),'FOREDGE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,35,47,53,85,86,87,88,89,90,91,99,115,117,121,122,127,128,131,135,140,141,143,145,146,148,156,161,162,163,168,],[18,18,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-35,-19,-18,-21,-22,-25,-30,-31,-32,-33,18,18,-20,-23,18,-34,18,18,18,-14,-16,-24,-17,-26,-27,18,-28,-29,18,-15,]),'K_COLOR_PLOT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,35,47,53,85,86,87,88,89,90,91,99,115,117,121,122,127,128,131,135,140,141,143,145,146,148,156,161,162,163,168,],[19,19,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-35,-19,-18,-21,-22,-25,-30,-31,-32,-33,19,19,-20,-23,19,-34,19,19,19,-14,-16,-24,-17,-26,-27,19,-28,-29,19,-15,]),'WEIGHTED_PLOT':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,21,35,47,53,85,86,87,88,89,90,91,99,115,117,121,122,127,128,131,135,140,141,143,145,146,148,156,161,162,163,168,],[20,20,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-35,-19,-18,-21,-22,-25,-30,-31,-32,-33,20,20,-20,-23,20,-34,20,20,20,-14,-16,-24,-17,-26,-27,20,-28,-29,20,-15,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,21,35,47,53,85,86,87,88,89,90,91,117,121,127,140,141,143,145,146,148,161,162,168,],[0,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-35,-19,-18,-21,-22,-25,-30,-31,-32,-33,-20,-23,-34,-14,-16,-24,-17,-26,-27,-28,-29,-15,]),'END':([2,3,4,5,6,7,8,9,10,11,12,13,21,35,47,53,85,86,87,88,89,90,91,117,121,127,128,131,135,140,141,143,145,146,148,161,162,163,168,],[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-1,-35,-19,-18,-21,-22,-25,-30,-31,-32,-33,-20,-23,-34,140,141,145,-14,-16,-24,-17,-26,-27,-28,-29,168,-15,]),'OPAR':([14,15,19,20,22,23,25,26,28,29,30,32,33,34,36,45,48,54,55,56,57,58,59,60,65,66,67,68,69,70,71,72,73,74,81,83,110,111,118,123,125,130,133,136,138,147,149,152,154,155,160,164,165,169,170,],[22,23,28,29,30,36,30,48,30,30,30,58,59,60,36,36,79,30,30,30,30,36,36,30,36,36,36,36,36,36,36,36,36,36,120,-44,36,79,79,79,79,120,120,120,120,79,79,-39,120,120,-38,-41,-43,-40,-42,]),'ASSIGN':([17,],[25,]),'ADD':([17,],[26,]),'GRAPH':([22,23,25,28,29,30,36,45,54,55,56,57,58,59,60,65,66,67,68,69,70,71,72,73,74,110,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'DIGRAPH':([22,23,25,28,29,30,36,45,54,55,56,57,58,59,60,65,66,67,68,69,70,71,72,73,74,110,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'COMPLEMENT':([22,23,25,28,29,30,36,45,54,55,56,57,58,59,60,65,66,67,68,69,70,71,72,73,74,110,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'INT':([23,36,45,48,58,59,65,66,67,68,69,70,71,72,73,74,79,80,82,93,95,110,119,120,124,126,132,144,151,159,],[43,43,43,82,43,43,43,43,43,43,43,43,43,43,43,43,116,119,-37,82,82,43,-36,134,119,119,142,153,157,166,]),'FLOAT':([23,36,45,58,59,65,66,67,68,69,70,71,72,73,74,110,151,159,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,158,167,]),'MINUS':([23,36,40,41,43,44,45,58,59,61,63,65,66,67,68,69,70,71,72,73,74,76,97,106,107,108,109,110,112,113,114,],[45,45,72,-57,-54,-55,45,45,45,72,-57,45,45,45,45,45,45,45,45,45,45,-62,-56,-58,-59,-60,-61,45,-64,-65,-66,]),'IN':([24,27,],[46,49,]),'CPAR':([31,35,37,39,40,41,43,44,48,50,51,52,61,62,63,76,80,81,82,83,87,88,89,90,91,96,97,100,101,102,103,104,105,106,107,108,109,111,112,113,114,118,119,123,125,127,129,130,133,136,138,142,146,147,148,149,152,153,154,155,157,158,160,161,162,164,165,166,167,169,170,],[53,-35,64,-51,-52,-53,-54,-55,-63,85,86,87,97,87,-57,-62,117,121,-37,-44,-25,-30,-31,-32,-33,127,-56,-45,-46,-47,-48,-49,-50,-58,-59,-60,-61,-63,-64,-65,-66,-63,-36,-63,-63,-34,-67,-68,143,146,148,152,-26,-63,-27,-63,-39,160,161,162,164,165,-38,-28,-29,-41,-43,169,170,-40,-42,]),'UNION':([31,35,42,47,50,51,52,62,77,87,88,89,90,91,96,127,146,148,161,162,],[54,-35,54,54,54,54,54,54,54,-25,-30,-31,-32,54,54,-34,-26,-27,-28,-29,]),'INTERSECTION':([31,35,42,47,50,51,52,62,77,87,88,89,90,91,96,127,146,148,161,162,],[55,-35,55,55,55,55,55,55,55,-25,-30,-31,-32,55,55,-34,-26,-27,-28,-29,]),'DIFFERENCE':([31,35,42,47,50,51,52,62,77,87,88,89,90,91,96,127,146,148,161,162,],[56,-35,56,56,56,56,56,56,56,-25,-30,-31,-32,56,56,-34,-26,-27,-28,-29,]),'CONCAT':([31,35,42,47,50,51,52,62,77,87,88,89,90,91,96,127,146,148,161,162,],[57,-35,57,57,57,57,57,57,57,-25,-30,-31,-32,-33,57,-34,-26,-27,-28,-29,]),'POINT':([35,42,62,77,87,88,89,90,91,127,146,148,161,162,],[-35,75,98,98,-25,-30,-31,-32,-33,-34,-26,-27,-28,-29,]),'EQUAL':([38,40,41,43,44,63,76,97,106,107,108,109,112,113,114,],[65,-52,-53,-54,-55,-57,-62,-56,-58,-59,-60,-61,-64,-65,-66,]),'GREATER':([38,40,41,43,44,63,76,97,106,107,108,109,112,113,114,],[66,-52,-53,-54,-55,-57,-62,-56,-58,-59,-60,-61,-64,-65,-66,]),'LESS':([38,40,41,43,44,63,76,97,106,107,108,109,112,113,114,],[67,-52,-53,-54,-55,-57,-62,-56,-58,-59,-60,-61,-64,-65,-66,]),'GREATEREQ':([38,40,41,43,44,63,76,97,106,107,108,109,112,113,114,],[68,-52,-53,-54,-55,-57,-62,-56,-58,-59,-60,-61,-64,-65,-66,]),'LESSEQ':([38,40,41,43,44,63,76,97,106,107,108,109,112,113,114,],[69,-52,-53,-54,-55,-57,-62,-56,-58,-59,-60,-61,-64,-65,-66,]),'NEQUAL':([38,40,41,43,44,63,76,97,106,107,108,109,112,113,114,],[70,-52,-53,-54,-55,-57,-62,-56,-58,-59,-60,-61,-64,-65,-66,]),'COMMA':([40,41,43,44,63,76,80,82,92,94,97,106,107,108,109,112,113,114,116,119,134,137,139,142,153,],[-52,-53,-54,-55,-57,-62,118,-37,123,125,-56,-58,-59,-60,-61,-64,-65,-66,132,-36,144,147,149,151,159,]),'PLUS':([40,41,43,44,61,63,76,97,106,107,108,109,112,113,114,],[71,-57,-54,-55,71,-57,-62,-56,-58,-59,-60,-61,-64,-65,-66,]),'MUL':([40,41,43,44,61,63,76,97,106,107,108,109,112,113,114,],[73,-57,-54,-55,73,-57,-62,-56,73,73,-60,-61,-64,-65,-66,]),'DIV':([40,41,43,44,61,63,76,97,106,107,108,109,112,113,114,],[74,-57,-54,-55,74,-57,-62,-56,74,74,-60,-61,-64,-65,-66,]),'OBR':([58,59,],[93,95,]),'BEGIN':([64,78,84,150,],[99,115,122,156,]),'CONTAIN_VERTEX':([75,],[110,]),'CONTAIN_EDGES':([75,],[111,]),'NODES_COUNT':([75,98,],[112,112,]),'EDGES_COUNT':([75,98,],[113,113,]),'WEIGHT_SUM':([75,98,],[114,114,]),'CBR':([82,119,124,126,],[-37,-36,137,139,]),'ELSE':([140,],[150,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Instructions':([0,99,115,122,156,],[1,128,131,135,163,]),'Instruction':([0,1,99,115,122,128,131,135,156,163,],[2,21,2,2,2,21,21,21,2,21,]),'Plot_instr':([0,1,99,115,122,128,131,135,156,163,],[3,3,3,3,3,3,3,3,3,3,]),'If_instr':([0,1,99,115,122,128,131,135,156,163,],[4,4,4,4,4,4,4,4,4,4,]),'If_else_instr':([0,1,99,115,122,128,131,135,156,163,],[5,5,5,5,5,5,5,5,5,5,]),'For_vertex_instr':([0,1,99,115,122,128,131,135,156,163,],[6,6,6,6,6,6,6,6,6,6,]),'Assign_instr':([0,1,99,115,122,128,131,135,156,163,],[7,7,7,7,7,7,7,7,7,7,]),'For_edge_instr':([0,1,99,115,122,128,131,135,156,163,],[8,8,8,8,8,8,8,8,8,8,]),'Add_vertex_instr':([0,1,99,115,122,128,131,135,156,163,],[9,9,9,9,9,9,9,9,9,9,]),'Add_edge_instr':([0,1,99,115,122,128,131,135,156,163,],[10,10,10,10,10,10,10,10,10,10,]),'Add_vertex_and_edge_instr':([0,1,99,115,122,128,131,135,156,163,],[11,11,11,11,11,11,11,11,11,11,]),'K_color_plot_instr':([0,1,99,115,122,128,131,135,156,163,],[12,12,12,12,12,12,12,12,12,12,]),'Weighted_plt_instr':([0,1,99,115,122,128,131,135,156,163,],[13,13,13,13,13,13,13,13,13,13,]),'graph_expression':([22,23,25,28,29,30,36,45,54,55,56,57,58,59,60,65,66,67,68,69,70,71,72,73,74,110,],[31,42,47,50,51,52,62,77,88,89,90,91,77,77,96,77,77,77,77,77,77,77,77,77,77,77,]),'logic_expression':([23,],[37,]),'value_expression':([23,58,59,65,66,67,68,69,70,110,],[38,92,94,100,101,102,103,104,105,129,]),'logic_function':([23,],[39,]),'algebraic_expression':([23,36,45,58,59,65,66,67,68,69,70,71,72,73,74,110,],[40,61,76,40,40,40,40,40,40,40,40,106,107,108,109,40,]),'numeric_function':([23,36,45,58,59,65,66,67,68,69,70,71,72,73,74,110,],[41,63,63,41,41,41,41,41,41,41,41,63,63,63,63,41,]),'vertex_expression':([48,93,95,],[80,124,126,]),'edge_expression':([48,111,118,123,125,147,149,],[81,130,133,136,138,154,155,]),'empty':([48,111,118,123,125,147,149,],[83,83,83,83,83,83,83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Instructions","S'",1,None,None,None),
  ('Instructions -> Instructions Instruction','Instructions',2,'p_instructions_list','parser_rules.py',17),
  ('Instructions -> Instruction','Instructions',1,'p_instructions_instruction','parser_rules.py',23),
  ('Instruction -> Plot_instr','Instruction',1,'p_instruction','parser_rules.py',28),
  ('Instruction -> If_instr','Instruction',1,'p_instruction','parser_rules.py',29),
  ('Instruction -> If_else_instr','Instruction',1,'p_instruction','parser_rules.py',30),
  ('Instruction -> For_vertex_instr','Instruction',1,'p_instruction','parser_rules.py',31),
  ('Instruction -> Assign_instr','Instruction',1,'p_instruction','parser_rules.py',32),
  ('Instruction -> For_edge_instr','Instruction',1,'p_instruction','parser_rules.py',33),
  ('Instruction -> Add_vertex_instr','Instruction',1,'p_instruction','parser_rules.py',34),
  ('Instruction -> Add_edge_instr','Instruction',1,'p_instruction','parser_rules.py',35),
  ('Instruction -> Add_vertex_and_edge_instr','Instruction',1,'p_instruction','parser_rules.py',36),
  ('Instruction -> K_color_plot_instr','Instruction',1,'p_instruction','parser_rules.py',37),
  ('Instruction -> Weighted_plt_instr','Instruction',1,'p_instruction','parser_rules.py',38),
  ('If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END','If_instr',7,'p_if_instr','parser_rules.py',44),
  ('If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END','If_else_instr',11,'p_if_else_instr','parser_rules.py',49),
  ('For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END','For_vertex_instr',7,'p_for_vertex_instr','parser_rules.py',54),
  ('For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END','For_edge_instr',7,'p_for_edge_instr','parser_rules.py',59),
  ('Plot_instr -> PLOT OPAR graph_expression CPAR','Plot_instr',4,'p_plot_instr','parser_rules.py',65),
  ('Assign_instr -> ID ASSIGN graph_expression','Assign_instr',3,'p_assign_instr','parser_rules.py',71),
  ('Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR','Add_vertex_instr',5,'p_add_vertex_instr','parser_rules.py',77),
  ('K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR','K_color_plot_instr',4,'p_k_color_plot_instr','parser_rules.py',83),
  ('Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR','Weighted_plt_instr',4,'p_weighted_plot_instr','parser_rules.py',89),
  ('Add_edge_instr -> ID ADD OPAR edge_expression CPAR','Add_edge_instr',5,'p_add_edge_instr','parser_rules.py',94),
  ('Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR','Add_vertex_and_edge_instr',7,'p_add_vertex_and_edge_instr','parser_rules.py',99),
  ('graph_expression -> OPAR graph_expression CPAR','graph_expression',3,'p_graph_expression_grouping','parser_rules.py',105),
  ('graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR','graph_expression',6,'p_graph_expression','parser_rules.py',111),
  ('graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR','graph_expression',6,'p_graph_expression','parser_rules.py',112),
  ('graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR','graph_expression',8,'p_graph_expression','parser_rules.py',113),
  ('graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR','graph_expression',8,'p_graph_expression','parser_rules.py',114),
  ('graph_expression -> graph_expression UNION graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',115),
  ('graph_expression -> graph_expression INTERSECTION graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',116),
  ('graph_expression -> graph_expression DIFFERENCE graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',117),
  ('graph_expression -> graph_expression CONCAT graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',118),
  ('graph_expression -> COMPLEMENT OPAR graph_expression CPAR','graph_expression',4,'p_graph_expression','parser_rules.py',119),
  ('graph_expression -> ID','graph_expression',1,'p_graph_expression','parser_rules.py',120),
  ('vertex_expression -> vertex_expression INT','vertex_expression',2,'p_vertex_expression','parser_rules.py',138),
  ('vertex_expression -> INT','vertex_expression',1,'p_vertex_expression','parser_rules.py',139),
  ('edge_expression -> edge_expression OPAR INT COMMA INT CPAR','edge_expression',6,'p_edge_expression','parser_rules.py',147),
  ('edge_expression -> OPAR INT COMMA INT CPAR','edge_expression',5,'p_edge_expression','parser_rules.py',148),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',149),
  ('edge_expression -> OPAR INT COMMA INT COMMA INT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',150),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',151),
  ('edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',152),
  ('edge_expression -> empty','edge_expression',1,'p_edge_expression','parser_rules.py',153),
  ('logic_expression -> value_expression EQUAL value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',169),
  ('logic_expression -> value_expression GREATER value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',170),
  ('logic_expression -> value_expression LESS value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',171),
  ('logic_expression -> value_expression GREATEREQ value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',172),
  ('logic_expression -> value_expression LESSEQ value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',173),
  ('logic_expression -> value_expression NEQUAL value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',174),
  ('logic_expression -> logic_function','logic_expression',1,'p_logic_expression','parser_rules.py',175),
  ('value_expression -> algebraic_expression','value_expression',1,'p_value_expression','parser_rules.py',183),
  ('value_expression -> numeric_function','value_expression',1,'p_value_expression','parser_rules.py',184),
  ('algebraic_expression -> INT','algebraic_expression',1,'p_algebraic_expression_number','parser_rules.py',190),
  ('algebraic_expression -> FLOAT','algebraic_expression',1,'p_algebraic_expression_number','parser_rules.py',191),
  ('algebraic_expression -> OPAR algebraic_expression CPAR','algebraic_expression',3,'p_algebraic_expression_grouping','parser_rules.py',196),
  ('algebraic_expression -> numeric_function','algebraic_expression',1,'p_algebraic_expression_function','parser_rules.py',201),
  ('algebraic_expression -> algebraic_expression PLUS algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',207),
  ('algebraic_expression -> algebraic_expression MINUS algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',208),
  ('algebraic_expression -> algebraic_expression MUL algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',209),
  ('algebraic_expression -> algebraic_expression DIV algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',210),
  ('algebraic_expression -> MINUS algebraic_expression','algebraic_expression',2,'p_algebraic_expression','parser_rules.py',211),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',220),
  ('numeric_function -> graph_expression POINT NODES_COUNT','numeric_function',3,'p_numeric_functions','parser_rules.py',224),
  ('numeric_function -> graph_expression POINT EDGES_COUNT','numeric_function',3,'p_numeric_functions','parser_rules.py',225),
  ('numeric_function -> graph_expression POINT WEIGHT_SUM','numeric_function',3,'p_numeric_functions','parser_rules.py',226),
  ('logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression','logic_function',4,'p_logic_functions','parser_rules.py',232),
  ('logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression','logic_function',4,'p_logic_functions','parser_rules.py',233),
]
