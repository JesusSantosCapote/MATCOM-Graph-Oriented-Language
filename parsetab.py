
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftUNIONINTERSECTIONleftPLUSMINUSleftMULDIVrightUMINUSADD ASSIGN BEGIN CBR COMMA COMPLEMENT CONCAT CPAR DIFFERENCE DIGRAPH DIV EDGE ELIF ELSE END EQUAL FLOAT FOREDGE FORVERTEX GRAPH GREATER GREATEREQ ID IF IN INT INTERSECTION LESS LESSEQ MINUS MUL MULTIGRAPH NEQUAL NODES_COUNT OBR OPAR PLOT PLUS POINT PSEUDOGRAPH STRING UNIONInstructions    : Instructions InstructionInstructions    : Instruction Instruction      : Plot_instr\n                        | If_instr\n                        | If_else_instr\n                        | For_vertex_instr\n                        | Assign_instr\n                        | For_edge_instr\n                        | Add_vertex_instr\n                        | Add_edge_instr\n                        | Add_vertex_and_edge_instrIf_instr         : IF OPAR logic_expression CPAR BEGIN Instructions ENDIf_else_instr  : IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions ENDFor_vertex_instr   : FORVERTEX ID IN ID BEGIN Instructions ENDFor_edge_instr   : FOREDGE ID IN ID BEGIN Instructions ENDPlot_instr   : PLOT OPAR ID CPARAssign_instr     : ID ASSIGN graph_expressionAdd_vertex_instr      : ID ADD OPAR vertex_expression CPARAdd_edge_instr     : ID ADD OPAR edge_expression CPARAdd_vertex_and_edge_instr      : ID ADD OPAR vertex_expression COMMA edge_expression CPARgraph_expression   : GRAPH OPAR value_expression COMMA edge_expression CPAR\n                            | DIGRAPH OPAR value_expression COMMA edge_expression CPAR\n                            | GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR\n                            | DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR\n                            | graph_expression UNION graph_expression\n                            | graph_expression INTERSECTION graph_expression\n                            | graph_expression DIFFERENCE graph_expression\n                            | graph_expression CONCAT graph_expression\n                            | COMPLEMENT OPAR graph_expression CPAR\n                            | ID\n                            vertex_expression    : vertex_expression INT\n                            | INTedge_expression  : edge_expression OPAR INT COMMA INT CPAR\n                        | OPAR INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA INT CPAR\n                        | OPAR INT COMMA INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR \n                        | OPAR INT COMMA INT COMMA FLOAT CPAR\n                        | empty\n                        logic_expression     : value_expression EQUAL value_expression\n                            | value_expression GREATER value_expression\n                            | value_expression LESS value_expression\n                            | value_expression GREATEREQ value_expression\n                            | value_expression LESSEQ value_expression\n                            | value_expression NEQUAL value_expressionvalue_expression     : algebraic_expression\n                            | functionalgebraic_expression      : INT\n                                | FLOATalgebraic_expression       : functionalgebraic_expression     : algebraic_expression PLUS algebraic_expression\n                                | algebraic_expression MINUS algebraic_expression\n                                | algebraic_expression MUL algebraic_expression\n                                | algebraic_expression DIV algebraic_expression\n                                | MINUS algebraic_expression %prec UMINUS\n                                empty :function     : graph_expression POINT NODES_COUNT'
    
_lr_action_items = {'PLOT':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,41,70,71,72,73,80,84,85,97,98,103,107,108,109,115,117,118,119,120,122,134,135,136,141,144,],[12,12,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-30,-17,-16,-25,-26,-27,-28,-18,-19,12,12,12,-29,12,12,12,-20,-12,-14,-15,-21,-22,12,-23,-24,12,-13,]),'IF':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,41,70,71,72,73,80,84,85,97,98,103,107,108,109,115,117,118,119,120,122,134,135,136,141,144,],[14,14,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-30,-17,-16,-25,-26,-27,-28,-18,-19,14,14,14,-29,14,14,14,-20,-12,-14,-15,-21,-22,14,-23,-24,14,-13,]),'FORVERTEX':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,41,70,71,72,73,80,84,85,97,98,103,107,108,109,115,117,118,119,120,122,134,135,136,141,144,],[15,15,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-30,-17,-16,-25,-26,-27,-28,-18,-19,15,15,15,-29,15,15,15,-20,-12,-14,-15,-21,-22,15,-23,-24,15,-13,]),'ID':([0,1,2,3,4,5,6,7,8,9,10,11,15,16,17,18,19,21,25,26,37,39,40,41,42,43,44,45,46,47,48,55,56,57,58,59,60,61,62,63,64,70,71,72,73,80,84,85,97,98,103,107,108,109,115,117,118,119,120,122,134,135,136,141,144,],[13,13,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,22,23,-1,24,25,25,-30,-17,25,68,69,-16,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-25,-26,-27,-28,-18,-19,13,13,13,-29,13,13,13,-20,-12,-14,-15,-21,-22,13,-23,-24,13,-13,]),'FOREDGE':([0,1,2,3,4,5,6,7,8,9,10,11,17,25,26,41,70,71,72,73,80,84,85,97,98,103,107,108,109,115,117,118,119,120,122,134,135,136,141,144,],[16,16,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-30,-17,-16,-25,-26,-27,-28,-18,-19,16,16,16,-29,16,16,16,-20,-12,-14,-15,-21,-22,16,-23,-24,16,-13,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,17,25,26,41,70,71,72,73,80,84,103,115,117,118,119,120,122,135,136,144,],[0,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-30,-17,-16,-25,-26,-27,-28,-18,-19,-29,-20,-12,-14,-15,-21,-22,-23,-24,-13,]),'END':([2,3,4,5,6,7,8,9,10,11,17,25,26,41,70,71,72,73,80,84,103,107,108,109,115,117,118,119,120,122,135,136,141,144,],[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,-30,-17,-16,-25,-26,-27,-28,-18,-19,-29,117,118,119,-20,-12,-14,-15,-21,-22,-23,-24,144,-13,]),'OPAR':([12,14,20,27,28,29,30,51,53,81,99,101,105,110,112,121,123,125,128,129,133,137,138,142,143,],[18,21,30,46,47,48,49,83,-39,49,49,49,83,83,83,49,49,-34,83,83,-33,-36,-38,-35,-37,]),'ASSIGN':([13,],[19,]),'ADD':([13,],[20,]),'GRAPH':([19,21,37,42,43,44,45,46,47,48,55,56,57,58,59,60,61,62,63,64,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'DIGRAPH':([19,21,37,42,43,44,45,46,47,48,55,56,57,58,59,60,61,62,63,64,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'COMPLEMENT':([19,21,37,42,43,44,45,46,47,48,55,56,57,58,59,60,61,62,63,64,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'INT':([21,30,37,46,47,49,50,52,55,56,57,58,59,60,61,62,63,64,75,77,82,83,100,102,104,116,124,132,],[35,52,35,35,35,79,82,-32,35,35,35,35,35,35,35,35,35,35,52,52,-31,106,82,82,114,126,130,139,]),'FLOAT':([21,37,46,47,55,56,57,58,59,60,61,62,63,64,124,132,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,131,140,]),'MINUS':([21,33,34,35,36,37,46,47,55,56,57,58,59,60,61,62,63,64,65,66,92,93,94,95,96,],[37,62,-50,-48,-49,37,37,37,37,37,37,37,37,37,37,37,37,37,-55,-50,-51,-52,-53,-54,-57,]),'IN':([22,23,],[39,40,]),'CPAR':([24,25,30,31,33,34,35,36,50,51,52,53,65,66,70,71,72,73,78,81,82,86,87,88,89,90,91,92,93,94,95,96,99,101,103,105,110,112,114,120,121,122,123,125,126,128,129,130,131,133,135,136,137,138,139,140,142,143,],[41,-30,-56,54,-46,-47,-48,-49,80,84,-32,-39,-55,-50,-25,-26,-27,-28,103,-56,-31,-40,-41,-42,-43,-44,-45,-51,-52,-53,-54,-57,-56,-56,-29,115,120,122,125,-21,-56,-22,-56,-34,133,135,136,137,138,-33,-23,-24,-36,-38,142,143,-35,-37,]),'UNION':([25,26,38,70,71,72,73,78,103,120,122,135,136,],[-30,42,42,-25,-26,42,42,42,-29,-21,-22,-23,-24,]),'INTERSECTION':([25,26,38,70,71,72,73,78,103,120,122,135,136,],[-30,43,43,-25,-26,43,43,43,-29,-21,-22,-23,-24,]),'DIFFERENCE':([25,26,38,70,71,72,73,78,103,120,122,135,136,],[-30,44,44,-25,-26,44,44,44,-29,-21,-22,-23,-24,]),'CONCAT':([25,26,38,70,71,72,73,78,103,120,122,135,136,],[-30,45,45,-25,-26,45,45,45,-29,-21,-22,-23,-24,]),'POINT':([25,38,70,71,72,73,103,120,122,135,136,],[-30,67,-25,-26,-27,-28,-29,-21,-22,-23,-24,]),'EQUAL':([32,33,34,35,36,65,66,92,93,94,95,96,],[55,-46,-47,-48,-49,-55,-50,-51,-52,-53,-54,-57,]),'GREATER':([32,33,34,35,36,65,66,92,93,94,95,96,],[56,-46,-47,-48,-49,-55,-50,-51,-52,-53,-54,-57,]),'LESS':([32,33,34,35,36,65,66,92,93,94,95,96,],[57,-46,-47,-48,-49,-55,-50,-51,-52,-53,-54,-57,]),'GREATEREQ':([32,33,34,35,36,65,66,92,93,94,95,96,],[58,-46,-47,-48,-49,-55,-50,-51,-52,-53,-54,-57,]),'LESSEQ':([32,33,34,35,36,65,66,92,93,94,95,96,],[59,-46,-47,-48,-49,-55,-50,-51,-52,-53,-54,-57,]),'NEQUAL':([32,33,34,35,36,65,66,92,93,94,95,96,],[60,-46,-47,-48,-49,-55,-50,-51,-52,-53,-54,-57,]),'COMMA':([33,34,35,36,50,52,65,66,74,76,79,82,92,93,94,95,96,106,111,113,114,126,],[-46,-47,-48,-49,81,-32,-55,-50,99,101,104,-31,-51,-52,-53,-54,-57,116,121,123,124,132,]),'PLUS':([33,34,35,36,65,66,92,93,94,95,96,],[61,-50,-48,-49,-55,-50,-51,-52,-53,-54,-57,]),'MUL':([33,34,35,36,65,66,92,93,94,95,96,],[63,-50,-48,-49,-55,-50,63,63,-53,-54,-57,]),'DIV':([33,34,35,36,65,66,92,93,94,95,96,],[64,-50,-48,-49,-55,-50,64,64,-53,-54,-57,]),'OBR':([46,47,],[75,77,]),'CBR':([52,82,100,102,],[-32,-31,111,113,]),'BEGIN':([54,68,69,127,],[85,97,98,134,]),'NODES_COUNT':([67,],[96,]),'ELSE':([117,],[127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Instructions':([0,85,97,98,134,],[1,107,108,109,141,]),'Instruction':([0,1,85,97,98,107,108,109,134,141,],[2,17,2,2,2,17,17,17,2,17,]),'Plot_instr':([0,1,85,97,98,107,108,109,134,141,],[3,3,3,3,3,3,3,3,3,3,]),'If_instr':([0,1,85,97,98,107,108,109,134,141,],[4,4,4,4,4,4,4,4,4,4,]),'If_else_instr':([0,1,85,97,98,107,108,109,134,141,],[5,5,5,5,5,5,5,5,5,5,]),'For_vertex_instr':([0,1,85,97,98,107,108,109,134,141,],[6,6,6,6,6,6,6,6,6,6,]),'Assign_instr':([0,1,85,97,98,107,108,109,134,141,],[7,7,7,7,7,7,7,7,7,7,]),'For_edge_instr':([0,1,85,97,98,107,108,109,134,141,],[8,8,8,8,8,8,8,8,8,8,]),'Add_vertex_instr':([0,1,85,97,98,107,108,109,134,141,],[9,9,9,9,9,9,9,9,9,9,]),'Add_edge_instr':([0,1,85,97,98,107,108,109,134,141,],[10,10,10,10,10,10,10,10,10,10,]),'Add_vertex_and_edge_instr':([0,1,85,97,98,107,108,109,134,141,],[11,11,11,11,11,11,11,11,11,11,]),'graph_expression':([19,21,37,42,43,44,45,46,47,48,55,56,57,58,59,60,61,62,63,64,],[26,38,38,70,71,72,73,38,38,78,38,38,38,38,38,38,38,38,38,38,]),'logic_expression':([21,],[31,]),'value_expression':([21,46,47,55,56,57,58,59,60,],[32,74,76,86,87,88,89,90,91,]),'algebraic_expression':([21,37,46,47,55,56,57,58,59,60,61,62,63,64,],[33,65,33,33,33,33,33,33,33,33,92,93,94,95,]),'function':([21,37,46,47,55,56,57,58,59,60,61,62,63,64,],[34,66,34,34,34,34,34,34,34,34,66,66,66,66,]),'vertex_expression':([30,75,77,],[50,100,102,]),'edge_expression':([30,81,99,101,121,123,],[51,105,110,112,128,129,]),'empty':([30,81,99,101,121,123,],[53,53,53,53,53,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Instructions","S'",1,None,None,None),
  ('Instructions -> Instructions Instruction','Instructions',2,'p_instructions_list','parser_rules.py',16),
  ('Instructions -> Instruction','Instructions',1,'p_instructions_instruction','parser_rules.py',22),
  ('Instruction -> Plot_instr','Instruction',1,'p_instruction','parser_rules.py',27),
  ('Instruction -> If_instr','Instruction',1,'p_instruction','parser_rules.py',28),
  ('Instruction -> If_else_instr','Instruction',1,'p_instruction','parser_rules.py',29),
  ('Instruction -> For_vertex_instr','Instruction',1,'p_instruction','parser_rules.py',30),
  ('Instruction -> Assign_instr','Instruction',1,'p_instruction','parser_rules.py',31),
  ('Instruction -> For_edge_instr','Instruction',1,'p_instruction','parser_rules.py',32),
  ('Instruction -> Add_vertex_instr','Instruction',1,'p_instruction','parser_rules.py',33),
  ('Instruction -> Add_edge_instr','Instruction',1,'p_instruction','parser_rules.py',34),
  ('Instruction -> Add_vertex_and_edge_instr','Instruction',1,'p_instruction','parser_rules.py',35),
  ('If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END','If_instr',7,'p_if_instr','parser_rules.py',41),
  ('If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END','If_else_instr',11,'p_if_else_instr','parser_rules.py',46),
  ('For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END','For_vertex_instr',7,'p_for_vertex_instr','parser_rules.py',51),
  ('For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END','For_edge_instr',7,'p_for_edge_instr','parser_rules.py',56),
  ('Plot_instr -> PLOT OPAR ID CPAR','Plot_instr',4,'p_Plot_instr','parser_rules.py',62),
  ('Assign_instr -> ID ASSIGN graph_expression','Assign_instr',3,'p_assign_instr','parser_rules.py',68),
  ('Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR','Add_vertex_instr',5,'p_add_vertex_instr','parser_rules.py',74),
  ('Add_edge_instr -> ID ADD OPAR edge_expression CPAR','Add_edge_instr',5,'p_add_edge_instr','parser_rules.py',80),
  ('Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR','Add_vertex_and_edge_instr',7,'p_add_vertex_and_edge_instr','parser_rules.py',85),
  ('graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR','graph_expression',6,'p_graph_expression','parser_rules.py',90),
  ('graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR','graph_expression',6,'p_graph_expression','parser_rules.py',91),
  ('graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR','graph_expression',8,'p_graph_expression','parser_rules.py',92),
  ('graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR','graph_expression',8,'p_graph_expression','parser_rules.py',93),
  ('graph_expression -> graph_expression UNION graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',94),
  ('graph_expression -> graph_expression INTERSECTION graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',95),
  ('graph_expression -> graph_expression DIFFERENCE graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',96),
  ('graph_expression -> graph_expression CONCAT graph_expression','graph_expression',3,'p_graph_expression','parser_rules.py',97),
  ('graph_expression -> COMPLEMENT OPAR graph_expression CPAR','graph_expression',4,'p_graph_expression','parser_rules.py',98),
  ('graph_expression -> ID','graph_expression',1,'p_graph_expression','parser_rules.py',99),
  ('vertex_expression -> vertex_expression INT','vertex_expression',2,'p_vertex_expression','parser_rules.py',117),
  ('vertex_expression -> INT','vertex_expression',1,'p_vertex_expression','parser_rules.py',118),
  ('edge_expression -> edge_expression OPAR INT COMMA INT CPAR','edge_expression',6,'p_edge_expression','parser_rules.py',126),
  ('edge_expression -> OPAR INT COMMA INT CPAR','edge_expression',5,'p_edge_expression','parser_rules.py',127),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',128),
  ('edge_expression -> OPAR INT COMMA INT COMMA INT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',129),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',130),
  ('edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',131),
  ('edge_expression -> empty','edge_expression',1,'p_edge_expression','parser_rules.py',132),
  ('logic_expression -> value_expression EQUAL value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',148),
  ('logic_expression -> value_expression GREATER value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',149),
  ('logic_expression -> value_expression LESS value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',150),
  ('logic_expression -> value_expression GREATEREQ value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',151),
  ('logic_expression -> value_expression LESSEQ value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',152),
  ('logic_expression -> value_expression NEQUAL value_expression','logic_expression',3,'p_logic_expression','parser_rules.py',153),
  ('value_expression -> algebraic_expression','value_expression',1,'p_value_expression','parser_rules.py',158),
  ('value_expression -> function','value_expression',1,'p_value_expression','parser_rules.py',159),
  ('algebraic_expression -> INT','algebraic_expression',1,'p_algebraic_expression_number','parser_rules.py',165),
  ('algebraic_expression -> FLOAT','algebraic_expression',1,'p_algebraic_expression_number','parser_rules.py',166),
  ('algebraic_expression -> function','algebraic_expression',1,'p_algebraic_expression_function','parser_rules.py',171),
  ('algebraic_expression -> algebraic_expression PLUS algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',177),
  ('algebraic_expression -> algebraic_expression MINUS algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',178),
  ('algebraic_expression -> algebraic_expression MUL algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',179),
  ('algebraic_expression -> algebraic_expression DIV algebraic_expression','algebraic_expression',3,'p_algebraic_expression','parser_rules.py',180),
  ('algebraic_expression -> MINUS algebraic_expression','algebraic_expression',2,'p_algebraic_expression','parser_rules.py',181),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',190),
  ('function -> graph_expression POINT NODES_COUNT','function',3,'p_function_nodes_count','parser_rules.py',194),
]
