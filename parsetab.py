
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULDIVASSIGN COMMA CPAR DIGRAPH DIV EDGE ELIF ELSE EQUAL FLOAT FOREDGE FORVERTEX GRAPH GREATER GREATEREQ ID IF INT LESS LESSEQ MINUS MUL MULTIGRAPH NEQUAL OPAR PLOT PLUS PSEUDOGRAPH STRINGInstructions    : Instructions InstructionInstructions    : Instruction Instruction      : Plot_instr\n                        | Assign_instrPlot_instr    : PLOT OPAR ID CPARAssign_instr     : ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR  \n                        | ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR\n                        | ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR\n                        | ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR                     \n                    edge_expression  : edge_expression OPAR INT COMMA INT CPAR\n                        | OPAR INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA INT CPAR\n                        | OPAR INT COMMA INT COMMA INT CPAR\n                        | edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR \n                        | OPAR INT COMMA INT COMMA FLOAT CPAR\n                        '
    
_lr_action_items = {'PLOT':([0,1,2,3,4,7,15,35,36,37,38,],[5,5,-2,-3,-4,-1,-5,-6,-7,-8,-9,]),'ID':([0,1,2,3,4,7,8,15,35,36,37,38,],[6,6,-2,-3,-4,-1,10,-5,-6,-7,-8,-9,]),'$end':([1,2,3,4,7,15,35,36,37,38,],[0,-2,-3,-4,-1,-5,-6,-7,-8,-9,]),'OPAR':([5,11,12,13,14,24,25,26,27,29,30,31,32,44,49,50,51,54,55,],[8,16,17,18,19,28,28,28,28,34,34,34,34,-11,-10,-13,-15,-12,-14,]),'ASSIGN':([6,],[9,]),'GRAPH':([9,],[11,]),'DIGRAPH':([9,],[12,]),'MULTIGRAPH':([9,],[13,]),'PSEUDOGRAPH':([9,],[14,]),'CPAR':([10,29,30,31,32,41,44,45,46,47,49,50,51,52,53,54,55,],[15,35,36,37,38,44,-11,49,50,51,-10,-13,-15,54,55,-12,-14,]),'INT':([16,17,18,19,28,34,39,42,43,48,],[20,21,22,23,33,40,41,45,46,52,]),'COMMA':([20,21,22,23,33,40,41,45,],[24,25,26,27,39,42,43,48,]),'FLOAT':([43,48,],[47,53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Instructions':([0,],[1,]),'Instruction':([0,1,],[2,7,]),'Plot_instr':([0,1,],[3,3,]),'Assign_instr':([0,1,],[4,4,]),'edge_expression':([24,25,26,27,],[29,30,31,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Instructions","S'",1,None,None,None),
  ('Instructions -> Instructions Instruction','Instructions',2,'p_instructions_list','parser_rules.py',11),
  ('Instructions -> Instruction','Instructions',1,'p_instructions_instruction','parser_rules.py',17),
  ('Instruction -> Plot_instr','Instruction',1,'p_instruction','parser_rules.py',22),
  ('Instruction -> Assign_instr','Instruction',1,'p_instruction','parser_rules.py',23),
  ('Plot_instr -> PLOT OPAR ID CPAR','Plot_instr',4,'p_Plot_instr','parser_rules.py',28),
  ('Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR','Assign_instr',8,'p_assign_instr','parser_rules.py',33),
  ('Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR','Assign_instr',8,'p_assign_instr','parser_rules.py',34),
  ('Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR','Assign_instr',8,'p_assign_instr','parser_rules.py',35),
  ('Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR','Assign_instr',8,'p_assign_instr','parser_rules.py',36),
  ('edge_expression -> edge_expression OPAR INT COMMA INT CPAR','edge_expression',6,'p_edge_expression','parser_rules.py',41),
  ('edge_expression -> OPAR INT COMMA INT CPAR','edge_expression',5,'p_edge_expression','parser_rules.py',42),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',43),
  ('edge_expression -> OPAR INT COMMA INT COMMA INT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',44),
  ('edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',8,'p_edge_expression','parser_rules.py',45),
  ('edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR','edge_expression',7,'p_edge_expression','parser_rules.py',46),
]
