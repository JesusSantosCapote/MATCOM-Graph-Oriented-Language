Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMPLEMENT
    EDGE
    ELIF
    MULTIGRAPH
    PSEUDOGRAPH
    STRING

Grammar

Rule 0     S' -> Instructions
Rule 1     Instructions -> Instructions Instruction
Rule 2     Instructions -> Instruction
Rule 3     Instruction -> Plot_instr
Rule 4     Instruction -> If_instr
Rule 5     Instruction -> If_else_instr
Rule 6     Instruction -> For_vertex_instr
Rule 7     Instruction -> Assign_instr
Rule 8     Instruction -> For_edge_instr
Rule 9     Instruction -> Add_vertex_instr
Rule 10    Instruction -> Add_edge_instr
Rule 11    Instruction -> Add_vertex_and_edge_instr
Rule 12    If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END
Rule 13    If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
Rule 14    For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END
Rule 15    For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END
Rule 16    Plot_instr -> PLOT OPAR ID CPAR
Rule 17    Assign_instr -> ID ASSIGN graph_expression
Rule 18    Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR
Rule 19    Add_edge_instr -> ID ADD OPAR edge_expression CPAR
Rule 20    Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR
Rule 21    graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 22    graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 23    graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 24    graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 25    graph_expression -> graph_expression UNION graph_expression
Rule 26    graph_expression -> graph_expression INTERSECTION graph_expression
Rule 27    graph_expression -> graph_expression DIFFERENCE graph_expression
Rule 28    graph_expression -> ID
Rule 29    vertex_expression -> vertex_expression INT
Rule 30    vertex_expression -> INT
Rule 31    edge_expression -> edge_expression OPAR INT COMMA INT CPAR
Rule 32    edge_expression -> OPAR INT COMMA INT CPAR
Rule 33    edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR
Rule 34    edge_expression -> OPAR INT COMMA INT COMMA INT CPAR
Rule 35    edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 36    edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 37    edge_expression -> empty
Rule 38    logic_expression -> value_expression EQUAL value_expression
Rule 39    logic_expression -> value_expression GREATER value_expression
Rule 40    logic_expression -> value_expression LESS value_expression
Rule 41    logic_expression -> value_expression GREATEREQ value_expression
Rule 42    logic_expression -> value_expression LESSEQ value_expression
Rule 43    logic_expression -> value_expression NEQUAL value_expression
Rule 44    value_expression -> algebraic_expression
Rule 45    value_expression -> function
Rule 46    algebraic_expression -> INT
Rule 47    algebraic_expression -> FLOAT
Rule 48    algebraic_expression -> algebraic_expression PLUS algebraic_expression
Rule 49    algebraic_expression -> algebraic_expression MINUS algebraic_expression
Rule 50    algebraic_expression -> algebraic_expression MUL algebraic_expression
Rule 51    algebraic_expression -> algebraic_expression DIV algebraic_expression
Rule 52    algebraic_expression -> MINUS algebraic_expression
Rule 53    empty -> <empty>
Rule 54    function -> graph_expression POINT NODES_COUNT

Terminals, with rules where they appear

ADD                  : 18 19 20
ASSIGN               : 17
BEGIN                : 12 13 13 14 15
CBR                  : 23 24
COMMA                : 20 21 22 23 24 31 32 33 33 34 34 35 35 36 36
COMPLEMENT           : 
CPAR                 : 12 13 16 18 19 20 21 22 23 24 31 32 33 34 35 36
DIFFERENCE           : 27
DIGRAPH              : 22 24
DIV                  : 51
EDGE                 : 
ELIF                 : 
ELSE                 : 13
END                  : 12 13 13 14 15
EQUAL                : 38
FLOAT                : 35 36 47
FOREDGE              : 15
FORVERTEX            : 14
GRAPH                : 21 23
GREATER              : 39
GREATEREQ            : 41
ID                   : 14 14 15 15 16 17 18 19 20 28
IF                   : 12 13
IN                   : 14 15
INT                  : 29 30 31 31 32 32 33 33 33 34 34 34 35 35 36 36 46
INTERSECTION         : 26
LESS                 : 40
LESSEQ               : 42
MINUS                : 49 52
MUL                  : 50
MULTIGRAPH           : 
NEQUAL               : 43
NODES_COUNT          : 54
OBR                  : 23 24
OPAR                 : 12 13 16 18 19 20 21 22 23 24 31 32 33 34 35 36
PLOT                 : 16
PLUS                 : 48
POINT                : 54
PSEUDOGRAPH          : 
STRING               : 
UNION                : 25
error                : 

Nonterminals, with rules where they appear

Add_edge_instr       : 10
Add_vertex_and_edge_instr : 11
Add_vertex_instr     : 9
Assign_instr         : 7
For_edge_instr       : 8
For_vertex_instr     : 6
If_else_instr        : 5
If_instr             : 4
Instruction          : 1 2
Instructions         : 1 12 13 13 14 15 0
Plot_instr           : 3
algebraic_expression : 44 48 48 49 49 50 50 51 51 52
edge_expression      : 19 20 21 22 23 24 31 33 35
empty                : 37
function             : 45
graph_expression     : 17 25 25 26 26 27 27 54
logic_expression     : 12 13
value_expression     : 21 22 38 38 39 39 40 40 41 41 42 42 43 43
vertex_expression    : 18 20 23 24 29

Parsing method: LALR

state 0

    (0) S' -> . Instructions
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 1
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 1

    (0) S' -> Instructions .
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 2

    (2) Instructions -> Instruction .

    PLOT            reduce using rule 2 (Instructions -> Instruction .)
    IF              reduce using rule 2 (Instructions -> Instruction .)
    FORVERTEX       reduce using rule 2 (Instructions -> Instruction .)
    ID              reduce using rule 2 (Instructions -> Instruction .)
    FOREDGE         reduce using rule 2 (Instructions -> Instruction .)
    $end            reduce using rule 2 (Instructions -> Instruction .)
    END             reduce using rule 2 (Instructions -> Instruction .)


state 3

    (3) Instruction -> Plot_instr .

    PLOT            reduce using rule 3 (Instruction -> Plot_instr .)
    IF              reduce using rule 3 (Instruction -> Plot_instr .)
    FORVERTEX       reduce using rule 3 (Instruction -> Plot_instr .)
    ID              reduce using rule 3 (Instruction -> Plot_instr .)
    FOREDGE         reduce using rule 3 (Instruction -> Plot_instr .)
    $end            reduce using rule 3 (Instruction -> Plot_instr .)
    END             reduce using rule 3 (Instruction -> Plot_instr .)


state 4

    (4) Instruction -> If_instr .

    PLOT            reduce using rule 4 (Instruction -> If_instr .)
    IF              reduce using rule 4 (Instruction -> If_instr .)
    FORVERTEX       reduce using rule 4 (Instruction -> If_instr .)
    ID              reduce using rule 4 (Instruction -> If_instr .)
    FOREDGE         reduce using rule 4 (Instruction -> If_instr .)
    $end            reduce using rule 4 (Instruction -> If_instr .)
    END             reduce using rule 4 (Instruction -> If_instr .)


state 5

    (5) Instruction -> If_else_instr .

    PLOT            reduce using rule 5 (Instruction -> If_else_instr .)
    IF              reduce using rule 5 (Instruction -> If_else_instr .)
    FORVERTEX       reduce using rule 5 (Instruction -> If_else_instr .)
    ID              reduce using rule 5 (Instruction -> If_else_instr .)
    FOREDGE         reduce using rule 5 (Instruction -> If_else_instr .)
    $end            reduce using rule 5 (Instruction -> If_else_instr .)
    END             reduce using rule 5 (Instruction -> If_else_instr .)


state 6

    (6) Instruction -> For_vertex_instr .

    PLOT            reduce using rule 6 (Instruction -> For_vertex_instr .)
    IF              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FORVERTEX       reduce using rule 6 (Instruction -> For_vertex_instr .)
    ID              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FOREDGE         reduce using rule 6 (Instruction -> For_vertex_instr .)
    $end            reduce using rule 6 (Instruction -> For_vertex_instr .)
    END             reduce using rule 6 (Instruction -> For_vertex_instr .)


state 7

    (7) Instruction -> Assign_instr .

    PLOT            reduce using rule 7 (Instruction -> Assign_instr .)
    IF              reduce using rule 7 (Instruction -> Assign_instr .)
    FORVERTEX       reduce using rule 7 (Instruction -> Assign_instr .)
    ID              reduce using rule 7 (Instruction -> Assign_instr .)
    FOREDGE         reduce using rule 7 (Instruction -> Assign_instr .)
    $end            reduce using rule 7 (Instruction -> Assign_instr .)
    END             reduce using rule 7 (Instruction -> Assign_instr .)


state 8

    (8) Instruction -> For_edge_instr .

    PLOT            reduce using rule 8 (Instruction -> For_edge_instr .)
    IF              reduce using rule 8 (Instruction -> For_edge_instr .)
    FORVERTEX       reduce using rule 8 (Instruction -> For_edge_instr .)
    ID              reduce using rule 8 (Instruction -> For_edge_instr .)
    FOREDGE         reduce using rule 8 (Instruction -> For_edge_instr .)
    $end            reduce using rule 8 (Instruction -> For_edge_instr .)
    END             reduce using rule 8 (Instruction -> For_edge_instr .)


state 9

    (9) Instruction -> Add_vertex_instr .

    PLOT            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    IF              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FORVERTEX       reduce using rule 9 (Instruction -> Add_vertex_instr .)
    ID              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FOREDGE         reduce using rule 9 (Instruction -> Add_vertex_instr .)
    $end            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    END             reduce using rule 9 (Instruction -> Add_vertex_instr .)


state 10

    (10) Instruction -> Add_edge_instr .

    PLOT            reduce using rule 10 (Instruction -> Add_edge_instr .)
    IF              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FORVERTEX       reduce using rule 10 (Instruction -> Add_edge_instr .)
    ID              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FOREDGE         reduce using rule 10 (Instruction -> Add_edge_instr .)
    $end            reduce using rule 10 (Instruction -> Add_edge_instr .)
    END             reduce using rule 10 (Instruction -> Add_edge_instr .)


state 11

    (11) Instruction -> Add_vertex_and_edge_instr .

    PLOT            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    IF              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FORVERTEX       reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    ID              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FOREDGE         reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    $end            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    END             reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)


state 12

    (16) Plot_instr -> PLOT . OPAR ID CPAR

    OPAR            shift and go to state 18


state 13

    (17) Assign_instr -> ID . ASSIGN graph_expression
    (18) Add_vertex_instr -> ID . ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> ID . ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> ID . ADD OPAR vertex_expression COMMA edge_expression CPAR

    ASSIGN          shift and go to state 19
    ADD             shift and go to state 20


state 14

    (12) If_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    OPAR            shift and go to state 21


state 15

    (14) For_vertex_instr -> FORVERTEX . ID IN ID BEGIN Instructions END

    ID              shift and go to state 22


state 16

    (15) For_edge_instr -> FOREDGE . ID IN ID BEGIN Instructions END

    ID              shift and go to state 23


state 17

    (1) Instructions -> Instructions Instruction .

    PLOT            reduce using rule 1 (Instructions -> Instructions Instruction .)
    IF              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FORVERTEX       reduce using rule 1 (Instructions -> Instructions Instruction .)
    ID              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FOREDGE         reduce using rule 1 (Instructions -> Instructions Instruction .)
    $end            reduce using rule 1 (Instructions -> Instructions Instruction .)
    END             reduce using rule 1 (Instructions -> Instructions Instruction .)


state 18

    (16) Plot_instr -> PLOT OPAR . ID CPAR

    ID              shift and go to state 24


state 19

    (17) Assign_instr -> ID ASSIGN . graph_expression
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    graph_expression               shift and go to state 26

state 20

    (18) Add_vertex_instr -> ID ADD . OPAR vertex_expression CPAR
    (19) Add_edge_instr -> ID ADD . OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> ID ADD . OPAR vertex_expression COMMA edge_expression CPAR

    OPAR            shift and go to state 29


state 21

    (12) If_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (38) logic_expression -> . value_expression EQUAL value_expression
    (39) logic_expression -> . value_expression GREATER value_expression
    (40) logic_expression -> . value_expression LESS value_expression
    (41) logic_expression -> . value_expression GREATEREQ value_expression
    (42) logic_expression -> . value_expression LESSEQ value_expression
    (43) logic_expression -> . value_expression NEQUAL value_expression
    (44) value_expression -> . algebraic_expression
    (45) value_expression -> . function
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression
    (54) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    logic_expression               shift and go to state 30
    value_expression               shift and go to state 31
    algebraic_expression           shift and go to state 32
    function                       shift and go to state 33
    graph_expression               shift and go to state 37

state 22

    (14) For_vertex_instr -> FORVERTEX ID . IN ID BEGIN Instructions END

    IN              shift and go to state 38


state 23

    (15) For_edge_instr -> FOREDGE ID . IN ID BEGIN Instructions END

    IN              shift and go to state 39


state 24

    (16) Plot_instr -> PLOT OPAR ID . CPAR

    CPAR            shift and go to state 40


state 25

    (28) graph_expression -> ID .

    UNION           reduce using rule 28 (graph_expression -> ID .)
    INTERSECTION    reduce using rule 28 (graph_expression -> ID .)
    DIFFERENCE      reduce using rule 28 (graph_expression -> ID .)
    PLOT            reduce using rule 28 (graph_expression -> ID .)
    IF              reduce using rule 28 (graph_expression -> ID .)
    FORVERTEX       reduce using rule 28 (graph_expression -> ID .)
    ID              reduce using rule 28 (graph_expression -> ID .)
    FOREDGE         reduce using rule 28 (graph_expression -> ID .)
    $end            reduce using rule 28 (graph_expression -> ID .)
    END             reduce using rule 28 (graph_expression -> ID .)
    POINT           reduce using rule 28 (graph_expression -> ID .)


state 26

    (17) Assign_instr -> ID ASSIGN graph_expression .
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression

    PLOT            reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    IF              reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    FORVERTEX       reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    ID              reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    FOREDGE         reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    $end            reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    END             reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    UNION           shift and go to state 41
    INTERSECTION    shift and go to state 42
    DIFFERENCE      shift and go to state 43


state 27

    (21) graph_expression -> GRAPH . OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> GRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 44


state 28

    (22) graph_expression -> DIGRAPH . OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> DIGRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 45


state 29

    (18) Add_vertex_instr -> ID ADD OPAR . vertex_expression CPAR
    (19) Add_edge_instr -> ID ADD OPAR . edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> ID ADD OPAR . vertex_expression COMMA edge_expression CPAR
    (29) vertex_expression -> . vertex_expression INT
    (30) vertex_expression -> . INT
    (31) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (32) edge_expression -> . OPAR INT COMMA INT CPAR
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (37) edge_expression -> . empty
    (53) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    INT             shift and go to state 49
    OPAR            shift and go to state 46
    CPAR            reduce using rule 53 (empty -> .)

  ! OPAR            [ reduce using rule 53 (empty -> .) ]

    vertex_expression              shift and go to state 47
    edge_expression                shift and go to state 48
    empty                          shift and go to state 50

state 30

    (12) If_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END
    (13) If_else_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    CPAR            shift and go to state 51


state 31

    (38) logic_expression -> value_expression . EQUAL value_expression
    (39) logic_expression -> value_expression . GREATER value_expression
    (40) logic_expression -> value_expression . LESS value_expression
    (41) logic_expression -> value_expression . GREATEREQ value_expression
    (42) logic_expression -> value_expression . LESSEQ value_expression
    (43) logic_expression -> value_expression . NEQUAL value_expression

    EQUAL           shift and go to state 52
    GREATER         shift and go to state 53
    LESS            shift and go to state 54
    GREATEREQ       shift and go to state 55
    LESSEQ          shift and go to state 56
    NEQUAL          shift and go to state 57


state 32

    (44) value_expression -> algebraic_expression .
    (48) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (49) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (50) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (51) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    EQUAL           reduce using rule 44 (value_expression -> algebraic_expression .)
    GREATER         reduce using rule 44 (value_expression -> algebraic_expression .)
    LESS            reduce using rule 44 (value_expression -> algebraic_expression .)
    GREATEREQ       reduce using rule 44 (value_expression -> algebraic_expression .)
    LESSEQ          reduce using rule 44 (value_expression -> algebraic_expression .)
    NEQUAL          reduce using rule 44 (value_expression -> algebraic_expression .)
    COMMA           reduce using rule 44 (value_expression -> algebraic_expression .)
    CPAR            reduce using rule 44 (value_expression -> algebraic_expression .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    MUL             shift and go to state 60
    DIV             shift and go to state 61


state 33

    (45) value_expression -> function .

    EQUAL           reduce using rule 45 (value_expression -> function .)
    GREATER         reduce using rule 45 (value_expression -> function .)
    LESS            reduce using rule 45 (value_expression -> function .)
    GREATEREQ       reduce using rule 45 (value_expression -> function .)
    LESSEQ          reduce using rule 45 (value_expression -> function .)
    NEQUAL          reduce using rule 45 (value_expression -> function .)
    COMMA           reduce using rule 45 (value_expression -> function .)
    CPAR            reduce using rule 45 (value_expression -> function .)


state 34

    (46) algebraic_expression -> INT .

    PLUS            reduce using rule 46 (algebraic_expression -> INT .)
    MINUS           reduce using rule 46 (algebraic_expression -> INT .)
    MUL             reduce using rule 46 (algebraic_expression -> INT .)
    DIV             reduce using rule 46 (algebraic_expression -> INT .)
    EQUAL           reduce using rule 46 (algebraic_expression -> INT .)
    GREATER         reduce using rule 46 (algebraic_expression -> INT .)
    LESS            reduce using rule 46 (algebraic_expression -> INT .)
    GREATEREQ       reduce using rule 46 (algebraic_expression -> INT .)
    LESSEQ          reduce using rule 46 (algebraic_expression -> INT .)
    NEQUAL          reduce using rule 46 (algebraic_expression -> INT .)
    COMMA           reduce using rule 46 (algebraic_expression -> INT .)
    CPAR            reduce using rule 46 (algebraic_expression -> INT .)


state 35

    (47) algebraic_expression -> FLOAT .

    PLUS            reduce using rule 47 (algebraic_expression -> FLOAT .)
    MINUS           reduce using rule 47 (algebraic_expression -> FLOAT .)
    MUL             reduce using rule 47 (algebraic_expression -> FLOAT .)
    DIV             reduce using rule 47 (algebraic_expression -> FLOAT .)
    EQUAL           reduce using rule 47 (algebraic_expression -> FLOAT .)
    GREATER         reduce using rule 47 (algebraic_expression -> FLOAT .)
    LESS            reduce using rule 47 (algebraic_expression -> FLOAT .)
    GREATEREQ       reduce using rule 47 (algebraic_expression -> FLOAT .)
    LESSEQ          reduce using rule 47 (algebraic_expression -> FLOAT .)
    NEQUAL          reduce using rule 47 (algebraic_expression -> FLOAT .)
    COMMA           reduce using rule 47 (algebraic_expression -> FLOAT .)
    CPAR            reduce using rule 47 (algebraic_expression -> FLOAT .)


state 36

    (52) algebraic_expression -> MINUS . algebraic_expression
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36

    algebraic_expression           shift and go to state 62

state 37

    (54) function -> graph_expression . POINT NODES_COUNT
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression

    POINT           shift and go to state 63
    UNION           shift and go to state 41
    INTERSECTION    shift and go to state 42
    DIFFERENCE      shift and go to state 43


state 38

    (14) For_vertex_instr -> FORVERTEX ID IN . ID BEGIN Instructions END

    ID              shift and go to state 64


state 39

    (15) For_edge_instr -> FOREDGE ID IN . ID BEGIN Instructions END

    ID              shift and go to state 65


state 40

    (16) Plot_instr -> PLOT OPAR ID CPAR .

    PLOT            reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    IF              reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    FORVERTEX       reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    ID              reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    FOREDGE         reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    $end            reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    END             reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)


state 41

    (25) graph_expression -> graph_expression UNION . graph_expression
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    graph_expression               shift and go to state 66

state 42

    (26) graph_expression -> graph_expression INTERSECTION . graph_expression
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    graph_expression               shift and go to state 67

state 43

    (27) graph_expression -> graph_expression DIFFERENCE . graph_expression
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    graph_expression               shift and go to state 68

state 44

    (21) graph_expression -> GRAPH OPAR . value_expression COMMA edge_expression CPAR
    (23) graph_expression -> GRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (44) value_expression -> . algebraic_expression
    (45) value_expression -> . function
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression
    (54) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    OBR             shift and go to state 70
    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    value_expression               shift and go to state 69
    algebraic_expression           shift and go to state 32
    function                       shift and go to state 33
    graph_expression               shift and go to state 37

state 45

    (22) graph_expression -> DIGRAPH OPAR . value_expression COMMA edge_expression CPAR
    (24) graph_expression -> DIGRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (44) value_expression -> . algebraic_expression
    (45) value_expression -> . function
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression
    (54) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    OBR             shift and go to state 72
    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    value_expression               shift and go to state 71
    algebraic_expression           shift and go to state 32
    function                       shift and go to state 33
    graph_expression               shift and go to state 37

state 46

    (32) edge_expression -> OPAR . INT COMMA INT CPAR
    (34) edge_expression -> OPAR . INT COMMA INT COMMA INT CPAR
    (36) edge_expression -> OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 73


state 47

    (18) Add_vertex_instr -> ID ADD OPAR vertex_expression . CPAR
    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression . COMMA edge_expression CPAR
    (29) vertex_expression -> vertex_expression . INT

    CPAR            shift and go to state 74
    COMMA           shift and go to state 75
    INT             shift and go to state 76


state 48

    (19) Add_edge_instr -> ID ADD OPAR edge_expression . CPAR
    (31) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 78
    OPAR            shift and go to state 77


state 49

    (30) vertex_expression -> INT .

    CPAR            reduce using rule 30 (vertex_expression -> INT .)
    COMMA           reduce using rule 30 (vertex_expression -> INT .)
    INT             reduce using rule 30 (vertex_expression -> INT .)
    CBR             reduce using rule 30 (vertex_expression -> INT .)


state 50

    (37) edge_expression -> empty .

    CPAR            reduce using rule 37 (edge_expression -> empty .)
    OPAR            reduce using rule 37 (edge_expression -> empty .)


state 51

    (12) If_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END
    (13) If_else_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END ELSE BEGIN Instructions END

    BEGIN           shift and go to state 79


state 52

    (38) logic_expression -> value_expression EQUAL . value_expression
    (44) value_expression -> . algebraic_expression
    (45) value_expression -> . function
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression
    (54) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    value_expression               shift and go to state 80
    algebraic_expression           shift and go to state 32
    function                       shift and go to state 33
    graph_expression               shift and go to state 37

state 53

    (39) logic_expression -> value_expression GREATER . value_expression
    (44) value_expression -> . algebraic_expression
    (45) value_expression -> . function
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression
    (54) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    value_expression               shift and go to state 81
    algebraic_expression           shift and go to state 32
    function                       shift and go to state 33
    graph_expression               shift and go to state 37

state 54

    (40) logic_expression -> value_expression LESS . value_expression
    (44) value_expression -> . algebraic_expression
    (45) value_expression -> . function
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression
    (54) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    value_expression               shift and go to state 82
    algebraic_expression           shift and go to state 32
    function                       shift and go to state 33
    graph_expression               shift and go to state 37

state 55

    (41) logic_expression -> value_expression GREATEREQ . value_expression
    (44) value_expression -> . algebraic_expression
    (45) value_expression -> . function
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression
    (54) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    value_expression               shift and go to state 83
    algebraic_expression           shift and go to state 32
    function                       shift and go to state 33
    graph_expression               shift and go to state 37

state 56

    (42) logic_expression -> value_expression LESSEQ . value_expression
    (44) value_expression -> . algebraic_expression
    (45) value_expression -> . function
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression
    (54) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    value_expression               shift and go to state 84
    algebraic_expression           shift and go to state 32
    function                       shift and go to state 33
    graph_expression               shift and go to state 37

state 57

    (43) logic_expression -> value_expression NEQUAL . value_expression
    (44) value_expression -> . algebraic_expression
    (45) value_expression -> . function
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression
    (54) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . ID

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    ID              shift and go to state 25

    value_expression               shift and go to state 85
    algebraic_expression           shift and go to state 32
    function                       shift and go to state 33
    graph_expression               shift and go to state 37

state 58

    (48) algebraic_expression -> algebraic_expression PLUS . algebraic_expression
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36

    algebraic_expression           shift and go to state 86

state 59

    (49) algebraic_expression -> algebraic_expression MINUS . algebraic_expression
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36

    algebraic_expression           shift and go to state 87

state 60

    (50) algebraic_expression -> algebraic_expression MUL . algebraic_expression
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36

    algebraic_expression           shift and go to state 88

state 61

    (51) algebraic_expression -> algebraic_expression DIV . algebraic_expression
    (46) algebraic_expression -> . INT
    (47) algebraic_expression -> . FLOAT
    (48) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (49) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (50) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (51) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (52) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 34
    FLOAT           shift and go to state 35
    MINUS           shift and go to state 36

    algebraic_expression           shift and go to state 89

state 62

    (52) algebraic_expression -> MINUS algebraic_expression .
    (48) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (49) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (50) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (51) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)
    MINUS           reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)
    MUL             reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)
    DIV             reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)
    EQUAL           reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)
    GREATER         reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)
    LESS            reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)
    LESSEQ          reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)
    NEQUAL          reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)
    COMMA           reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)
    CPAR            reduce using rule 52 (algebraic_expression -> MINUS algebraic_expression .)

  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]


state 63

    (54) function -> graph_expression POINT . NODES_COUNT

    NODES_COUNT     shift and go to state 90


state 64

    (14) For_vertex_instr -> FORVERTEX ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 91


state 65

    (15) For_edge_instr -> FOREDGE ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 92


state 66

    (25) graph_expression -> graph_expression UNION graph_expression .
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression

  ! shift/reduce conflict for UNION resolved as shift
  ! shift/reduce conflict for INTERSECTION resolved as shift
  ! shift/reduce conflict for DIFFERENCE resolved as shift
    PLOT            reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    IF              reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    FORVERTEX       reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    ID              reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    FOREDGE         reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    $end            reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    END             reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    POINT           reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    UNION           shift and go to state 41
    INTERSECTION    shift and go to state 42
    DIFFERENCE      shift and go to state 43

  ! UNION           [ reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .) ]
  ! DIFFERENCE      [ reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .) ]


state 67

    (26) graph_expression -> graph_expression INTERSECTION graph_expression .
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression

  ! shift/reduce conflict for UNION resolved as shift
  ! shift/reduce conflict for INTERSECTION resolved as shift
  ! shift/reduce conflict for DIFFERENCE resolved as shift
    PLOT            reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    IF              reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FORVERTEX       reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    ID              reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FOREDGE         reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    $end            reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    END             reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    POINT           reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    UNION           shift and go to state 41
    INTERSECTION    shift and go to state 42
    DIFFERENCE      shift and go to state 43

  ! UNION           [ reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .) ]
  ! DIFFERENCE      [ reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .) ]


state 68

    (27) graph_expression -> graph_expression DIFFERENCE graph_expression .
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression

  ! shift/reduce conflict for UNION resolved as shift
  ! shift/reduce conflict for INTERSECTION resolved as shift
  ! shift/reduce conflict for DIFFERENCE resolved as shift
    PLOT            reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    IF              reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FORVERTEX       reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    ID              reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FOREDGE         reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    $end            reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    END             reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    POINT           reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    UNION           shift and go to state 41
    INTERSECTION    shift and go to state 42
    DIFFERENCE      shift and go to state 43

  ! UNION           [ reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .) ]
  ! DIFFERENCE      [ reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .) ]


state 69

    (21) graph_expression -> GRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 93


state 70

    (23) graph_expression -> GRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (29) vertex_expression -> . vertex_expression INT
    (30) vertex_expression -> . INT

    INT             shift and go to state 49

    vertex_expression              shift and go to state 94

state 71

    (22) graph_expression -> DIGRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 95


state 72

    (24) graph_expression -> DIGRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (29) vertex_expression -> . vertex_expression INT
    (30) vertex_expression -> . INT

    INT             shift and go to state 49

    vertex_expression              shift and go to state 96

state 73

    (32) edge_expression -> OPAR INT . COMMA INT CPAR
    (34) edge_expression -> OPAR INT . COMMA INT COMMA INT CPAR
    (36) edge_expression -> OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 97


state 74

    (18) Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .

    PLOT            reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    IF              reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FORVERTEX       reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    ID              reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FOREDGE         reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    $end            reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    END             reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)


state 75

    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA . edge_expression CPAR
    (31) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (32) edge_expression -> . OPAR INT COMMA INT CPAR
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (37) edge_expression -> . empty
    (53) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 46
    CPAR            reduce using rule 53 (empty -> .)

  ! OPAR            [ reduce using rule 53 (empty -> .) ]

    edge_expression                shift and go to state 98
    empty                          shift and go to state 50

state 76

    (29) vertex_expression -> vertex_expression INT .

    CPAR            reduce using rule 29 (vertex_expression -> vertex_expression INT .)
    COMMA           reduce using rule 29 (vertex_expression -> vertex_expression INT .)
    INT             reduce using rule 29 (vertex_expression -> vertex_expression INT .)
    CBR             reduce using rule 29 (vertex_expression -> vertex_expression INT .)


state 77

    (31) edge_expression -> edge_expression OPAR . INT COMMA INT CPAR
    (33) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 99


state 78

    (19) Add_edge_instr -> ID ADD OPAR edge_expression CPAR .

    PLOT            reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    IF              reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FORVERTEX       reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    ID              reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FOREDGE         reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    $end            reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    END             reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)


state 79

    (12) If_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END
    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END ELSE BEGIN Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 100
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 80

    (38) logic_expression -> value_expression EQUAL value_expression .

    CPAR            reduce using rule 38 (logic_expression -> value_expression EQUAL value_expression .)


state 81

    (39) logic_expression -> value_expression GREATER value_expression .

    CPAR            reduce using rule 39 (logic_expression -> value_expression GREATER value_expression .)


state 82

    (40) logic_expression -> value_expression LESS value_expression .

    CPAR            reduce using rule 40 (logic_expression -> value_expression LESS value_expression .)


state 83

    (41) logic_expression -> value_expression GREATEREQ value_expression .

    CPAR            reduce using rule 41 (logic_expression -> value_expression GREATEREQ value_expression .)


state 84

    (42) logic_expression -> value_expression LESSEQ value_expression .

    CPAR            reduce using rule 42 (logic_expression -> value_expression LESSEQ value_expression .)


state 85

    (43) logic_expression -> value_expression NEQUAL value_expression .

    CPAR            reduce using rule 43 (logic_expression -> value_expression NEQUAL value_expression .)


state 86

    (48) algebraic_expression -> algebraic_expression PLUS algebraic_expression .
    (48) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (49) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (50) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (51) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MINUS           reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    EQUAL           reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATER         reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESS            reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATEREQ       reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESSEQ          reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    NEQUAL          reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    COMMA           reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    CPAR            reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MUL             shift and go to state 60
    DIV             shift and go to state 61

  ! MUL             [ reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 48 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]


state 87

    (49) algebraic_expression -> algebraic_expression MINUS algebraic_expression .
    (48) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (49) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (50) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (51) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MINUS           reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    EQUAL           reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATER         reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESS            reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESSEQ          reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    NEQUAL          reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    COMMA           reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    CPAR            reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MUL             shift and go to state 60
    DIV             shift and go to state 61

  ! MUL             [ reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 49 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]


state 88

    (50) algebraic_expression -> algebraic_expression MUL algebraic_expression .
    (48) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (49) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (50) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (51) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MINUS           reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MUL             reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    DIV             reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    EQUAL           reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATER         reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESS            reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATEREQ       reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESSEQ          reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    NEQUAL          reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    COMMA           reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    CPAR            reduce using rule 50 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)

  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]


state 89

    (51) algebraic_expression -> algebraic_expression DIV algebraic_expression .
    (48) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (49) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (50) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (51) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MINUS           reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MUL             reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    DIV             reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    EQUAL           reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATER         reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESS            reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATEREQ       reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESSEQ          reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    NEQUAL          reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    COMMA           reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    CPAR            reduce using rule 51 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)

  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! MUL             [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]


state 90

    (54) function -> graph_expression POINT NODES_COUNT .

    EQUAL           reduce using rule 54 (function -> graph_expression POINT NODES_COUNT .)
    GREATER         reduce using rule 54 (function -> graph_expression POINT NODES_COUNT .)
    LESS            reduce using rule 54 (function -> graph_expression POINT NODES_COUNT .)
    GREATEREQ       reduce using rule 54 (function -> graph_expression POINT NODES_COUNT .)
    LESSEQ          reduce using rule 54 (function -> graph_expression POINT NODES_COUNT .)
    NEQUAL          reduce using rule 54 (function -> graph_expression POINT NODES_COUNT .)
    COMMA           reduce using rule 54 (function -> graph_expression POINT NODES_COUNT .)
    CPAR            reduce using rule 54 (function -> graph_expression POINT NODES_COUNT .)


state 91

    (14) For_vertex_instr -> FORVERTEX ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 101
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 92

    (15) For_edge_instr -> FOREDGE ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 102
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 93

    (21) graph_expression -> GRAPH OPAR value_expression COMMA . edge_expression CPAR
    (31) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (32) edge_expression -> . OPAR INT COMMA INT CPAR
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (37) edge_expression -> . empty
    (53) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 46
    CPAR            reduce using rule 53 (empty -> .)

  ! OPAR            [ reduce using rule 53 (empty -> .) ]

    edge_expression                shift and go to state 103
    empty                          shift and go to state 50

state 94

    (23) graph_expression -> GRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (29) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 104
    INT             shift and go to state 76


state 95

    (22) graph_expression -> DIGRAPH OPAR value_expression COMMA . edge_expression CPAR
    (31) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (32) edge_expression -> . OPAR INT COMMA INT CPAR
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (37) edge_expression -> . empty
    (53) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 46
    CPAR            reduce using rule 53 (empty -> .)

  ! OPAR            [ reduce using rule 53 (empty -> .) ]

    edge_expression                shift and go to state 105
    empty                          shift and go to state 50

state 96

    (24) graph_expression -> DIGRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (29) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 106
    INT             shift and go to state 76


state 97

    (32) edge_expression -> OPAR INT COMMA . INT CPAR
    (34) edge_expression -> OPAR INT COMMA . INT COMMA INT CPAR
    (36) edge_expression -> OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 107


state 98

    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression . CPAR
    (31) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 108
    OPAR            shift and go to state 77


state 99

    (31) edge_expression -> edge_expression OPAR INT . COMMA INT CPAR
    (33) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA INT CPAR
    (35) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 109


state 100

    (12) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END
    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END ELSE BEGIN Instructions END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 110
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 101

    (14) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 111
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 102

    (15) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 112
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 103

    (21) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression . CPAR
    (31) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 113
    OPAR            shift and go to state 77


state 104

    (23) graph_expression -> GRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 114


state 105

    (22) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression . CPAR
    (31) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 115
    OPAR            shift and go to state 77


state 106

    (24) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 116


state 107

    (32) edge_expression -> OPAR INT COMMA INT . CPAR
    (34) edge_expression -> OPAR INT COMMA INT . COMMA INT CPAR
    (36) edge_expression -> OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 118
    COMMA           shift and go to state 117


state 108

    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .

    PLOT            reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    END             reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)


state 109

    (31) edge_expression -> edge_expression OPAR INT COMMA . INT CPAR
    (33) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA INT CPAR
    (35) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 119


state 110

    (12) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .
    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END . ELSE BEGIN Instructions END

    PLOT            reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    IF              reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FORVERTEX       reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ID              reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FOREDGE         reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    $end            reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    END             reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ELSE            shift and go to state 120


state 111

    (14) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    END             reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)


state 112

    (15) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    END             reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)


state 113

    (21) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .

    UNION           reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 114

    (23) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (31) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (32) edge_expression -> . OPAR INT COMMA INT CPAR
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (37) edge_expression -> . empty
    (53) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 46
    CPAR            reduce using rule 53 (empty -> .)

  ! OPAR            [ reduce using rule 53 (empty -> .) ]

    edge_expression                shift and go to state 121
    empty                          shift and go to state 50

state 115

    (22) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .

    UNION           reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 116

    (24) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (31) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (32) edge_expression -> . OPAR INT COMMA INT CPAR
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (37) edge_expression -> . empty
    (53) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 46
    CPAR            reduce using rule 53 (empty -> .)

  ! OPAR            [ reduce using rule 53 (empty -> .) ]

    edge_expression                shift and go to state 122
    empty                          shift and go to state 50

state 117

    (34) edge_expression -> OPAR INT COMMA INT COMMA . INT CPAR
    (36) edge_expression -> OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 123
    FLOAT           shift and go to state 124


state 118

    (32) edge_expression -> OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 32 (edge_expression -> OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 32 (edge_expression -> OPAR INT COMMA INT CPAR .)


state 119

    (31) edge_expression -> edge_expression OPAR INT COMMA INT . CPAR
    (33) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA INT CPAR
    (35) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 126
    COMMA           shift and go to state 125


state 120

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE . BEGIN Instructions END

    BEGIN           shift and go to state 127


state 121

    (23) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (31) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 128
    OPAR            shift and go to state 77


state 122

    (24) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (31) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 129
    OPAR            shift and go to state 77


state 123

    (34) edge_expression -> OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 130


state 124

    (36) edge_expression -> OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 131


state 125

    (33) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . INT CPAR
    (35) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 132
    FLOAT           shift and go to state 133


state 126

    (31) edge_expression -> edge_expression OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 31 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 31 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)


state 127

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 134
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 128

    (23) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    UNION           reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 129

    (24) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    UNION           reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 130

    (34) edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 34 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 34 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)


state 131

    (36) edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 36 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 36 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 132

    (33) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 135


state 133

    (35) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 136


state 134

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 137
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 135

    (33) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 33 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 33 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)


state 136

    (35) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 35 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 35 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 137

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .

    PLOT            reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    IF              reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FORVERTEX       reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    ID              reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FOREDGE         reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    $end            reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    END             reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPAR in state 29 resolved as shift
WARNING: shift/reduce conflict for UNION in state 66 resolved as shift
WARNING: shift/reduce conflict for INTERSECTION in state 66 resolved as shift
WARNING: shift/reduce conflict for DIFFERENCE in state 66 resolved as shift
WARNING: shift/reduce conflict for UNION in state 67 resolved as shift
WARNING: shift/reduce conflict for INTERSECTION in state 67 resolved as shift
WARNING: shift/reduce conflict for DIFFERENCE in state 67 resolved as shift
WARNING: shift/reduce conflict for UNION in state 68 resolved as shift
WARNING: shift/reduce conflict for INTERSECTION in state 68 resolved as shift
WARNING: shift/reduce conflict for DIFFERENCE in state 68 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 75 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 93 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 95 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 114 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 116 resolved as shift
