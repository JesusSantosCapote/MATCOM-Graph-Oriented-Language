Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EDGE
    ELIF
    MULTIGRAPH
    PSEUDOGRAPH
    STRING

Grammar

Rule 0     S' -> Instructions
Rule 1     Instructions -> Instructions Instruction
Rule 2     Instructions -> Instruction
Rule 3     Instruction -> Plot_instr
Rule 4     Instruction -> If_instr
Rule 5     Instruction -> If_else_instr
Rule 6     Instruction -> For_vertex_instr
Rule 7     Instruction -> Assign_instr
Rule 8     Instruction -> For_edge_instr
Rule 9     Instruction -> Add_vertex_instr
Rule 10    Instruction -> Add_edge_instr
Rule 11    Instruction -> Add_vertex_and_edge_instr
Rule 12    Instruction -> K_color_plot_instr
Rule 13    Instruction -> Weighted_plt_instr
Rule 14    If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END
Rule 15    If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
Rule 16    For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END
Rule 17    For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END
Rule 18    Plot_instr -> PLOT OPAR graph_expression CPAR
Rule 19    Assign_instr -> ID ASSIGN graph_expression
Rule 20    Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR
Rule 21    K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR
Rule 22    Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR
Rule 23    Add_edge_instr -> ID ADD OPAR edge_expression CPAR
Rule 24    Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR
Rule 25    graph_expression -> OPAR graph_expression CPAR
Rule 26    graph_expression -> KRUSKAL OPAR graph_expression CPAR
Rule 27    graph_expression -> PRIM OPAR graph_expression CPAR
Rule 28    graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR
Rule 29    graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
Rule 30    graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 31    graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 32    graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 33    graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 34    graph_expression -> graph_expression UNION graph_expression
Rule 35    graph_expression -> graph_expression INTERSECTION graph_expression
Rule 36    graph_expression -> graph_expression DIFFERENCE graph_expression
Rule 37    graph_expression -> graph_expression CONCAT graph_expression
Rule 38    graph_expression -> COMPLEMENT OPAR graph_expression CPAR
Rule 39    graph_expression -> ID
Rule 40    vertex_expression -> vertex_expression INT
Rule 41    vertex_expression -> INT
Rule 42    edge_expression -> edge_expression OPAR INT COMMA INT CPAR
Rule 43    edge_expression -> OPAR INT COMMA INT CPAR
Rule 44    edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR
Rule 45    edge_expression -> OPAR INT COMMA INT COMMA INT CPAR
Rule 46    edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 47    edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 48    edge_expression -> empty
Rule 49    logic_expression -> value_expression EQUAL value_expression
Rule 50    logic_expression -> value_expression GREATER value_expression
Rule 51    logic_expression -> value_expression LESS value_expression
Rule 52    logic_expression -> value_expression GREATEREQ value_expression
Rule 53    logic_expression -> value_expression LESSEQ value_expression
Rule 54    logic_expression -> value_expression NEQUAL value_expression
Rule 55    logic_expression -> logic_function
Rule 56    value_expression -> algebraic_expression
Rule 57    value_expression -> numeric_function
Rule 58    algebraic_expression -> INT
Rule 59    algebraic_expression -> FLOAT
Rule 60    algebraic_expression -> OPAR algebraic_expression CPAR
Rule 61    algebraic_expression -> numeric_function
Rule 62    algebraic_expression -> algebraic_expression PLUS algebraic_expression
Rule 63    algebraic_expression -> algebraic_expression MINUS algebraic_expression
Rule 64    algebraic_expression -> algebraic_expression MUL algebraic_expression
Rule 65    algebraic_expression -> algebraic_expression DIV algebraic_expression
Rule 66    algebraic_expression -> MINUS algebraic_expression
Rule 67    empty -> <empty>
Rule 68    numeric_function -> graph_expression POINT NODES_COUNT
Rule 69    numeric_function -> graph_expression POINT EDGES_COUNT
Rule 70    numeric_function -> graph_expression POINT WEIGHT_SUM
Rule 71    logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression
Rule 72    logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression

Terminals, with rules where they appear

ADD                  : 20 23 24
ASSIGN               : 19
BEGIN                : 14 15 15 16 17
BFS                  : 28
CBR                  : 32 33
COMMA                : 24 28 29 29 30 31 32 33 42 43 44 44 45 45 46 46 47 47
COMPLEMENT           : 38
CONCAT               : 37
CONTAIN_EDGES        : 72
CONTAIN_VERTEX       : 71
CPAR                 : 14 15 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 38 42 43 44 45 46 47 60
DIFFERENCE           : 36
DIGRAPH              : 31 33
DIJKSTRA             : 29
DIV                  : 65
EDGE                 : 
EDGES_COUNT          : 69
ELIF                 : 
ELSE                 : 15
END                  : 14 15 15 16 17
EQUAL                : 49
FLOAT                : 46 47 59
FOREDGE              : 17
FORVERTEX            : 16
GRAPH                : 30 32
GREATER              : 50
GREATEREQ            : 52
ID                   : 16 16 17 17 19 20 23 24 39
IF                   : 14 15
IN                   : 16 17
INT                  : 40 41 42 42 43 43 44 44 44 45 45 45 46 46 47 47 58
INTERSECTION         : 35
KRUSKAL              : 26
K_COLOR_PLOT         : 21
LESS                 : 51
LESSEQ               : 53
MINUS                : 63 66
MUL                  : 64
MULTIGRAPH           : 
NEQUAL               : 54
NODES_COUNT          : 68
OBR                  : 32 33
OPAR                 : 14 15 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 38 42 43 44 45 46 47 60
PLOT                 : 18
PLUS                 : 62
POINT                : 68 69 70 71 72
PRIM                 : 27
PSEUDOGRAPH          : 
STRING               : 
UNION                : 34
WEIGHTED_PLOT        : 22
WEIGHT_SUM           : 70
error                : 

Nonterminals, with rules where they appear

Add_edge_instr       : 10
Add_vertex_and_edge_instr : 11
Add_vertex_instr     : 9
Assign_instr         : 7
For_edge_instr       : 8
For_vertex_instr     : 6
If_else_instr        : 5
If_instr             : 4
Instruction          : 1 2
Instructions         : 1 14 15 15 16 17 0
K_color_plot_instr   : 12
Plot_instr           : 3
Weighted_plt_instr   : 13
algebraic_expression : 56 60 62 62 63 63 64 64 65 65 66
edge_expression      : 23 24 30 31 32 33 42 44 46 72
empty                : 48
graph_expression     : 18 19 21 22 25 26 27 28 29 34 34 35 35 36 36 37 37 38 68 69 70 71 72
logic_expression     : 14 15
logic_function       : 55
numeric_function     : 57 61
value_expression     : 28 29 29 30 31 49 49 50 50 51 51 52 52 53 53 54 54 71
vertex_expression    : 20 24 32 33 40

Parsing method: LALR

state 0

    (0) S' -> . Instructions
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 1
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 1

    (0) S' -> Instructions .
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 2

    (2) Instructions -> Instruction .

    PLOT            reduce using rule 2 (Instructions -> Instruction .)
    IF              reduce using rule 2 (Instructions -> Instruction .)
    FORVERTEX       reduce using rule 2 (Instructions -> Instruction .)
    ID              reduce using rule 2 (Instructions -> Instruction .)
    FOREDGE         reduce using rule 2 (Instructions -> Instruction .)
    K_COLOR_PLOT    reduce using rule 2 (Instructions -> Instruction .)
    WEIGHTED_PLOT   reduce using rule 2 (Instructions -> Instruction .)
    $end            reduce using rule 2 (Instructions -> Instruction .)
    END             reduce using rule 2 (Instructions -> Instruction .)


state 3

    (3) Instruction -> Plot_instr .

    PLOT            reduce using rule 3 (Instruction -> Plot_instr .)
    IF              reduce using rule 3 (Instruction -> Plot_instr .)
    FORVERTEX       reduce using rule 3 (Instruction -> Plot_instr .)
    ID              reduce using rule 3 (Instruction -> Plot_instr .)
    FOREDGE         reduce using rule 3 (Instruction -> Plot_instr .)
    K_COLOR_PLOT    reduce using rule 3 (Instruction -> Plot_instr .)
    WEIGHTED_PLOT   reduce using rule 3 (Instruction -> Plot_instr .)
    $end            reduce using rule 3 (Instruction -> Plot_instr .)
    END             reduce using rule 3 (Instruction -> Plot_instr .)


state 4

    (4) Instruction -> If_instr .

    PLOT            reduce using rule 4 (Instruction -> If_instr .)
    IF              reduce using rule 4 (Instruction -> If_instr .)
    FORVERTEX       reduce using rule 4 (Instruction -> If_instr .)
    ID              reduce using rule 4 (Instruction -> If_instr .)
    FOREDGE         reduce using rule 4 (Instruction -> If_instr .)
    K_COLOR_PLOT    reduce using rule 4 (Instruction -> If_instr .)
    WEIGHTED_PLOT   reduce using rule 4 (Instruction -> If_instr .)
    $end            reduce using rule 4 (Instruction -> If_instr .)
    END             reduce using rule 4 (Instruction -> If_instr .)


state 5

    (5) Instruction -> If_else_instr .

    PLOT            reduce using rule 5 (Instruction -> If_else_instr .)
    IF              reduce using rule 5 (Instruction -> If_else_instr .)
    FORVERTEX       reduce using rule 5 (Instruction -> If_else_instr .)
    ID              reduce using rule 5 (Instruction -> If_else_instr .)
    FOREDGE         reduce using rule 5 (Instruction -> If_else_instr .)
    K_COLOR_PLOT    reduce using rule 5 (Instruction -> If_else_instr .)
    WEIGHTED_PLOT   reduce using rule 5 (Instruction -> If_else_instr .)
    $end            reduce using rule 5 (Instruction -> If_else_instr .)
    END             reduce using rule 5 (Instruction -> If_else_instr .)


state 6

    (6) Instruction -> For_vertex_instr .

    PLOT            reduce using rule 6 (Instruction -> For_vertex_instr .)
    IF              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FORVERTEX       reduce using rule 6 (Instruction -> For_vertex_instr .)
    ID              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FOREDGE         reduce using rule 6 (Instruction -> For_vertex_instr .)
    K_COLOR_PLOT    reduce using rule 6 (Instruction -> For_vertex_instr .)
    WEIGHTED_PLOT   reduce using rule 6 (Instruction -> For_vertex_instr .)
    $end            reduce using rule 6 (Instruction -> For_vertex_instr .)
    END             reduce using rule 6 (Instruction -> For_vertex_instr .)


state 7

    (7) Instruction -> Assign_instr .

    PLOT            reduce using rule 7 (Instruction -> Assign_instr .)
    IF              reduce using rule 7 (Instruction -> Assign_instr .)
    FORVERTEX       reduce using rule 7 (Instruction -> Assign_instr .)
    ID              reduce using rule 7 (Instruction -> Assign_instr .)
    FOREDGE         reduce using rule 7 (Instruction -> Assign_instr .)
    K_COLOR_PLOT    reduce using rule 7 (Instruction -> Assign_instr .)
    WEIGHTED_PLOT   reduce using rule 7 (Instruction -> Assign_instr .)
    $end            reduce using rule 7 (Instruction -> Assign_instr .)
    END             reduce using rule 7 (Instruction -> Assign_instr .)


state 8

    (8) Instruction -> For_edge_instr .

    PLOT            reduce using rule 8 (Instruction -> For_edge_instr .)
    IF              reduce using rule 8 (Instruction -> For_edge_instr .)
    FORVERTEX       reduce using rule 8 (Instruction -> For_edge_instr .)
    ID              reduce using rule 8 (Instruction -> For_edge_instr .)
    FOREDGE         reduce using rule 8 (Instruction -> For_edge_instr .)
    K_COLOR_PLOT    reduce using rule 8 (Instruction -> For_edge_instr .)
    WEIGHTED_PLOT   reduce using rule 8 (Instruction -> For_edge_instr .)
    $end            reduce using rule 8 (Instruction -> For_edge_instr .)
    END             reduce using rule 8 (Instruction -> For_edge_instr .)


state 9

    (9) Instruction -> Add_vertex_instr .

    PLOT            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    IF              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FORVERTEX       reduce using rule 9 (Instruction -> Add_vertex_instr .)
    ID              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FOREDGE         reduce using rule 9 (Instruction -> Add_vertex_instr .)
    K_COLOR_PLOT    reduce using rule 9 (Instruction -> Add_vertex_instr .)
    WEIGHTED_PLOT   reduce using rule 9 (Instruction -> Add_vertex_instr .)
    $end            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    END             reduce using rule 9 (Instruction -> Add_vertex_instr .)


state 10

    (10) Instruction -> Add_edge_instr .

    PLOT            reduce using rule 10 (Instruction -> Add_edge_instr .)
    IF              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FORVERTEX       reduce using rule 10 (Instruction -> Add_edge_instr .)
    ID              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FOREDGE         reduce using rule 10 (Instruction -> Add_edge_instr .)
    K_COLOR_PLOT    reduce using rule 10 (Instruction -> Add_edge_instr .)
    WEIGHTED_PLOT   reduce using rule 10 (Instruction -> Add_edge_instr .)
    $end            reduce using rule 10 (Instruction -> Add_edge_instr .)
    END             reduce using rule 10 (Instruction -> Add_edge_instr .)


state 11

    (11) Instruction -> Add_vertex_and_edge_instr .

    PLOT            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    IF              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FORVERTEX       reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    ID              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FOREDGE         reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    K_COLOR_PLOT    reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    WEIGHTED_PLOT   reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    $end            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    END             reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)


state 12

    (12) Instruction -> K_color_plot_instr .

    PLOT            reduce using rule 12 (Instruction -> K_color_plot_instr .)
    IF              reduce using rule 12 (Instruction -> K_color_plot_instr .)
    FORVERTEX       reduce using rule 12 (Instruction -> K_color_plot_instr .)
    ID              reduce using rule 12 (Instruction -> K_color_plot_instr .)
    FOREDGE         reduce using rule 12 (Instruction -> K_color_plot_instr .)
    K_COLOR_PLOT    reduce using rule 12 (Instruction -> K_color_plot_instr .)
    WEIGHTED_PLOT   reduce using rule 12 (Instruction -> K_color_plot_instr .)
    $end            reduce using rule 12 (Instruction -> K_color_plot_instr .)
    END             reduce using rule 12 (Instruction -> K_color_plot_instr .)


state 13

    (13) Instruction -> Weighted_plt_instr .

    PLOT            reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    IF              reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    FORVERTEX       reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    ID              reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    FOREDGE         reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    K_COLOR_PLOT    reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    WEIGHTED_PLOT   reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    $end            reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    END             reduce using rule 13 (Instruction -> Weighted_plt_instr .)


state 14

    (18) Plot_instr -> PLOT . OPAR graph_expression CPAR

    OPAR            shift and go to state 22


state 15

    (14) If_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    OPAR            shift and go to state 23


state 16

    (16) For_vertex_instr -> FORVERTEX . ID IN ID BEGIN Instructions END

    ID              shift and go to state 24


state 17

    (19) Assign_instr -> ID . ASSIGN graph_expression
    (20) Add_vertex_instr -> ID . ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> ID . ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> ID . ADD OPAR vertex_expression COMMA edge_expression CPAR

    ASSIGN          shift and go to state 25
    ADD             shift and go to state 26


state 18

    (17) For_edge_instr -> FOREDGE . ID IN ID BEGIN Instructions END

    ID              shift and go to state 27


state 19

    (21) K_color_plot_instr -> K_COLOR_PLOT . OPAR graph_expression CPAR

    OPAR            shift and go to state 28


state 20

    (22) Weighted_plt_instr -> WEIGHTED_PLOT . OPAR graph_expression CPAR

    OPAR            shift and go to state 29


state 21

    (1) Instructions -> Instructions Instruction .

    PLOT            reduce using rule 1 (Instructions -> Instructions Instruction .)
    IF              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FORVERTEX       reduce using rule 1 (Instructions -> Instructions Instruction .)
    ID              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FOREDGE         reduce using rule 1 (Instructions -> Instructions Instruction .)
    K_COLOR_PLOT    reduce using rule 1 (Instructions -> Instructions Instruction .)
    WEIGHTED_PLOT   reduce using rule 1 (Instructions -> Instructions Instruction .)
    $end            reduce using rule 1 (Instructions -> Instructions Instruction .)
    END             reduce using rule 1 (Instructions -> Instructions Instruction .)


state 22

    (18) Plot_instr -> PLOT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 31

state 23

    (14) If_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (49) logic_expression -> . value_expression EQUAL value_expression
    (50) logic_expression -> . value_expression GREATER value_expression
    (51) logic_expression -> . value_expression LESS value_expression
    (52) logic_expression -> . value_expression GREATEREQ value_expression
    (53) logic_expression -> . value_expression LESSEQ value_expression
    (54) logic_expression -> . value_expression NEQUAL value_expression
    (55) logic_expression -> . logic_function
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (71) logic_function -> . graph_expression POINT CONTAIN_VERTEX value_expression
    (72) logic_function -> . graph_expression POINT CONTAIN_EDGES edge_expression
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    logic_expression               shift and go to state 41
    value_expression               shift and go to state 42
    logic_function                 shift and go to state 43
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45
    graph_expression               shift and go to state 46

state 24

    (16) For_vertex_instr -> FORVERTEX ID . IN ID BEGIN Instructions END

    IN              shift and go to state 50


state 25

    (19) Assign_instr -> ID ASSIGN . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 51

state 26

    (20) Add_vertex_instr -> ID ADD . OPAR vertex_expression CPAR
    (23) Add_edge_instr -> ID ADD . OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> ID ADD . OPAR vertex_expression COMMA edge_expression CPAR

    OPAR            shift and go to state 52


state 27

    (17) For_edge_instr -> FOREDGE ID . IN ID BEGIN Instructions END

    IN              shift and go to state 53


state 28

    (21) K_color_plot_instr -> K_COLOR_PLOT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 54

state 29

    (22) Weighted_plt_instr -> WEIGHTED_PLOT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 55

state 30

    (25) graph_expression -> OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 56

state 31

    (18) Plot_instr -> PLOT OPAR graph_expression . CPAR
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 57
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 32

    (26) graph_expression -> KRUSKAL . OPAR graph_expression CPAR

    OPAR            shift and go to state 62


state 33

    (27) graph_expression -> PRIM . OPAR graph_expression CPAR

    OPAR            shift and go to state 63


state 34

    (28) graph_expression -> BFS . OPAR graph_expression COMMA value_expression CPAR

    OPAR            shift and go to state 64


state 35

    (29) graph_expression -> DIJKSTRA . OPAR graph_expression COMMA value_expression COMMA value_expression CPAR

    OPAR            shift and go to state 65


state 36

    (30) graph_expression -> GRAPH . OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> GRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 66


state 37

    (31) graph_expression -> DIGRAPH . OPAR value_expression COMMA edge_expression CPAR
    (33) graph_expression -> DIGRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 67


state 38

    (38) graph_expression -> COMPLEMENT . OPAR graph_expression CPAR

    OPAR            shift and go to state 68


state 39

    (39) graph_expression -> ID .

    CPAR            reduce using rule 39 (graph_expression -> ID .)
    UNION           reduce using rule 39 (graph_expression -> ID .)
    INTERSECTION    reduce using rule 39 (graph_expression -> ID .)
    DIFFERENCE      reduce using rule 39 (graph_expression -> ID .)
    CONCAT          reduce using rule 39 (graph_expression -> ID .)
    POINT           reduce using rule 39 (graph_expression -> ID .)
    PLOT            reduce using rule 39 (graph_expression -> ID .)
    IF              reduce using rule 39 (graph_expression -> ID .)
    FORVERTEX       reduce using rule 39 (graph_expression -> ID .)
    ID              reduce using rule 39 (graph_expression -> ID .)
    FOREDGE         reduce using rule 39 (graph_expression -> ID .)
    K_COLOR_PLOT    reduce using rule 39 (graph_expression -> ID .)
    WEIGHTED_PLOT   reduce using rule 39 (graph_expression -> ID .)
    $end            reduce using rule 39 (graph_expression -> ID .)
    END             reduce using rule 39 (graph_expression -> ID .)
    COMMA           reduce using rule 39 (graph_expression -> ID .)


state 40

    (60) algebraic_expression -> OPAR . algebraic_expression CPAR
    (25) graph_expression -> OPAR . graph_expression CPAR
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    algebraic_expression           shift and go to state 69
    graph_expression               shift and go to state 70
    numeric_function               shift and go to state 71

state 41

    (14) If_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END
    (15) If_else_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    CPAR            shift and go to state 72


state 42

    (49) logic_expression -> value_expression . EQUAL value_expression
    (50) logic_expression -> value_expression . GREATER value_expression
    (51) logic_expression -> value_expression . LESS value_expression
    (52) logic_expression -> value_expression . GREATEREQ value_expression
    (53) logic_expression -> value_expression . LESSEQ value_expression
    (54) logic_expression -> value_expression . NEQUAL value_expression

    EQUAL           shift and go to state 73
    GREATER         shift and go to state 74
    LESS            shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    NEQUAL          shift and go to state 78


state 43

    (55) logic_expression -> logic_function .

    CPAR            reduce using rule 55 (logic_expression -> logic_function .)


state 44

    (56) value_expression -> algebraic_expression .
    (62) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (64) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (65) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    EQUAL           reduce using rule 56 (value_expression -> algebraic_expression .)
    GREATER         reduce using rule 56 (value_expression -> algebraic_expression .)
    LESS            reduce using rule 56 (value_expression -> algebraic_expression .)
    GREATEREQ       reduce using rule 56 (value_expression -> algebraic_expression .)
    LESSEQ          reduce using rule 56 (value_expression -> algebraic_expression .)
    NEQUAL          reduce using rule 56 (value_expression -> algebraic_expression .)
    COMMA           reduce using rule 56 (value_expression -> algebraic_expression .)
    CPAR            reduce using rule 56 (value_expression -> algebraic_expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    MUL             shift and go to state 81
    DIV             shift and go to state 82


state 45

    (57) value_expression -> numeric_function .
    (61) algebraic_expression -> numeric_function .

  ! reduce/reduce conflict for EQUAL resolved using rule 57 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for GREATER resolved using rule 57 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for LESS resolved using rule 57 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 57 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 57 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 57 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for COMMA resolved using rule 57 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for CPAR resolved using rule 57 (value_expression -> numeric_function .)
    EQUAL           reduce using rule 57 (value_expression -> numeric_function .)
    GREATER         reduce using rule 57 (value_expression -> numeric_function .)
    LESS            reduce using rule 57 (value_expression -> numeric_function .)
    GREATEREQ       reduce using rule 57 (value_expression -> numeric_function .)
    LESSEQ          reduce using rule 57 (value_expression -> numeric_function .)
    NEQUAL          reduce using rule 57 (value_expression -> numeric_function .)
    COMMA           reduce using rule 57 (value_expression -> numeric_function .)
    CPAR            reduce using rule 57 (value_expression -> numeric_function .)
    PLUS            reduce using rule 61 (algebraic_expression -> numeric_function .)
    MINUS           reduce using rule 61 (algebraic_expression -> numeric_function .)
    MUL             reduce using rule 61 (algebraic_expression -> numeric_function .)
    DIV             reduce using rule 61 (algebraic_expression -> numeric_function .)

  ! EQUAL           [ reduce using rule 61 (algebraic_expression -> numeric_function .) ]
  ! GREATER         [ reduce using rule 61 (algebraic_expression -> numeric_function .) ]
  ! LESS            [ reduce using rule 61 (algebraic_expression -> numeric_function .) ]
  ! GREATEREQ       [ reduce using rule 61 (algebraic_expression -> numeric_function .) ]
  ! LESSEQ          [ reduce using rule 61 (algebraic_expression -> numeric_function .) ]
  ! NEQUAL          [ reduce using rule 61 (algebraic_expression -> numeric_function .) ]
  ! COMMA           [ reduce using rule 61 (algebraic_expression -> numeric_function .) ]
  ! CPAR            [ reduce using rule 61 (algebraic_expression -> numeric_function .) ]


state 46

    (71) logic_function -> graph_expression . POINT CONTAIN_VERTEX value_expression
    (72) logic_function -> graph_expression . POINT CONTAIN_EDGES edge_expression
    (68) numeric_function -> graph_expression . POINT NODES_COUNT
    (69) numeric_function -> graph_expression . POINT EDGES_COUNT
    (70) numeric_function -> graph_expression . POINT WEIGHT_SUM
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    POINT           shift and go to state 83
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 47

    (58) algebraic_expression -> INT .

    PLUS            reduce using rule 58 (algebraic_expression -> INT .)
    MINUS           reduce using rule 58 (algebraic_expression -> INT .)
    MUL             reduce using rule 58 (algebraic_expression -> INT .)
    DIV             reduce using rule 58 (algebraic_expression -> INT .)
    EQUAL           reduce using rule 58 (algebraic_expression -> INT .)
    GREATER         reduce using rule 58 (algebraic_expression -> INT .)
    LESS            reduce using rule 58 (algebraic_expression -> INT .)
    GREATEREQ       reduce using rule 58 (algebraic_expression -> INT .)
    LESSEQ          reduce using rule 58 (algebraic_expression -> INT .)
    NEQUAL          reduce using rule 58 (algebraic_expression -> INT .)
    CPAR            reduce using rule 58 (algebraic_expression -> INT .)
    COMMA           reduce using rule 58 (algebraic_expression -> INT .)


state 48

    (59) algebraic_expression -> FLOAT .

    PLUS            reduce using rule 59 (algebraic_expression -> FLOAT .)
    MINUS           reduce using rule 59 (algebraic_expression -> FLOAT .)
    MUL             reduce using rule 59 (algebraic_expression -> FLOAT .)
    DIV             reduce using rule 59 (algebraic_expression -> FLOAT .)
    EQUAL           reduce using rule 59 (algebraic_expression -> FLOAT .)
    GREATER         reduce using rule 59 (algebraic_expression -> FLOAT .)
    LESS            reduce using rule 59 (algebraic_expression -> FLOAT .)
    GREATEREQ       reduce using rule 59 (algebraic_expression -> FLOAT .)
    LESSEQ          reduce using rule 59 (algebraic_expression -> FLOAT .)
    NEQUAL          reduce using rule 59 (algebraic_expression -> FLOAT .)
    CPAR            reduce using rule 59 (algebraic_expression -> FLOAT .)
    COMMA           reduce using rule 59 (algebraic_expression -> FLOAT .)


state 49

    (66) algebraic_expression -> MINUS . algebraic_expression
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    algebraic_expression           shift and go to state 84
    numeric_function               shift and go to state 71
    graph_expression               shift and go to state 85

state 50

    (16) For_vertex_instr -> FORVERTEX ID IN . ID BEGIN Instructions END

    ID              shift and go to state 86


state 51

    (19) Assign_instr -> ID ASSIGN graph_expression .
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    PLOT            reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    IF              reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    FORVERTEX       reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    ID              reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    FOREDGE         reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    K_COLOR_PLOT    reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    WEIGHTED_PLOT   reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    $end            reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    END             reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 52

    (20) Add_vertex_instr -> ID ADD OPAR . vertex_expression CPAR
    (23) Add_edge_instr -> ID ADD OPAR . edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> ID ADD OPAR . vertex_expression COMMA edge_expression CPAR
    (40) vertex_expression -> . vertex_expression INT
    (41) vertex_expression -> . INT
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT CPAR
    (44) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (48) edge_expression -> . empty
    (67) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    INT             shift and go to state 90
    OPAR            shift and go to state 87
    CPAR            reduce using rule 67 (empty -> .)

  ! OPAR            [ reduce using rule 67 (empty -> .) ]

    vertex_expression              shift and go to state 88
    edge_expression                shift and go to state 89
    empty                          shift and go to state 91

state 53

    (17) For_edge_instr -> FOREDGE ID IN . ID BEGIN Instructions END

    ID              shift and go to state 92


state 54

    (21) K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression . CPAR
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 93
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 55

    (22) Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression . CPAR
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 94
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 56

    (25) graph_expression -> OPAR graph_expression . CPAR
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 95
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 57

    (18) Plot_instr -> PLOT OPAR graph_expression CPAR .

    PLOT            reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    IF              reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    ID              reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    $end            reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    END             reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)


state 58

    (34) graph_expression -> graph_expression UNION . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 96

state 59

    (35) graph_expression -> graph_expression INTERSECTION . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 97

state 60

    (36) graph_expression -> graph_expression DIFFERENCE . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 98

state 61

    (37) graph_expression -> graph_expression CONCAT . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 99

state 62

    (26) graph_expression -> KRUSKAL OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 100

state 63

    (27) graph_expression -> PRIM OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 101

state 64

    (28) graph_expression -> BFS OPAR . graph_expression COMMA value_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 102

state 65

    (29) graph_expression -> DIJKSTRA OPAR . graph_expression COMMA value_expression COMMA value_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 103

state 66

    (30) graph_expression -> GRAPH OPAR . value_expression COMMA edge_expression CPAR
    (32) graph_expression -> GRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OBR             shift and go to state 105
    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    value_expression               shift and go to state 104
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45
    graph_expression               shift and go to state 85

state 67

    (31) graph_expression -> DIGRAPH OPAR . value_expression COMMA edge_expression CPAR
    (33) graph_expression -> DIGRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OBR             shift and go to state 107
    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    value_expression               shift and go to state 106
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45
    graph_expression               shift and go to state 85

state 68

    (38) graph_expression -> COMPLEMENT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 108

state 69

    (60) algebraic_expression -> OPAR algebraic_expression . CPAR
    (62) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (64) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (65) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    CPAR            shift and go to state 109
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    MUL             shift and go to state 81
    DIV             shift and go to state 82


state 70

    (25) graph_expression -> OPAR graph_expression . CPAR
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression
    (68) numeric_function -> graph_expression . POINT NODES_COUNT
    (69) numeric_function -> graph_expression . POINT EDGES_COUNT
    (70) numeric_function -> graph_expression . POINT WEIGHT_SUM

    CPAR            shift and go to state 95
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61
    POINT           shift and go to state 110


state 71

    (61) algebraic_expression -> numeric_function .

    CPAR            reduce using rule 61 (algebraic_expression -> numeric_function .)
    PLUS            reduce using rule 61 (algebraic_expression -> numeric_function .)
    MINUS           reduce using rule 61 (algebraic_expression -> numeric_function .)
    MUL             reduce using rule 61 (algebraic_expression -> numeric_function .)
    DIV             reduce using rule 61 (algebraic_expression -> numeric_function .)
    EQUAL           reduce using rule 61 (algebraic_expression -> numeric_function .)
    GREATER         reduce using rule 61 (algebraic_expression -> numeric_function .)
    LESS            reduce using rule 61 (algebraic_expression -> numeric_function .)
    GREATEREQ       reduce using rule 61 (algebraic_expression -> numeric_function .)
    LESSEQ          reduce using rule 61 (algebraic_expression -> numeric_function .)
    NEQUAL          reduce using rule 61 (algebraic_expression -> numeric_function .)
    COMMA           reduce using rule 61 (algebraic_expression -> numeric_function .)


state 72

    (14) If_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END
    (15) If_else_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END ELSE BEGIN Instructions END

    BEGIN           shift and go to state 111


state 73

    (49) logic_expression -> value_expression EQUAL . value_expression
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    value_expression               shift and go to state 112
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45
    graph_expression               shift and go to state 85

state 74

    (50) logic_expression -> value_expression GREATER . value_expression
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    value_expression               shift and go to state 113
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45
    graph_expression               shift and go to state 85

state 75

    (51) logic_expression -> value_expression LESS . value_expression
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    value_expression               shift and go to state 114
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45
    graph_expression               shift and go to state 85

state 76

    (52) logic_expression -> value_expression GREATEREQ . value_expression
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    value_expression               shift and go to state 115
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45
    graph_expression               shift and go to state 85

state 77

    (53) logic_expression -> value_expression LESSEQ . value_expression
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    value_expression               shift and go to state 116
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45
    graph_expression               shift and go to state 85

state 78

    (54) logic_expression -> value_expression NEQUAL . value_expression
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    value_expression               shift and go to state 117
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45
    graph_expression               shift and go to state 85

state 79

    (62) algebraic_expression -> algebraic_expression PLUS . algebraic_expression
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    algebraic_expression           shift and go to state 118
    numeric_function               shift and go to state 71
    graph_expression               shift and go to state 85

state 80

    (63) algebraic_expression -> algebraic_expression MINUS . algebraic_expression
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    algebraic_expression           shift and go to state 119
    numeric_function               shift and go to state 71
    graph_expression               shift and go to state 85

state 81

    (64) algebraic_expression -> algebraic_expression MUL . algebraic_expression
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    algebraic_expression           shift and go to state 120
    numeric_function               shift and go to state 71
    graph_expression               shift and go to state 85

state 82

    (65) algebraic_expression -> algebraic_expression DIV . algebraic_expression
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    algebraic_expression           shift and go to state 121
    numeric_function               shift and go to state 71
    graph_expression               shift and go to state 85

state 83

    (71) logic_function -> graph_expression POINT . CONTAIN_VERTEX value_expression
    (72) logic_function -> graph_expression POINT . CONTAIN_EDGES edge_expression
    (68) numeric_function -> graph_expression POINT . NODES_COUNT
    (69) numeric_function -> graph_expression POINT . EDGES_COUNT
    (70) numeric_function -> graph_expression POINT . WEIGHT_SUM

    CONTAIN_VERTEX  shift and go to state 122
    CONTAIN_EDGES   shift and go to state 123
    NODES_COUNT     shift and go to state 124
    EDGES_COUNT     shift and go to state 125
    WEIGHT_SUM      shift and go to state 126


state 84

    (66) algebraic_expression -> MINUS algebraic_expression .
    (62) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (64) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (65) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)
    MINUS           reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)
    MUL             reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)
    DIV             reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)
    EQUAL           reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)
    GREATER         reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)
    LESS            reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)
    LESSEQ          reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)
    NEQUAL          reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)
    CPAR            reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)
    COMMA           reduce using rule 66 (algebraic_expression -> MINUS algebraic_expression .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! MUL             [ shift and go to state 81 ]
  ! DIV             [ shift and go to state 82 ]


state 85

    (68) numeric_function -> graph_expression . POINT NODES_COUNT
    (69) numeric_function -> graph_expression . POINT EDGES_COUNT
    (70) numeric_function -> graph_expression . POINT WEIGHT_SUM
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    POINT           shift and go to state 110
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 86

    (16) For_vertex_instr -> FORVERTEX ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 127


state 87

    (43) edge_expression -> OPAR . INT COMMA INT CPAR
    (45) edge_expression -> OPAR . INT COMMA INT COMMA INT CPAR
    (47) edge_expression -> OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 128


state 88

    (20) Add_vertex_instr -> ID ADD OPAR vertex_expression . CPAR
    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression . COMMA edge_expression CPAR
    (40) vertex_expression -> vertex_expression . INT

    CPAR            shift and go to state 129
    COMMA           shift and go to state 130
    INT             shift and go to state 131


state 89

    (23) Add_edge_instr -> ID ADD OPAR edge_expression . CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (44) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 133
    OPAR            shift and go to state 132


state 90

    (41) vertex_expression -> INT .

    CPAR            reduce using rule 41 (vertex_expression -> INT .)
    COMMA           reduce using rule 41 (vertex_expression -> INT .)
    INT             reduce using rule 41 (vertex_expression -> INT .)
    CBR             reduce using rule 41 (vertex_expression -> INT .)


state 91

    (48) edge_expression -> empty .

    CPAR            reduce using rule 48 (edge_expression -> empty .)
    OPAR            reduce using rule 48 (edge_expression -> empty .)


state 92

    (17) For_edge_instr -> FOREDGE ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 134


state 93

    (21) K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .

    PLOT            reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    IF              reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    ID              reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    $end            reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    END             reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)


state 94

    (22) Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .

    PLOT            reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    IF              reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    ID              reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    $end            reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    END             reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)


state 95

    (25) graph_expression -> OPAR graph_expression CPAR .

    CPAR            reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    UNION           reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    POINT           reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    PLOT            reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    IF              reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    ID              reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    $end            reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    END             reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    COMMA           reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)


state 96

    (34) graph_expression -> graph_expression UNION graph_expression .
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    UNION           reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    INTERSECTION    reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    DIFFERENCE      reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    CONCAT          reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    POINT           reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    PLOT            reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    IF              reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    FORVERTEX       reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    ID              reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    FOREDGE         reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    K_COLOR_PLOT    reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    WEIGHTED_PLOT   reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    $end            reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    END             reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)
    COMMA           reduce using rule 34 (graph_expression -> graph_expression UNION graph_expression .)

  ! UNION           [ shift and go to state 58 ]
  ! INTERSECTION    [ shift and go to state 59 ]
  ! DIFFERENCE      [ shift and go to state 60 ]
  ! CONCAT          [ shift and go to state 61 ]


state 97

    (35) graph_expression -> graph_expression INTERSECTION graph_expression .
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    UNION           reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    INTERSECTION    reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    DIFFERENCE      reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    CONCAT          reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    POINT           reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    PLOT            reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    IF              reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FORVERTEX       reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    ID              reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FOREDGE         reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    K_COLOR_PLOT    reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    WEIGHTED_PLOT   reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    $end            reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    END             reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    COMMA           reduce using rule 35 (graph_expression -> graph_expression INTERSECTION graph_expression .)

  ! UNION           [ shift and go to state 58 ]
  ! INTERSECTION    [ shift and go to state 59 ]
  ! DIFFERENCE      [ shift and go to state 60 ]
  ! CONCAT          [ shift and go to state 61 ]


state 98

    (36) graph_expression -> graph_expression DIFFERENCE graph_expression .
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    UNION           reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    INTERSECTION    reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    DIFFERENCE      reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    CONCAT          reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    POINT           reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    PLOT            reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    IF              reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FORVERTEX       reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    ID              reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FOREDGE         reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    K_COLOR_PLOT    reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    WEIGHTED_PLOT   reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    $end            reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    END             reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    COMMA           reduce using rule 36 (graph_expression -> graph_expression DIFFERENCE graph_expression .)

  ! UNION           [ shift and go to state 58 ]
  ! INTERSECTION    [ shift and go to state 59 ]
  ! DIFFERENCE      [ shift and go to state 60 ]
  ! CONCAT          [ shift and go to state 61 ]


state 99

    (37) graph_expression -> graph_expression CONCAT graph_expression .
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    CONCAT          reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    POINT           reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    PLOT            reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    IF              reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    FORVERTEX       reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    ID              reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    FOREDGE         reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    K_COLOR_PLOT    reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    WEIGHTED_PLOT   reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    $end            reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    END             reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    COMMA           reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .)
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60

  ! UNION           [ reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! DIFFERENCE      [ reduce using rule 37 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! CONCAT          [ shift and go to state 61 ]


state 100

    (26) graph_expression -> KRUSKAL OPAR graph_expression . CPAR
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 135
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 101

    (27) graph_expression -> PRIM OPAR graph_expression . CPAR
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 136
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 102

    (28) graph_expression -> BFS OPAR graph_expression . COMMA value_expression CPAR
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    COMMA           shift and go to state 137
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 103

    (29) graph_expression -> DIJKSTRA OPAR graph_expression . COMMA value_expression COMMA value_expression CPAR
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    COMMA           shift and go to state 138
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 104

    (30) graph_expression -> GRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 139


state 105

    (32) graph_expression -> GRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (40) vertex_expression -> . vertex_expression INT
    (41) vertex_expression -> . INT

    INT             shift and go to state 90

    vertex_expression              shift and go to state 140

state 106

    (31) graph_expression -> DIGRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 141


state 107

    (33) graph_expression -> DIGRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (40) vertex_expression -> . vertex_expression INT
    (41) vertex_expression -> . INT

    INT             shift and go to state 90

    vertex_expression              shift and go to state 142

state 108

    (38) graph_expression -> COMPLEMENT OPAR graph_expression . CPAR
    (34) graph_expression -> graph_expression . UNION graph_expression
    (35) graph_expression -> graph_expression . INTERSECTION graph_expression
    (36) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (37) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 143
    UNION           shift and go to state 58
    INTERSECTION    shift and go to state 59
    DIFFERENCE      shift and go to state 60
    CONCAT          shift and go to state 61


state 109

    (60) algebraic_expression -> OPAR algebraic_expression CPAR .

    PLUS            reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    MINUS           reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    MUL             reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    DIV             reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    EQUAL           reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    GREATER         reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    LESS            reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    GREATEREQ       reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    LESSEQ          reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    NEQUAL          reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    CPAR            reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    COMMA           reduce using rule 60 (algebraic_expression -> OPAR algebraic_expression CPAR .)


state 110

    (68) numeric_function -> graph_expression POINT . NODES_COUNT
    (69) numeric_function -> graph_expression POINT . EDGES_COUNT
    (70) numeric_function -> graph_expression POINT . WEIGHT_SUM

    NODES_COUNT     shift and go to state 124
    EDGES_COUNT     shift and go to state 125
    WEIGHT_SUM      shift and go to state 126


state 111

    (14) If_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END
    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END ELSE BEGIN Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 144
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 112

    (49) logic_expression -> value_expression EQUAL value_expression .

    CPAR            reduce using rule 49 (logic_expression -> value_expression EQUAL value_expression .)


state 113

    (50) logic_expression -> value_expression GREATER value_expression .

    CPAR            reduce using rule 50 (logic_expression -> value_expression GREATER value_expression .)


state 114

    (51) logic_expression -> value_expression LESS value_expression .

    CPAR            reduce using rule 51 (logic_expression -> value_expression LESS value_expression .)


state 115

    (52) logic_expression -> value_expression GREATEREQ value_expression .

    CPAR            reduce using rule 52 (logic_expression -> value_expression GREATEREQ value_expression .)


state 116

    (53) logic_expression -> value_expression LESSEQ value_expression .

    CPAR            reduce using rule 53 (logic_expression -> value_expression LESSEQ value_expression .)


state 117

    (54) logic_expression -> value_expression NEQUAL value_expression .

    CPAR            reduce using rule 54 (logic_expression -> value_expression NEQUAL value_expression .)


state 118

    (62) algebraic_expression -> algebraic_expression PLUS algebraic_expression .
    (62) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (64) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (65) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MINUS           reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    EQUAL           reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATER         reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESS            reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATEREQ       reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESSEQ          reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    NEQUAL          reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    CPAR            reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    COMMA           reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MUL             shift and go to state 81
    DIV             shift and go to state 82

  ! MUL             [ reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 62 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]


state 119

    (63) algebraic_expression -> algebraic_expression MINUS algebraic_expression .
    (62) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (64) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (65) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MINUS           reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    EQUAL           reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATER         reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESS            reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESSEQ          reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    NEQUAL          reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    CPAR            reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    COMMA           reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MUL             shift and go to state 81
    DIV             shift and go to state 82

  ! MUL             [ reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 63 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]


state 120

    (64) algebraic_expression -> algebraic_expression MUL algebraic_expression .
    (62) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (64) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (65) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MINUS           reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MUL             reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    DIV             reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    EQUAL           reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATER         reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESS            reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATEREQ       reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESSEQ          reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    NEQUAL          reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    CPAR            reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    COMMA           reduce using rule 64 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! MUL             [ shift and go to state 81 ]
  ! DIV             [ shift and go to state 82 ]


state 121

    (65) algebraic_expression -> algebraic_expression DIV algebraic_expression .
    (62) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (64) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (65) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MINUS           reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MUL             reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    DIV             reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    EQUAL           reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATER         reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESS            reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATEREQ       reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESSEQ          reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    NEQUAL          reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    CPAR            reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    COMMA           reduce using rule 65 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! MUL             [ shift and go to state 81 ]
  ! DIV             [ shift and go to state 82 ]


state 122

    (71) logic_function -> graph_expression POINT CONTAIN_VERTEX . value_expression
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 85
    value_expression               shift and go to state 145
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45

state 123

    (72) logic_function -> graph_expression POINT CONTAIN_EDGES . edge_expression
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT CPAR
    (44) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (48) edge_expression -> . empty
    (67) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 87
    CPAR            reduce using rule 67 (empty -> .)

  ! OPAR            [ reduce using rule 67 (empty -> .) ]

    edge_expression                shift and go to state 146
    empty                          shift and go to state 91

state 124

    (68) numeric_function -> graph_expression POINT NODES_COUNT .

    EQUAL           reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)
    GREATER         reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)
    LESS            reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)
    GREATEREQ       reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)
    LESSEQ          reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)
    NEQUAL          reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)
    PLUS            reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)
    MINUS           reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)
    MUL             reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)
    DIV             reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)
    CPAR            reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)
    COMMA           reduce using rule 68 (numeric_function -> graph_expression POINT NODES_COUNT .)


state 125

    (69) numeric_function -> graph_expression POINT EDGES_COUNT .

    EQUAL           reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    GREATER         reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    LESS            reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    GREATEREQ       reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    LESSEQ          reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    NEQUAL          reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    PLUS            reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    MINUS           reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    MUL             reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    DIV             reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    CPAR            reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    COMMA           reduce using rule 69 (numeric_function -> graph_expression POINT EDGES_COUNT .)


state 126

    (70) numeric_function -> graph_expression POINT WEIGHT_SUM .

    EQUAL           reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    GREATER         reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    LESS            reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    GREATEREQ       reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    LESSEQ          reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    NEQUAL          reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    PLUS            reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    MINUS           reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    MUL             reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    DIV             reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    CPAR            reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    COMMA           reduce using rule 70 (numeric_function -> graph_expression POINT WEIGHT_SUM .)


state 127

    (16) For_vertex_instr -> FORVERTEX ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 147
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 128

    (43) edge_expression -> OPAR INT . COMMA INT CPAR
    (45) edge_expression -> OPAR INT . COMMA INT COMMA INT CPAR
    (47) edge_expression -> OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 148


state 129

    (20) Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .

    PLOT            reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    IF              reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FORVERTEX       reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    ID              reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FOREDGE         reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    $end            reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    END             reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)


state 130

    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA . edge_expression CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT CPAR
    (44) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (48) edge_expression -> . empty
    (67) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 87
    CPAR            reduce using rule 67 (empty -> .)

  ! OPAR            [ reduce using rule 67 (empty -> .) ]

    edge_expression                shift and go to state 149
    empty                          shift and go to state 91

state 131

    (40) vertex_expression -> vertex_expression INT .

    CPAR            reduce using rule 40 (vertex_expression -> vertex_expression INT .)
    COMMA           reduce using rule 40 (vertex_expression -> vertex_expression INT .)
    INT             reduce using rule 40 (vertex_expression -> vertex_expression INT .)
    CBR             reduce using rule 40 (vertex_expression -> vertex_expression INT .)


state 132

    (42) edge_expression -> edge_expression OPAR . INT COMMA INT CPAR
    (44) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 150


state 133

    (23) Add_edge_instr -> ID ADD OPAR edge_expression CPAR .

    PLOT            reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    IF              reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FORVERTEX       reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    ID              reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FOREDGE         reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    $end            reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    END             reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)


state 134

    (17) For_edge_instr -> FOREDGE ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 151
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 135

    (26) graph_expression -> KRUSKAL OPAR graph_expression CPAR .

    CPAR            reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    UNION           reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    POINT           reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    PLOT            reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    IF              reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    ID              reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    $end            reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    END             reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    COMMA           reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)


state 136

    (27) graph_expression -> PRIM OPAR graph_expression CPAR .

    CPAR            reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    UNION           reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    POINT           reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    PLOT            reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    IF              reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    ID              reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    $end            reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    END             reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    COMMA           reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)


state 137

    (28) graph_expression -> BFS OPAR graph_expression COMMA . value_expression CPAR
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 85
    value_expression               shift and go to state 152
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45

state 138

    (29) graph_expression -> DIJKSTRA OPAR graph_expression COMMA . value_expression COMMA value_expression CPAR
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 85
    value_expression               shift and go to state 153
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45

state 139

    (30) graph_expression -> GRAPH OPAR value_expression COMMA . edge_expression CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT CPAR
    (44) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (48) edge_expression -> . empty
    (67) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 87
    CPAR            reduce using rule 67 (empty -> .)

  ! OPAR            [ reduce using rule 67 (empty -> .) ]

    edge_expression                shift and go to state 154
    empty                          shift and go to state 91

state 140

    (32) graph_expression -> GRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (40) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 155
    INT             shift and go to state 131


state 141

    (31) graph_expression -> DIGRAPH OPAR value_expression COMMA . edge_expression CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT CPAR
    (44) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (48) edge_expression -> . empty
    (67) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 87
    CPAR            reduce using rule 67 (empty -> .)

  ! OPAR            [ reduce using rule 67 (empty -> .) ]

    edge_expression                shift and go to state 156
    empty                          shift and go to state 91

state 142

    (33) graph_expression -> DIGRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (40) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 157
    INT             shift and go to state 131


state 143

    (38) graph_expression -> COMPLEMENT OPAR graph_expression CPAR .

    CPAR            reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    UNION           reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    POINT           reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    PLOT            reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    IF              reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    ID              reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    $end            reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    END             reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    COMMA           reduce using rule 38 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)


state 144

    (14) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END
    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END ELSE BEGIN Instructions END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 158
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 145

    (71) logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression .

    CPAR            reduce using rule 71 (logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression .)


state 146

    (72) logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression .
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (44) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            reduce using rule 72 (logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression .)
    OPAR            shift and go to state 132


state 147

    (16) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 159
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 148

    (43) edge_expression -> OPAR INT COMMA . INT CPAR
    (45) edge_expression -> OPAR INT COMMA . INT COMMA INT CPAR
    (47) edge_expression -> OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 160


state 149

    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression . CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (44) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 161
    OPAR            shift and go to state 132


state 150

    (42) edge_expression -> edge_expression OPAR INT . COMMA INT CPAR
    (44) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA INT CPAR
    (46) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 162


state 151

    (17) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 163
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 152

    (28) graph_expression -> BFS OPAR graph_expression COMMA value_expression . CPAR

    CPAR            shift and go to state 164


state 153

    (29) graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression . COMMA value_expression CPAR

    COMMA           shift and go to state 165


state 154

    (30) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression . CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (44) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 166
    OPAR            shift and go to state 132


state 155

    (32) graph_expression -> GRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 167


state 156

    (31) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression . CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (44) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 168
    OPAR            shift and go to state 132


state 157

    (33) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 169


state 158

    (14) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .
    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END . ELSE BEGIN Instructions END

    PLOT            reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    IF              reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FORVERTEX       reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ID              reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FOREDGE         reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    $end            reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    END             reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ELSE            shift and go to state 170


state 159

    (16) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    END             reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)


state 160

    (43) edge_expression -> OPAR INT COMMA INT . CPAR
    (45) edge_expression -> OPAR INT COMMA INT . COMMA INT CPAR
    (47) edge_expression -> OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 172
    COMMA           shift and go to state 171


state 161

    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .

    PLOT            reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    END             reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)


state 162

    (42) edge_expression -> edge_expression OPAR INT COMMA . INT CPAR
    (44) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA INT CPAR
    (46) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 173


state 163

    (17) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    END             reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)


state 164

    (28) graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .

    CPAR            reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    UNION           reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    INTERSECTION    reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    DIFFERENCE      reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    CONCAT          reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    POINT           reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    PLOT            reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    IF              reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    FORVERTEX       reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    ID              reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    FOREDGE         reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    $end            reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    END             reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    COMMA           reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)


state 165

    (29) graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA . value_expression CPAR
    (56) value_expression -> . algebraic_expression
    (57) value_expression -> . numeric_function
    (58) algebraic_expression -> . INT
    (59) algebraic_expression -> . FLOAT
    (60) algebraic_expression -> . OPAR algebraic_expression CPAR
    (61) algebraic_expression -> . numeric_function
    (62) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (64) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (65) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (66) algebraic_expression -> . MINUS algebraic_expression
    (68) numeric_function -> . graph_expression POINT NODES_COUNT
    (69) numeric_function -> . graph_expression POINT EDGES_COUNT
    (70) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR
    (30) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (34) graph_expression -> . graph_expression UNION graph_expression
    (35) graph_expression -> . graph_expression INTERSECTION graph_expression
    (36) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (37) graph_expression -> . graph_expression CONCAT graph_expression
    (38) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (39) graph_expression -> . ID

    INT             shift and go to state 47
    FLOAT           shift and go to state 48
    OPAR            shift and go to state 40
    MINUS           shift and go to state 49
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    DIJKSTRA        shift and go to state 35
    GRAPH           shift and go to state 36
    DIGRAPH         shift and go to state 37
    COMPLEMENT      shift and go to state 38
    ID              shift and go to state 39

    graph_expression               shift and go to state 85
    value_expression               shift and go to state 174
    algebraic_expression           shift and go to state 44
    numeric_function               shift and go to state 45

state 166

    (30) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .

    CPAR            reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    UNION           reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    COMMA           reduce using rule 30 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 167

    (32) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT CPAR
    (44) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (48) edge_expression -> . empty
    (67) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 87
    CPAR            reduce using rule 67 (empty -> .)

  ! OPAR            [ reduce using rule 67 (empty -> .) ]

    edge_expression                shift and go to state 175
    empty                          shift and go to state 91

state 168

    (31) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .

    CPAR            reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    UNION           reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    COMMA           reduce using rule 31 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 169

    (33) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT CPAR
    (44) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (48) edge_expression -> . empty
    (67) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 87
    CPAR            reduce using rule 67 (empty -> .)

  ! OPAR            [ reduce using rule 67 (empty -> .) ]

    edge_expression                shift and go to state 176
    empty                          shift and go to state 91

state 170

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE . BEGIN Instructions END

    BEGIN           shift and go to state 177


state 171

    (45) edge_expression -> OPAR INT COMMA INT COMMA . INT CPAR
    (47) edge_expression -> OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 178
    FLOAT           shift and go to state 179


state 172

    (43) edge_expression -> OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 43 (edge_expression -> OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 43 (edge_expression -> OPAR INT COMMA INT CPAR .)


state 173

    (42) edge_expression -> edge_expression OPAR INT COMMA INT . CPAR
    (44) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA INT CPAR
    (46) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 181
    COMMA           shift and go to state 180


state 174

    (29) graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression . CPAR

    CPAR            shift and go to state 182


state 175

    (32) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (44) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 183
    OPAR            shift and go to state 132


state 176

    (33) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (44) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 184
    OPAR            shift and go to state 132


state 177

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 185
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 178

    (45) edge_expression -> OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 186


state 179

    (47) edge_expression -> OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 187


state 180

    (44) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . INT CPAR
    (46) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 188
    FLOAT           shift and go to state 189


state 181

    (42) edge_expression -> edge_expression OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 42 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 42 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)


state 182

    (29) graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .

    CPAR            reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    UNION           reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    INTERSECTION    reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    DIFFERENCE      reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    CONCAT          reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    POINT           reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    PLOT            reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    IF              reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    FORVERTEX       reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    ID              reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    FOREDGE         reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    $end            reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    END             reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)
    COMMA           reduce using rule 29 (graph_expression -> DIJKSTRA OPAR graph_expression COMMA value_expression COMMA value_expression CPAR .)


state 183

    (32) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    CPAR            reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    UNION           reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    COMMA           reduce using rule 32 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 184

    (33) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    CPAR            reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    UNION           reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    COMMA           reduce using rule 33 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 185

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 190
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 186

    (45) edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 45 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 45 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)


state 187

    (47) edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 47 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 47 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 188

    (44) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 191


state 189

    (46) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 192


state 190

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .

    PLOT            reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    IF              reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FORVERTEX       reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    ID              reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FOREDGE         reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    $end            reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    END             reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)


state 191

    (44) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 44 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 44 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)


state 192

    (46) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 46 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 46 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPAR in state 52 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 123 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 130 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 139 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 141 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 167 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 169 resolved as shift
WARNING: reduce/reduce conflict in state 45 resolved using rule (value_expression -> numeric_function)
WARNING: rejected rule (algebraic_expression -> numeric_function) in state 45
