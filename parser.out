Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EDGE
    ELIF
    MULTIGRAPH
    PSEUDOGRAPH
    STRING

Grammar

Rule 0     S' -> Instructions
Rule 1     Instructions -> Instructions Instruction
Rule 2     Instructions -> Instruction
Rule 3     Instruction -> Plot_instr
Rule 4     Instruction -> If_instr
Rule 5     Instruction -> If_else_instr
Rule 6     Instruction -> For_vertex_instr
Rule 7     Instruction -> Assign_instr
Rule 8     Instruction -> For_edge_instr
Rule 9     Instruction -> Add_vertex_instr
Rule 10    Instruction -> Add_edge_instr
Rule 11    Instruction -> Add_vertex_and_edge_instr
Rule 12    Instruction -> K_color_plot_instr
Rule 13    Instruction -> Weighted_plt_instr
Rule 14    If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END
Rule 15    If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
Rule 16    For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END
Rule 17    For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END
Rule 18    Plot_instr -> PLOT OPAR graph_expression CPAR
Rule 19    Assign_instr -> ID ASSIGN graph_expression
Rule 20    Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR
Rule 21    K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR
Rule 22    Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR
Rule 23    Add_edge_instr -> ID ADD OPAR edge_expression CPAR
Rule 24    Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR
Rule 25    graph_expression -> OPAR graph_expression CPAR
Rule 26    graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 27    graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 28    graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 29    graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 30    graph_expression -> graph_expression UNION graph_expression
Rule 31    graph_expression -> graph_expression INTERSECTION graph_expression
Rule 32    graph_expression -> graph_expression DIFFERENCE graph_expression
Rule 33    graph_expression -> graph_expression CONCAT graph_expression
Rule 34    graph_expression -> COMPLEMENT OPAR graph_expression CPAR
Rule 35    graph_expression -> ID
Rule 36    vertex_expression -> vertex_expression INT
Rule 37    vertex_expression -> INT
Rule 38    edge_expression -> edge_expression OPAR INT COMMA INT CPAR
Rule 39    edge_expression -> OPAR INT COMMA INT CPAR
Rule 40    edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR
Rule 41    edge_expression -> OPAR INT COMMA INT COMMA INT CPAR
Rule 42    edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 43    edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 44    edge_expression -> empty
Rule 45    logic_expression -> value_expression EQUAL value_expression
Rule 46    logic_expression -> value_expression GREATER value_expression
Rule 47    logic_expression -> value_expression LESS value_expression
Rule 48    logic_expression -> value_expression GREATEREQ value_expression
Rule 49    logic_expression -> value_expression LESSEQ value_expression
Rule 50    logic_expression -> value_expression NEQUAL value_expression
Rule 51    logic_expression -> logic_function
Rule 52    value_expression -> algebraic_expression
Rule 53    value_expression -> numeric_function
Rule 54    algebraic_expression -> INT
Rule 55    algebraic_expression -> FLOAT
Rule 56    algebraic_expression -> OPAR algebraic_expression CPAR
Rule 57    algebraic_expression -> numeric_function
Rule 58    algebraic_expression -> algebraic_expression PLUS algebraic_expression
Rule 59    algebraic_expression -> algebraic_expression MINUS algebraic_expression
Rule 60    algebraic_expression -> algebraic_expression MUL algebraic_expression
Rule 61    algebraic_expression -> algebraic_expression DIV algebraic_expression
Rule 62    algebraic_expression -> MINUS algebraic_expression
Rule 63    empty -> <empty>
Rule 64    numeric_function -> graph_expression POINT NODES_COUNT
Rule 65    numeric_function -> graph_expression POINT EDGES_COUNT
Rule 66    numeric_function -> graph_expression POINT WEIGHT_SUM
Rule 67    logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression
Rule 68    logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression

Terminals, with rules where they appear

ADD                  : 20 23 24
ASSIGN               : 19
BEGIN                : 14 15 15 16 17
CBR                  : 28 29
COMMA                : 24 26 27 28 29 38 39 40 40 41 41 42 42 43 43
COMPLEMENT           : 34
CONCAT               : 33
CONTAIN_EDGES        : 68
CONTAIN_VERTEX       : 67
CPAR                 : 14 15 18 20 21 22 23 24 25 26 27 28 29 34 38 39 40 41 42 43 56
DIFFERENCE           : 32
DIGRAPH              : 27 29
DIV                  : 61
EDGE                 : 
EDGES_COUNT          : 65
ELIF                 : 
ELSE                 : 15
END                  : 14 15 15 16 17
EQUAL                : 45
FLOAT                : 42 43 55
FOREDGE              : 17
FORVERTEX            : 16
GRAPH                : 26 28
GREATER              : 46
GREATEREQ            : 48
ID                   : 16 16 17 17 19 20 23 24 35
IF                   : 14 15
IN                   : 16 17
INT                  : 36 37 38 38 39 39 40 40 40 41 41 41 42 42 43 43 54
INTERSECTION         : 31
K_COLOR_PLOT         : 21
LESS                 : 47
LESSEQ               : 49
MINUS                : 59 62
MUL                  : 60
MULTIGRAPH           : 
NEQUAL               : 50
NODES_COUNT          : 64
OBR                  : 28 29
OPAR                 : 14 15 18 20 21 22 23 24 25 26 27 28 29 34 38 39 40 41 42 43 56
PLOT                 : 18
PLUS                 : 58
POINT                : 64 65 66 67 68
PSEUDOGRAPH          : 
STRING               : 
UNION                : 30
WEIGHTED_PLOT        : 22
WEIGHT_SUM           : 66
error                : 

Nonterminals, with rules where they appear

Add_edge_instr       : 10
Add_vertex_and_edge_instr : 11
Add_vertex_instr     : 9
Assign_instr         : 7
For_edge_instr       : 8
For_vertex_instr     : 6
If_else_instr        : 5
If_instr             : 4
Instruction          : 1 2
Instructions         : 1 14 15 15 16 17 0
K_color_plot_instr   : 12
Plot_instr           : 3
Weighted_plt_instr   : 13
algebraic_expression : 52 56 58 58 59 59 60 60 61 61 62
edge_expression      : 23 24 26 27 28 29 38 40 42 68
empty                : 44
graph_expression     : 18 19 21 22 25 30 30 31 31 32 32 33 33 34 64 65 66 67 68
logic_expression     : 14 15
logic_function       : 51
numeric_function     : 53 57
value_expression     : 26 27 45 45 46 46 47 47 48 48 49 49 50 50 67
vertex_expression    : 20 24 28 29 36

Parsing method: LALR

state 0

    (0) S' -> . Instructions
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 1
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 1

    (0) S' -> Instructions .
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 2

    (2) Instructions -> Instruction .

    PLOT            reduce using rule 2 (Instructions -> Instruction .)
    IF              reduce using rule 2 (Instructions -> Instruction .)
    FORVERTEX       reduce using rule 2 (Instructions -> Instruction .)
    ID              reduce using rule 2 (Instructions -> Instruction .)
    FOREDGE         reduce using rule 2 (Instructions -> Instruction .)
    K_COLOR_PLOT    reduce using rule 2 (Instructions -> Instruction .)
    WEIGHTED_PLOT   reduce using rule 2 (Instructions -> Instruction .)
    $end            reduce using rule 2 (Instructions -> Instruction .)
    END             reduce using rule 2 (Instructions -> Instruction .)


state 3

    (3) Instruction -> Plot_instr .

    PLOT            reduce using rule 3 (Instruction -> Plot_instr .)
    IF              reduce using rule 3 (Instruction -> Plot_instr .)
    FORVERTEX       reduce using rule 3 (Instruction -> Plot_instr .)
    ID              reduce using rule 3 (Instruction -> Plot_instr .)
    FOREDGE         reduce using rule 3 (Instruction -> Plot_instr .)
    K_COLOR_PLOT    reduce using rule 3 (Instruction -> Plot_instr .)
    WEIGHTED_PLOT   reduce using rule 3 (Instruction -> Plot_instr .)
    $end            reduce using rule 3 (Instruction -> Plot_instr .)
    END             reduce using rule 3 (Instruction -> Plot_instr .)


state 4

    (4) Instruction -> If_instr .

    PLOT            reduce using rule 4 (Instruction -> If_instr .)
    IF              reduce using rule 4 (Instruction -> If_instr .)
    FORVERTEX       reduce using rule 4 (Instruction -> If_instr .)
    ID              reduce using rule 4 (Instruction -> If_instr .)
    FOREDGE         reduce using rule 4 (Instruction -> If_instr .)
    K_COLOR_PLOT    reduce using rule 4 (Instruction -> If_instr .)
    WEIGHTED_PLOT   reduce using rule 4 (Instruction -> If_instr .)
    $end            reduce using rule 4 (Instruction -> If_instr .)
    END             reduce using rule 4 (Instruction -> If_instr .)


state 5

    (5) Instruction -> If_else_instr .

    PLOT            reduce using rule 5 (Instruction -> If_else_instr .)
    IF              reduce using rule 5 (Instruction -> If_else_instr .)
    FORVERTEX       reduce using rule 5 (Instruction -> If_else_instr .)
    ID              reduce using rule 5 (Instruction -> If_else_instr .)
    FOREDGE         reduce using rule 5 (Instruction -> If_else_instr .)
    K_COLOR_PLOT    reduce using rule 5 (Instruction -> If_else_instr .)
    WEIGHTED_PLOT   reduce using rule 5 (Instruction -> If_else_instr .)
    $end            reduce using rule 5 (Instruction -> If_else_instr .)
    END             reduce using rule 5 (Instruction -> If_else_instr .)


state 6

    (6) Instruction -> For_vertex_instr .

    PLOT            reduce using rule 6 (Instruction -> For_vertex_instr .)
    IF              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FORVERTEX       reduce using rule 6 (Instruction -> For_vertex_instr .)
    ID              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FOREDGE         reduce using rule 6 (Instruction -> For_vertex_instr .)
    K_COLOR_PLOT    reduce using rule 6 (Instruction -> For_vertex_instr .)
    WEIGHTED_PLOT   reduce using rule 6 (Instruction -> For_vertex_instr .)
    $end            reduce using rule 6 (Instruction -> For_vertex_instr .)
    END             reduce using rule 6 (Instruction -> For_vertex_instr .)


state 7

    (7) Instruction -> Assign_instr .

    PLOT            reduce using rule 7 (Instruction -> Assign_instr .)
    IF              reduce using rule 7 (Instruction -> Assign_instr .)
    FORVERTEX       reduce using rule 7 (Instruction -> Assign_instr .)
    ID              reduce using rule 7 (Instruction -> Assign_instr .)
    FOREDGE         reduce using rule 7 (Instruction -> Assign_instr .)
    K_COLOR_PLOT    reduce using rule 7 (Instruction -> Assign_instr .)
    WEIGHTED_PLOT   reduce using rule 7 (Instruction -> Assign_instr .)
    $end            reduce using rule 7 (Instruction -> Assign_instr .)
    END             reduce using rule 7 (Instruction -> Assign_instr .)


state 8

    (8) Instruction -> For_edge_instr .

    PLOT            reduce using rule 8 (Instruction -> For_edge_instr .)
    IF              reduce using rule 8 (Instruction -> For_edge_instr .)
    FORVERTEX       reduce using rule 8 (Instruction -> For_edge_instr .)
    ID              reduce using rule 8 (Instruction -> For_edge_instr .)
    FOREDGE         reduce using rule 8 (Instruction -> For_edge_instr .)
    K_COLOR_PLOT    reduce using rule 8 (Instruction -> For_edge_instr .)
    WEIGHTED_PLOT   reduce using rule 8 (Instruction -> For_edge_instr .)
    $end            reduce using rule 8 (Instruction -> For_edge_instr .)
    END             reduce using rule 8 (Instruction -> For_edge_instr .)


state 9

    (9) Instruction -> Add_vertex_instr .

    PLOT            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    IF              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FORVERTEX       reduce using rule 9 (Instruction -> Add_vertex_instr .)
    ID              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FOREDGE         reduce using rule 9 (Instruction -> Add_vertex_instr .)
    K_COLOR_PLOT    reduce using rule 9 (Instruction -> Add_vertex_instr .)
    WEIGHTED_PLOT   reduce using rule 9 (Instruction -> Add_vertex_instr .)
    $end            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    END             reduce using rule 9 (Instruction -> Add_vertex_instr .)


state 10

    (10) Instruction -> Add_edge_instr .

    PLOT            reduce using rule 10 (Instruction -> Add_edge_instr .)
    IF              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FORVERTEX       reduce using rule 10 (Instruction -> Add_edge_instr .)
    ID              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FOREDGE         reduce using rule 10 (Instruction -> Add_edge_instr .)
    K_COLOR_PLOT    reduce using rule 10 (Instruction -> Add_edge_instr .)
    WEIGHTED_PLOT   reduce using rule 10 (Instruction -> Add_edge_instr .)
    $end            reduce using rule 10 (Instruction -> Add_edge_instr .)
    END             reduce using rule 10 (Instruction -> Add_edge_instr .)


state 11

    (11) Instruction -> Add_vertex_and_edge_instr .

    PLOT            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    IF              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FORVERTEX       reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    ID              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FOREDGE         reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    K_COLOR_PLOT    reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    WEIGHTED_PLOT   reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    $end            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    END             reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)


state 12

    (12) Instruction -> K_color_plot_instr .

    PLOT            reduce using rule 12 (Instruction -> K_color_plot_instr .)
    IF              reduce using rule 12 (Instruction -> K_color_plot_instr .)
    FORVERTEX       reduce using rule 12 (Instruction -> K_color_plot_instr .)
    ID              reduce using rule 12 (Instruction -> K_color_plot_instr .)
    FOREDGE         reduce using rule 12 (Instruction -> K_color_plot_instr .)
    K_COLOR_PLOT    reduce using rule 12 (Instruction -> K_color_plot_instr .)
    WEIGHTED_PLOT   reduce using rule 12 (Instruction -> K_color_plot_instr .)
    $end            reduce using rule 12 (Instruction -> K_color_plot_instr .)
    END             reduce using rule 12 (Instruction -> K_color_plot_instr .)


state 13

    (13) Instruction -> Weighted_plt_instr .

    PLOT            reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    IF              reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    FORVERTEX       reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    ID              reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    FOREDGE         reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    K_COLOR_PLOT    reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    WEIGHTED_PLOT   reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    $end            reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    END             reduce using rule 13 (Instruction -> Weighted_plt_instr .)


state 14

    (18) Plot_instr -> PLOT . OPAR graph_expression CPAR

    OPAR            shift and go to state 22


state 15

    (14) If_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    OPAR            shift and go to state 23


state 16

    (16) For_vertex_instr -> FORVERTEX . ID IN ID BEGIN Instructions END

    ID              shift and go to state 24


state 17

    (19) Assign_instr -> ID . ASSIGN graph_expression
    (20) Add_vertex_instr -> ID . ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> ID . ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> ID . ADD OPAR vertex_expression COMMA edge_expression CPAR

    ASSIGN          shift and go to state 25
    ADD             shift and go to state 26


state 18

    (17) For_edge_instr -> FOREDGE . ID IN ID BEGIN Instructions END

    ID              shift and go to state 27


state 19

    (21) K_color_plot_instr -> K_COLOR_PLOT . OPAR graph_expression CPAR

    OPAR            shift and go to state 28


state 20

    (22) Weighted_plt_instr -> WEIGHTED_PLOT . OPAR graph_expression CPAR

    OPAR            shift and go to state 29


state 21

    (1) Instructions -> Instructions Instruction .

    PLOT            reduce using rule 1 (Instructions -> Instructions Instruction .)
    IF              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FORVERTEX       reduce using rule 1 (Instructions -> Instructions Instruction .)
    ID              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FOREDGE         reduce using rule 1 (Instructions -> Instructions Instruction .)
    K_COLOR_PLOT    reduce using rule 1 (Instructions -> Instructions Instruction .)
    WEIGHTED_PLOT   reduce using rule 1 (Instructions -> Instructions Instruction .)
    $end            reduce using rule 1 (Instructions -> Instructions Instruction .)
    END             reduce using rule 1 (Instructions -> Instructions Instruction .)


state 22

    (18) Plot_instr -> PLOT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OPAR            shift and go to state 30
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    graph_expression               shift and go to state 31

state 23

    (14) If_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (45) logic_expression -> . value_expression EQUAL value_expression
    (46) logic_expression -> . value_expression GREATER value_expression
    (47) logic_expression -> . value_expression LESS value_expression
    (48) logic_expression -> . value_expression GREATEREQ value_expression
    (49) logic_expression -> . value_expression LESSEQ value_expression
    (50) logic_expression -> . value_expression NEQUAL value_expression
    (51) logic_expression -> . logic_function
    (52) value_expression -> . algebraic_expression
    (53) value_expression -> . numeric_function
    (67) logic_function -> . graph_expression POINT CONTAIN_VERTEX value_expression
    (68) logic_function -> . graph_expression POINT CONTAIN_EDGES edge_expression
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    logic_expression               shift and go to state 37
    value_expression               shift and go to state 38
    logic_function                 shift and go to state 39
    algebraic_expression           shift and go to state 40
    numeric_function               shift and go to state 41
    graph_expression               shift and go to state 42

state 24

    (16) For_vertex_instr -> FORVERTEX ID . IN ID BEGIN Instructions END

    IN              shift and go to state 46


state 25

    (19) Assign_instr -> ID ASSIGN . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OPAR            shift and go to state 30
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    graph_expression               shift and go to state 47

state 26

    (20) Add_vertex_instr -> ID ADD . OPAR vertex_expression CPAR
    (23) Add_edge_instr -> ID ADD . OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> ID ADD . OPAR vertex_expression COMMA edge_expression CPAR

    OPAR            shift and go to state 48


state 27

    (17) For_edge_instr -> FOREDGE ID . IN ID BEGIN Instructions END

    IN              shift and go to state 49


state 28

    (21) K_color_plot_instr -> K_COLOR_PLOT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OPAR            shift and go to state 30
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    graph_expression               shift and go to state 50

state 29

    (22) Weighted_plt_instr -> WEIGHTED_PLOT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OPAR            shift and go to state 30
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    graph_expression               shift and go to state 51

state 30

    (25) graph_expression -> OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OPAR            shift and go to state 30
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    graph_expression               shift and go to state 52

state 31

    (18) Plot_instr -> PLOT OPAR graph_expression . CPAR
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 53
    UNION           shift and go to state 54
    INTERSECTION    shift and go to state 55
    DIFFERENCE      shift and go to state 56
    CONCAT          shift and go to state 57


state 32

    (26) graph_expression -> GRAPH . OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> GRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 58


state 33

    (27) graph_expression -> DIGRAPH . OPAR value_expression COMMA edge_expression CPAR
    (29) graph_expression -> DIGRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 59


state 34

    (34) graph_expression -> COMPLEMENT . OPAR graph_expression CPAR

    OPAR            shift and go to state 60


state 35

    (35) graph_expression -> ID .

    CPAR            reduce using rule 35 (graph_expression -> ID .)
    UNION           reduce using rule 35 (graph_expression -> ID .)
    INTERSECTION    reduce using rule 35 (graph_expression -> ID .)
    DIFFERENCE      reduce using rule 35 (graph_expression -> ID .)
    CONCAT          reduce using rule 35 (graph_expression -> ID .)
    POINT           reduce using rule 35 (graph_expression -> ID .)
    PLOT            reduce using rule 35 (graph_expression -> ID .)
    IF              reduce using rule 35 (graph_expression -> ID .)
    FORVERTEX       reduce using rule 35 (graph_expression -> ID .)
    ID              reduce using rule 35 (graph_expression -> ID .)
    FOREDGE         reduce using rule 35 (graph_expression -> ID .)
    K_COLOR_PLOT    reduce using rule 35 (graph_expression -> ID .)
    WEIGHTED_PLOT   reduce using rule 35 (graph_expression -> ID .)
    $end            reduce using rule 35 (graph_expression -> ID .)
    END             reduce using rule 35 (graph_expression -> ID .)


state 36

    (56) algebraic_expression -> OPAR . algebraic_expression CPAR
    (25) graph_expression -> OPAR . graph_expression CPAR
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    algebraic_expression           shift and go to state 61
    graph_expression               shift and go to state 62
    numeric_function               shift and go to state 63

state 37

    (14) If_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END
    (15) If_else_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    CPAR            shift and go to state 64


state 38

    (45) logic_expression -> value_expression . EQUAL value_expression
    (46) logic_expression -> value_expression . GREATER value_expression
    (47) logic_expression -> value_expression . LESS value_expression
    (48) logic_expression -> value_expression . GREATEREQ value_expression
    (49) logic_expression -> value_expression . LESSEQ value_expression
    (50) logic_expression -> value_expression . NEQUAL value_expression

    EQUAL           shift and go to state 65
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    GREATEREQ       shift and go to state 68
    LESSEQ          shift and go to state 69
    NEQUAL          shift and go to state 70


state 39

    (51) logic_expression -> logic_function .

    CPAR            reduce using rule 51 (logic_expression -> logic_function .)


state 40

    (52) value_expression -> algebraic_expression .
    (58) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (59) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (60) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (61) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    EQUAL           reduce using rule 52 (value_expression -> algebraic_expression .)
    GREATER         reduce using rule 52 (value_expression -> algebraic_expression .)
    LESS            reduce using rule 52 (value_expression -> algebraic_expression .)
    GREATEREQ       reduce using rule 52 (value_expression -> algebraic_expression .)
    LESSEQ          reduce using rule 52 (value_expression -> algebraic_expression .)
    NEQUAL          reduce using rule 52 (value_expression -> algebraic_expression .)
    COMMA           reduce using rule 52 (value_expression -> algebraic_expression .)
    CPAR            reduce using rule 52 (value_expression -> algebraic_expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    MUL             shift and go to state 73
    DIV             shift and go to state 74


state 41

    (53) value_expression -> numeric_function .
    (57) algebraic_expression -> numeric_function .

  ! reduce/reduce conflict for EQUAL resolved using rule 53 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for GREATER resolved using rule 53 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for LESS resolved using rule 53 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 53 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 53 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 53 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for COMMA resolved using rule 53 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for CPAR resolved using rule 53 (value_expression -> numeric_function .)
    EQUAL           reduce using rule 53 (value_expression -> numeric_function .)
    GREATER         reduce using rule 53 (value_expression -> numeric_function .)
    LESS            reduce using rule 53 (value_expression -> numeric_function .)
    GREATEREQ       reduce using rule 53 (value_expression -> numeric_function .)
    LESSEQ          reduce using rule 53 (value_expression -> numeric_function .)
    NEQUAL          reduce using rule 53 (value_expression -> numeric_function .)
    COMMA           reduce using rule 53 (value_expression -> numeric_function .)
    CPAR            reduce using rule 53 (value_expression -> numeric_function .)
    PLUS            reduce using rule 57 (algebraic_expression -> numeric_function .)
    MINUS           reduce using rule 57 (algebraic_expression -> numeric_function .)
    MUL             reduce using rule 57 (algebraic_expression -> numeric_function .)
    DIV             reduce using rule 57 (algebraic_expression -> numeric_function .)

  ! EQUAL           [ reduce using rule 57 (algebraic_expression -> numeric_function .) ]
  ! GREATER         [ reduce using rule 57 (algebraic_expression -> numeric_function .) ]
  ! LESS            [ reduce using rule 57 (algebraic_expression -> numeric_function .) ]
  ! GREATEREQ       [ reduce using rule 57 (algebraic_expression -> numeric_function .) ]
  ! LESSEQ          [ reduce using rule 57 (algebraic_expression -> numeric_function .) ]
  ! NEQUAL          [ reduce using rule 57 (algebraic_expression -> numeric_function .) ]
  ! COMMA           [ reduce using rule 57 (algebraic_expression -> numeric_function .) ]
  ! CPAR            [ reduce using rule 57 (algebraic_expression -> numeric_function .) ]


state 42

    (67) logic_function -> graph_expression . POINT CONTAIN_VERTEX value_expression
    (68) logic_function -> graph_expression . POINT CONTAIN_EDGES edge_expression
    (64) numeric_function -> graph_expression . POINT NODES_COUNT
    (65) numeric_function -> graph_expression . POINT EDGES_COUNT
    (66) numeric_function -> graph_expression . POINT WEIGHT_SUM
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    POINT           shift and go to state 75
    UNION           shift and go to state 54
    INTERSECTION    shift and go to state 55
    DIFFERENCE      shift and go to state 56
    CONCAT          shift and go to state 57


state 43

    (54) algebraic_expression -> INT .

    PLUS            reduce using rule 54 (algebraic_expression -> INT .)
    MINUS           reduce using rule 54 (algebraic_expression -> INT .)
    MUL             reduce using rule 54 (algebraic_expression -> INT .)
    DIV             reduce using rule 54 (algebraic_expression -> INT .)
    EQUAL           reduce using rule 54 (algebraic_expression -> INT .)
    GREATER         reduce using rule 54 (algebraic_expression -> INT .)
    LESS            reduce using rule 54 (algebraic_expression -> INT .)
    GREATEREQ       reduce using rule 54 (algebraic_expression -> INT .)
    LESSEQ          reduce using rule 54 (algebraic_expression -> INT .)
    NEQUAL          reduce using rule 54 (algebraic_expression -> INT .)
    CPAR            reduce using rule 54 (algebraic_expression -> INT .)
    COMMA           reduce using rule 54 (algebraic_expression -> INT .)


state 44

    (55) algebraic_expression -> FLOAT .

    PLUS            reduce using rule 55 (algebraic_expression -> FLOAT .)
    MINUS           reduce using rule 55 (algebraic_expression -> FLOAT .)
    MUL             reduce using rule 55 (algebraic_expression -> FLOAT .)
    DIV             reduce using rule 55 (algebraic_expression -> FLOAT .)
    EQUAL           reduce using rule 55 (algebraic_expression -> FLOAT .)
    GREATER         reduce using rule 55 (algebraic_expression -> FLOAT .)
    LESS            reduce using rule 55 (algebraic_expression -> FLOAT .)
    GREATEREQ       reduce using rule 55 (algebraic_expression -> FLOAT .)
    LESSEQ          reduce using rule 55 (algebraic_expression -> FLOAT .)
    NEQUAL          reduce using rule 55 (algebraic_expression -> FLOAT .)
    CPAR            reduce using rule 55 (algebraic_expression -> FLOAT .)
    COMMA           reduce using rule 55 (algebraic_expression -> FLOAT .)


state 45

    (62) algebraic_expression -> MINUS . algebraic_expression
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    algebraic_expression           shift and go to state 76
    numeric_function               shift and go to state 63
    graph_expression               shift and go to state 77

state 46

    (16) For_vertex_instr -> FORVERTEX ID IN . ID BEGIN Instructions END

    ID              shift and go to state 78


state 47

    (19) Assign_instr -> ID ASSIGN graph_expression .
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    PLOT            reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    IF              reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    FORVERTEX       reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    ID              reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    FOREDGE         reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    K_COLOR_PLOT    reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    WEIGHTED_PLOT   reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    $end            reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    END             reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    UNION           shift and go to state 54
    INTERSECTION    shift and go to state 55
    DIFFERENCE      shift and go to state 56
    CONCAT          shift and go to state 57


state 48

    (20) Add_vertex_instr -> ID ADD OPAR . vertex_expression CPAR
    (23) Add_edge_instr -> ID ADD OPAR . edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> ID ADD OPAR . vertex_expression COMMA edge_expression CPAR
    (36) vertex_expression -> . vertex_expression INT
    (37) vertex_expression -> . INT
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (44) edge_expression -> . empty
    (63) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    INT             shift and go to state 82
    OPAR            shift and go to state 79
    CPAR            reduce using rule 63 (empty -> .)

  ! OPAR            [ reduce using rule 63 (empty -> .) ]

    vertex_expression              shift and go to state 80
    edge_expression                shift and go to state 81
    empty                          shift and go to state 83

state 49

    (17) For_edge_instr -> FOREDGE ID IN . ID BEGIN Instructions END

    ID              shift and go to state 84


state 50

    (21) K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression . CPAR
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 85
    UNION           shift and go to state 54
    INTERSECTION    shift and go to state 55
    DIFFERENCE      shift and go to state 56
    CONCAT          shift and go to state 57


state 51

    (22) Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression . CPAR
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 86
    UNION           shift and go to state 54
    INTERSECTION    shift and go to state 55
    DIFFERENCE      shift and go to state 56
    CONCAT          shift and go to state 57


state 52

    (25) graph_expression -> OPAR graph_expression . CPAR
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 87
    UNION           shift and go to state 54
    INTERSECTION    shift and go to state 55
    DIFFERENCE      shift and go to state 56
    CONCAT          shift and go to state 57


state 53

    (18) Plot_instr -> PLOT OPAR graph_expression CPAR .

    PLOT            reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    IF              reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    ID              reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    $end            reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    END             reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)


state 54

    (30) graph_expression -> graph_expression UNION . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OPAR            shift and go to state 30
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    graph_expression               shift and go to state 88

state 55

    (31) graph_expression -> graph_expression INTERSECTION . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OPAR            shift and go to state 30
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    graph_expression               shift and go to state 89

state 56

    (32) graph_expression -> graph_expression DIFFERENCE . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OPAR            shift and go to state 30
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    graph_expression               shift and go to state 90

state 57

    (33) graph_expression -> graph_expression CONCAT . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OPAR            shift and go to state 30
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    graph_expression               shift and go to state 91

state 58

    (26) graph_expression -> GRAPH OPAR . value_expression COMMA edge_expression CPAR
    (28) graph_expression -> GRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (52) value_expression -> . algebraic_expression
    (53) value_expression -> . numeric_function
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OBR             shift and go to state 93
    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    value_expression               shift and go to state 92
    algebraic_expression           shift and go to state 40
    numeric_function               shift and go to state 41
    graph_expression               shift and go to state 77

state 59

    (27) graph_expression -> DIGRAPH OPAR . value_expression COMMA edge_expression CPAR
    (29) graph_expression -> DIGRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (52) value_expression -> . algebraic_expression
    (53) value_expression -> . numeric_function
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OBR             shift and go to state 95
    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    value_expression               shift and go to state 94
    algebraic_expression           shift and go to state 40
    numeric_function               shift and go to state 41
    graph_expression               shift and go to state 77

state 60

    (34) graph_expression -> COMPLEMENT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    OPAR            shift and go to state 30
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    graph_expression               shift and go to state 96

state 61

    (56) algebraic_expression -> OPAR algebraic_expression . CPAR
    (58) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (59) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (60) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (61) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    CPAR            shift and go to state 97
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    MUL             shift and go to state 73
    DIV             shift and go to state 74


state 62

    (25) graph_expression -> OPAR graph_expression . CPAR
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression
    (64) numeric_function -> graph_expression . POINT NODES_COUNT
    (65) numeric_function -> graph_expression . POINT EDGES_COUNT
    (66) numeric_function -> graph_expression . POINT WEIGHT_SUM

    CPAR            shift and go to state 87
    UNION           shift and go to state 54
    INTERSECTION    shift and go to state 55
    DIFFERENCE      shift and go to state 56
    CONCAT          shift and go to state 57
    POINT           shift and go to state 98


state 63

    (57) algebraic_expression -> numeric_function .

    CPAR            reduce using rule 57 (algebraic_expression -> numeric_function .)
    PLUS            reduce using rule 57 (algebraic_expression -> numeric_function .)
    MINUS           reduce using rule 57 (algebraic_expression -> numeric_function .)
    MUL             reduce using rule 57 (algebraic_expression -> numeric_function .)
    DIV             reduce using rule 57 (algebraic_expression -> numeric_function .)
    EQUAL           reduce using rule 57 (algebraic_expression -> numeric_function .)
    GREATER         reduce using rule 57 (algebraic_expression -> numeric_function .)
    LESS            reduce using rule 57 (algebraic_expression -> numeric_function .)
    GREATEREQ       reduce using rule 57 (algebraic_expression -> numeric_function .)
    LESSEQ          reduce using rule 57 (algebraic_expression -> numeric_function .)
    NEQUAL          reduce using rule 57 (algebraic_expression -> numeric_function .)
    COMMA           reduce using rule 57 (algebraic_expression -> numeric_function .)


state 64

    (14) If_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END
    (15) If_else_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END ELSE BEGIN Instructions END

    BEGIN           shift and go to state 99


state 65

    (45) logic_expression -> value_expression EQUAL . value_expression
    (52) value_expression -> . algebraic_expression
    (53) value_expression -> . numeric_function
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    value_expression               shift and go to state 100
    algebraic_expression           shift and go to state 40
    numeric_function               shift and go to state 41
    graph_expression               shift and go to state 77

state 66

    (46) logic_expression -> value_expression GREATER . value_expression
    (52) value_expression -> . algebraic_expression
    (53) value_expression -> . numeric_function
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    value_expression               shift and go to state 101
    algebraic_expression           shift and go to state 40
    numeric_function               shift and go to state 41
    graph_expression               shift and go to state 77

state 67

    (47) logic_expression -> value_expression LESS . value_expression
    (52) value_expression -> . algebraic_expression
    (53) value_expression -> . numeric_function
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    value_expression               shift and go to state 102
    algebraic_expression           shift and go to state 40
    numeric_function               shift and go to state 41
    graph_expression               shift and go to state 77

state 68

    (48) logic_expression -> value_expression GREATEREQ . value_expression
    (52) value_expression -> . algebraic_expression
    (53) value_expression -> . numeric_function
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    value_expression               shift and go to state 103
    algebraic_expression           shift and go to state 40
    numeric_function               shift and go to state 41
    graph_expression               shift and go to state 77

state 69

    (49) logic_expression -> value_expression LESSEQ . value_expression
    (52) value_expression -> . algebraic_expression
    (53) value_expression -> . numeric_function
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    value_expression               shift and go to state 104
    algebraic_expression           shift and go to state 40
    numeric_function               shift and go to state 41
    graph_expression               shift and go to state 77

state 70

    (50) logic_expression -> value_expression NEQUAL . value_expression
    (52) value_expression -> . algebraic_expression
    (53) value_expression -> . numeric_function
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    value_expression               shift and go to state 105
    algebraic_expression           shift and go to state 40
    numeric_function               shift and go to state 41
    graph_expression               shift and go to state 77

state 71

    (58) algebraic_expression -> algebraic_expression PLUS . algebraic_expression
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    algebraic_expression           shift and go to state 106
    numeric_function               shift and go to state 63
    graph_expression               shift and go to state 77

state 72

    (59) algebraic_expression -> algebraic_expression MINUS . algebraic_expression
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    algebraic_expression           shift and go to state 107
    numeric_function               shift and go to state 63
    graph_expression               shift and go to state 77

state 73

    (60) algebraic_expression -> algebraic_expression MUL . algebraic_expression
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    algebraic_expression           shift and go to state 108
    numeric_function               shift and go to state 63
    graph_expression               shift and go to state 77

state 74

    (61) algebraic_expression -> algebraic_expression DIV . algebraic_expression
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    algebraic_expression           shift and go to state 109
    numeric_function               shift and go to state 63
    graph_expression               shift and go to state 77

state 75

    (67) logic_function -> graph_expression POINT . CONTAIN_VERTEX value_expression
    (68) logic_function -> graph_expression POINT . CONTAIN_EDGES edge_expression
    (64) numeric_function -> graph_expression POINT . NODES_COUNT
    (65) numeric_function -> graph_expression POINT . EDGES_COUNT
    (66) numeric_function -> graph_expression POINT . WEIGHT_SUM

    CONTAIN_VERTEX  shift and go to state 110
    CONTAIN_EDGES   shift and go to state 111
    NODES_COUNT     shift and go to state 112
    EDGES_COUNT     shift and go to state 113
    WEIGHT_SUM      shift and go to state 114


state 76

    (62) algebraic_expression -> MINUS algebraic_expression .
    (58) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (59) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (60) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (61) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)
    MINUS           reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)
    MUL             reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)
    DIV             reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)
    EQUAL           reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)
    GREATER         reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)
    LESS            reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)
    LESSEQ          reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)
    NEQUAL          reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)
    CPAR            reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)
    COMMA           reduce using rule 62 (algebraic_expression -> MINUS algebraic_expression .)

  ! PLUS            [ shift and go to state 71 ]
  ! MINUS           [ shift and go to state 72 ]
  ! MUL             [ shift and go to state 73 ]
  ! DIV             [ shift and go to state 74 ]


state 77

    (64) numeric_function -> graph_expression . POINT NODES_COUNT
    (65) numeric_function -> graph_expression . POINT EDGES_COUNT
    (66) numeric_function -> graph_expression . POINT WEIGHT_SUM
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    POINT           shift and go to state 98
    UNION           shift and go to state 54
    INTERSECTION    shift and go to state 55
    DIFFERENCE      shift and go to state 56
    CONCAT          shift and go to state 57


state 78

    (16) For_vertex_instr -> FORVERTEX ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 115


state 79

    (39) edge_expression -> OPAR . INT COMMA INT CPAR
    (41) edge_expression -> OPAR . INT COMMA INT COMMA INT CPAR
    (43) edge_expression -> OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 116


state 80

    (20) Add_vertex_instr -> ID ADD OPAR vertex_expression . CPAR
    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression . COMMA edge_expression CPAR
    (36) vertex_expression -> vertex_expression . INT

    CPAR            shift and go to state 117
    COMMA           shift and go to state 118
    INT             shift and go to state 119


state 81

    (23) Add_edge_instr -> ID ADD OPAR edge_expression . CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 121
    OPAR            shift and go to state 120


state 82

    (37) vertex_expression -> INT .

    CPAR            reduce using rule 37 (vertex_expression -> INT .)
    COMMA           reduce using rule 37 (vertex_expression -> INT .)
    INT             reduce using rule 37 (vertex_expression -> INT .)
    CBR             reduce using rule 37 (vertex_expression -> INT .)


state 83

    (44) edge_expression -> empty .

    CPAR            reduce using rule 44 (edge_expression -> empty .)
    OPAR            reduce using rule 44 (edge_expression -> empty .)


state 84

    (17) For_edge_instr -> FOREDGE ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 122


state 85

    (21) K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .

    PLOT            reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    IF              reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    ID              reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    $end            reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    END             reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)


state 86

    (22) Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .

    PLOT            reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    IF              reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    ID              reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    $end            reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    END             reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)


state 87

    (25) graph_expression -> OPAR graph_expression CPAR .

    CPAR            reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    UNION           reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    POINT           reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    PLOT            reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    IF              reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    ID              reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    $end            reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    END             reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)


state 88

    (30) graph_expression -> graph_expression UNION graph_expression .
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    UNION           reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    INTERSECTION    reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    DIFFERENCE      reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    CONCAT          reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    POINT           reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    PLOT            reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    IF              reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    FORVERTEX       reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    ID              reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    FOREDGE         reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    K_COLOR_PLOT    reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    WEIGHTED_PLOT   reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    $end            reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)
    END             reduce using rule 30 (graph_expression -> graph_expression UNION graph_expression .)

  ! UNION           [ shift and go to state 54 ]
  ! INTERSECTION    [ shift and go to state 55 ]
  ! DIFFERENCE      [ shift and go to state 56 ]
  ! CONCAT          [ shift and go to state 57 ]


state 89

    (31) graph_expression -> graph_expression INTERSECTION graph_expression .
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    UNION           reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    INTERSECTION    reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    DIFFERENCE      reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    CONCAT          reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    POINT           reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    PLOT            reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    IF              reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FORVERTEX       reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    ID              reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FOREDGE         reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    K_COLOR_PLOT    reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    WEIGHTED_PLOT   reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    $end            reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    END             reduce using rule 31 (graph_expression -> graph_expression INTERSECTION graph_expression .)

  ! UNION           [ shift and go to state 54 ]
  ! INTERSECTION    [ shift and go to state 55 ]
  ! DIFFERENCE      [ shift and go to state 56 ]
  ! CONCAT          [ shift and go to state 57 ]


state 90

    (32) graph_expression -> graph_expression DIFFERENCE graph_expression .
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    UNION           reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    INTERSECTION    reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    DIFFERENCE      reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    CONCAT          reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    POINT           reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    PLOT            reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    IF              reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FORVERTEX       reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    ID              reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FOREDGE         reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    K_COLOR_PLOT    reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    WEIGHTED_PLOT   reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    $end            reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    END             reduce using rule 32 (graph_expression -> graph_expression DIFFERENCE graph_expression .)

  ! UNION           [ shift and go to state 54 ]
  ! INTERSECTION    [ shift and go to state 55 ]
  ! DIFFERENCE      [ shift and go to state 56 ]
  ! CONCAT          [ shift and go to state 57 ]


state 91

    (33) graph_expression -> graph_expression CONCAT graph_expression .
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    CONCAT          reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    POINT           reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    PLOT            reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    IF              reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    FORVERTEX       reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    ID              reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    FOREDGE         reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    K_COLOR_PLOT    reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    WEIGHTED_PLOT   reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    $end            reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    END             reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .)
    UNION           shift and go to state 54
    INTERSECTION    shift and go to state 55
    DIFFERENCE      shift and go to state 56

  ! UNION           [ reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! DIFFERENCE      [ reduce using rule 33 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! CONCAT          [ shift and go to state 57 ]


state 92

    (26) graph_expression -> GRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 123


state 93

    (28) graph_expression -> GRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (36) vertex_expression -> . vertex_expression INT
    (37) vertex_expression -> . INT

    INT             shift and go to state 82

    vertex_expression              shift and go to state 124

state 94

    (27) graph_expression -> DIGRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 125


state 95

    (29) graph_expression -> DIGRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (36) vertex_expression -> . vertex_expression INT
    (37) vertex_expression -> . INT

    INT             shift and go to state 82

    vertex_expression              shift and go to state 126

state 96

    (34) graph_expression -> COMPLEMENT OPAR graph_expression . CPAR
    (30) graph_expression -> graph_expression . UNION graph_expression
    (31) graph_expression -> graph_expression . INTERSECTION graph_expression
    (32) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (33) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 127
    UNION           shift and go to state 54
    INTERSECTION    shift and go to state 55
    DIFFERENCE      shift and go to state 56
    CONCAT          shift and go to state 57


state 97

    (56) algebraic_expression -> OPAR algebraic_expression CPAR .

    PLUS            reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    MINUS           reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    MUL             reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    DIV             reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    EQUAL           reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    GREATER         reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    LESS            reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    GREATEREQ       reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    LESSEQ          reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    NEQUAL          reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    CPAR            reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    COMMA           reduce using rule 56 (algebraic_expression -> OPAR algebraic_expression CPAR .)


state 98

    (64) numeric_function -> graph_expression POINT . NODES_COUNT
    (65) numeric_function -> graph_expression POINT . EDGES_COUNT
    (66) numeric_function -> graph_expression POINT . WEIGHT_SUM

    NODES_COUNT     shift and go to state 112
    EDGES_COUNT     shift and go to state 113
    WEIGHT_SUM      shift and go to state 114


state 99

    (14) If_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END
    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END ELSE BEGIN Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 128
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 100

    (45) logic_expression -> value_expression EQUAL value_expression .

    CPAR            reduce using rule 45 (logic_expression -> value_expression EQUAL value_expression .)


state 101

    (46) logic_expression -> value_expression GREATER value_expression .

    CPAR            reduce using rule 46 (logic_expression -> value_expression GREATER value_expression .)


state 102

    (47) logic_expression -> value_expression LESS value_expression .

    CPAR            reduce using rule 47 (logic_expression -> value_expression LESS value_expression .)


state 103

    (48) logic_expression -> value_expression GREATEREQ value_expression .

    CPAR            reduce using rule 48 (logic_expression -> value_expression GREATEREQ value_expression .)


state 104

    (49) logic_expression -> value_expression LESSEQ value_expression .

    CPAR            reduce using rule 49 (logic_expression -> value_expression LESSEQ value_expression .)


state 105

    (50) logic_expression -> value_expression NEQUAL value_expression .

    CPAR            reduce using rule 50 (logic_expression -> value_expression NEQUAL value_expression .)


state 106

    (58) algebraic_expression -> algebraic_expression PLUS algebraic_expression .
    (58) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (59) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (60) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (61) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MINUS           reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    EQUAL           reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATER         reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESS            reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATEREQ       reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESSEQ          reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    NEQUAL          reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    CPAR            reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    COMMA           reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MUL             shift and go to state 73
    DIV             shift and go to state 74

  ! MUL             [ reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 58 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 71 ]
  ! MINUS           [ shift and go to state 72 ]


state 107

    (59) algebraic_expression -> algebraic_expression MINUS algebraic_expression .
    (58) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (59) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (60) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (61) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MINUS           reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    EQUAL           reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATER         reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESS            reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESSEQ          reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    NEQUAL          reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    CPAR            reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    COMMA           reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MUL             shift and go to state 73
    DIV             shift and go to state 74

  ! MUL             [ reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 59 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 71 ]
  ! MINUS           [ shift and go to state 72 ]


state 108

    (60) algebraic_expression -> algebraic_expression MUL algebraic_expression .
    (58) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (59) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (60) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (61) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MINUS           reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MUL             reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    DIV             reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    EQUAL           reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATER         reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESS            reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATEREQ       reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESSEQ          reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    NEQUAL          reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    CPAR            reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    COMMA           reduce using rule 60 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)

  ! PLUS            [ shift and go to state 71 ]
  ! MINUS           [ shift and go to state 72 ]
  ! MUL             [ shift and go to state 73 ]
  ! DIV             [ shift and go to state 74 ]


state 109

    (61) algebraic_expression -> algebraic_expression DIV algebraic_expression .
    (58) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (59) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (60) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (61) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MINUS           reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MUL             reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    DIV             reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    EQUAL           reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATER         reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESS            reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATEREQ       reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESSEQ          reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    NEQUAL          reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    CPAR            reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    COMMA           reduce using rule 61 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)

  ! PLUS            [ shift and go to state 71 ]
  ! MINUS           [ shift and go to state 72 ]
  ! MUL             [ shift and go to state 73 ]
  ! DIV             [ shift and go to state 74 ]


state 110

    (67) logic_function -> graph_expression POINT CONTAIN_VERTEX . value_expression
    (52) value_expression -> . algebraic_expression
    (53) value_expression -> . numeric_function
    (54) algebraic_expression -> . INT
    (55) algebraic_expression -> . FLOAT
    (56) algebraic_expression -> . OPAR algebraic_expression CPAR
    (57) algebraic_expression -> . numeric_function
    (58) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (59) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (60) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (61) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (62) algebraic_expression -> . MINUS algebraic_expression
    (64) numeric_function -> . graph_expression POINT NODES_COUNT
    (65) numeric_function -> . graph_expression POINT EDGES_COUNT
    (66) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (28) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (29) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (30) graph_expression -> . graph_expression UNION graph_expression
    (31) graph_expression -> . graph_expression INTERSECTION graph_expression
    (32) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (33) graph_expression -> . graph_expression CONCAT graph_expression
    (34) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (35) graph_expression -> . ID

    INT             shift and go to state 43
    FLOAT           shift and go to state 44
    OPAR            shift and go to state 36
    MINUS           shift and go to state 45
    GRAPH           shift and go to state 32
    DIGRAPH         shift and go to state 33
    COMPLEMENT      shift and go to state 34
    ID              shift and go to state 35

    graph_expression               shift and go to state 77
    value_expression               shift and go to state 129
    algebraic_expression           shift and go to state 40
    numeric_function               shift and go to state 41

state 111

    (68) logic_function -> graph_expression POINT CONTAIN_EDGES . edge_expression
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (44) edge_expression -> . empty
    (63) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 79
    CPAR            reduce using rule 63 (empty -> .)

  ! OPAR            [ reduce using rule 63 (empty -> .) ]

    edge_expression                shift and go to state 130
    empty                          shift and go to state 83

state 112

    (64) numeric_function -> graph_expression POINT NODES_COUNT .

    EQUAL           reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)
    GREATER         reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)
    LESS            reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)
    GREATEREQ       reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)
    LESSEQ          reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)
    NEQUAL          reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)
    PLUS            reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)
    MINUS           reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)
    MUL             reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)
    DIV             reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)
    CPAR            reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)
    COMMA           reduce using rule 64 (numeric_function -> graph_expression POINT NODES_COUNT .)


state 113

    (65) numeric_function -> graph_expression POINT EDGES_COUNT .

    EQUAL           reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    GREATER         reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    LESS            reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    GREATEREQ       reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    LESSEQ          reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    NEQUAL          reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    PLUS            reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    MINUS           reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    MUL             reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    DIV             reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    CPAR            reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    COMMA           reduce using rule 65 (numeric_function -> graph_expression POINT EDGES_COUNT .)


state 114

    (66) numeric_function -> graph_expression POINT WEIGHT_SUM .

    EQUAL           reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    GREATER         reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    LESS            reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    GREATEREQ       reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    LESSEQ          reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    NEQUAL          reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    PLUS            reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    MINUS           reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    MUL             reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    DIV             reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    CPAR            reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    COMMA           reduce using rule 66 (numeric_function -> graph_expression POINT WEIGHT_SUM .)


state 115

    (16) For_vertex_instr -> FORVERTEX ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 131
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 116

    (39) edge_expression -> OPAR INT . COMMA INT CPAR
    (41) edge_expression -> OPAR INT . COMMA INT COMMA INT CPAR
    (43) edge_expression -> OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 132


state 117

    (20) Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .

    PLOT            reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    IF              reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FORVERTEX       reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    ID              reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FOREDGE         reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    $end            reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    END             reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)


state 118

    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA . edge_expression CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (44) edge_expression -> . empty
    (63) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 79
    CPAR            reduce using rule 63 (empty -> .)

  ! OPAR            [ reduce using rule 63 (empty -> .) ]

    edge_expression                shift and go to state 133
    empty                          shift and go to state 83

state 119

    (36) vertex_expression -> vertex_expression INT .

    CPAR            reduce using rule 36 (vertex_expression -> vertex_expression INT .)
    COMMA           reduce using rule 36 (vertex_expression -> vertex_expression INT .)
    INT             reduce using rule 36 (vertex_expression -> vertex_expression INT .)
    CBR             reduce using rule 36 (vertex_expression -> vertex_expression INT .)


state 120

    (38) edge_expression -> edge_expression OPAR . INT COMMA INT CPAR
    (40) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 134


state 121

    (23) Add_edge_instr -> ID ADD OPAR edge_expression CPAR .

    PLOT            reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    IF              reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FORVERTEX       reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    ID              reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FOREDGE         reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    $end            reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    END             reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)


state 122

    (17) For_edge_instr -> FOREDGE ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 135
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 123

    (26) graph_expression -> GRAPH OPAR value_expression COMMA . edge_expression CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (44) edge_expression -> . empty
    (63) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 79
    CPAR            reduce using rule 63 (empty -> .)

  ! OPAR            [ reduce using rule 63 (empty -> .) ]

    edge_expression                shift and go to state 136
    empty                          shift and go to state 83

state 124

    (28) graph_expression -> GRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (36) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 137
    INT             shift and go to state 119


state 125

    (27) graph_expression -> DIGRAPH OPAR value_expression COMMA . edge_expression CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (44) edge_expression -> . empty
    (63) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 79
    CPAR            reduce using rule 63 (empty -> .)

  ! OPAR            [ reduce using rule 63 (empty -> .) ]

    edge_expression                shift and go to state 138
    empty                          shift and go to state 83

state 126

    (29) graph_expression -> DIGRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (36) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 139
    INT             shift and go to state 119


state 127

    (34) graph_expression -> COMPLEMENT OPAR graph_expression CPAR .

    CPAR            reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    UNION           reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    POINT           reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    PLOT            reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    IF              reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    ID              reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    $end            reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    END             reduce using rule 34 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)


state 128

    (14) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END
    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END ELSE BEGIN Instructions END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 140
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 129

    (67) logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression .

    CPAR            reduce using rule 67 (logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression .)


state 130

    (68) logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression .
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            reduce using rule 68 (logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression .)
    OPAR            shift and go to state 120


state 131

    (16) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 141
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 132

    (39) edge_expression -> OPAR INT COMMA . INT CPAR
    (41) edge_expression -> OPAR INT COMMA . INT COMMA INT CPAR
    (43) edge_expression -> OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 142


state 133

    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression . CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 143
    OPAR            shift and go to state 120


state 134

    (38) edge_expression -> edge_expression OPAR INT . COMMA INT CPAR
    (40) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA INT CPAR
    (42) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 144


state 135

    (17) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 145
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 136

    (26) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression . CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 146
    OPAR            shift and go to state 120


state 137

    (28) graph_expression -> GRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 147


state 138

    (27) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression . CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 148
    OPAR            shift and go to state 120


state 139

    (29) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 149


state 140

    (14) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .
    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END . ELSE BEGIN Instructions END

    PLOT            reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    IF              reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FORVERTEX       reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ID              reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FOREDGE         reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    $end            reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    END             reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ELSE            shift and go to state 150


state 141

    (16) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    END             reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)


state 142

    (39) edge_expression -> OPAR INT COMMA INT . CPAR
    (41) edge_expression -> OPAR INT COMMA INT . COMMA INT CPAR
    (43) edge_expression -> OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 152
    COMMA           shift and go to state 151


state 143

    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .

    PLOT            reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    END             reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)


state 144

    (38) edge_expression -> edge_expression OPAR INT COMMA . INT CPAR
    (40) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA INT CPAR
    (42) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 153


state 145

    (17) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    END             reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)


state 146

    (26) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .

    CPAR            reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    UNION           reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 26 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 147

    (28) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (44) edge_expression -> . empty
    (63) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 79
    CPAR            reduce using rule 63 (empty -> .)

  ! OPAR            [ reduce using rule 63 (empty -> .) ]

    edge_expression                shift and go to state 154
    empty                          shift and go to state 83

state 148

    (27) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .

    CPAR            reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    UNION           reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 27 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 149

    (29) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (43) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (44) edge_expression -> . empty
    (63) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 79
    CPAR            reduce using rule 63 (empty -> .)

  ! OPAR            [ reduce using rule 63 (empty -> .) ]

    edge_expression                shift and go to state 155
    empty                          shift and go to state 83

state 150

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE . BEGIN Instructions END

    BEGIN           shift and go to state 156


state 151

    (41) edge_expression -> OPAR INT COMMA INT COMMA . INT CPAR
    (43) edge_expression -> OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 157
    FLOAT           shift and go to state 158


state 152

    (39) edge_expression -> OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 39 (edge_expression -> OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 39 (edge_expression -> OPAR INT COMMA INT CPAR .)


state 153

    (38) edge_expression -> edge_expression OPAR INT COMMA INT . CPAR
    (40) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA INT CPAR
    (42) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 160
    COMMA           shift and go to state 159


state 154

    (28) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 161
    OPAR            shift and go to state 120


state 155

    (29) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (42) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 162
    OPAR            shift and go to state 120


state 156

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 163
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 157

    (41) edge_expression -> OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 164


state 158

    (43) edge_expression -> OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 165


state 159

    (40) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . INT CPAR
    (42) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 166
    FLOAT           shift and go to state 167


state 160

    (38) edge_expression -> edge_expression OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 38 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 38 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)


state 161

    (28) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    CPAR            reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    UNION           reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 28 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 162

    (29) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    CPAR            reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    UNION           reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 29 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 163

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 168
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 164

    (41) edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 41 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 41 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)


state 165

    (43) edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 43 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 43 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 166

    (40) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 169


state 167

    (42) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 170


state 168

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .

    PLOT            reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    IF              reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FORVERTEX       reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    ID              reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FOREDGE         reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    $end            reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    END             reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)


state 169

    (40) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 40 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 40 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)


state 170

    (42) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 42 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 42 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPAR in state 48 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 111 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 118 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 123 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 125 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 147 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 149 resolved as shift
WARNING: reduce/reduce conflict in state 41 resolved using rule (value_expression -> numeric_function)
WARNING: rejected rule (algebraic_expression -> numeric_function) in state 41
