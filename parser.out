Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EDGE
    ELIF
    STRING

Grammar

Rule 0     S' -> Instructions
Rule 1     Instructions -> Instructions Instruction
Rule 2     Instructions -> Instruction
Rule 3     Instruction -> Plot_instr
Rule 4     Instruction -> If_instr
Rule 5     Instruction -> If_else_instr
Rule 6     Instruction -> For_vertex_instr
Rule 7     Instruction -> Assign_instr
Rule 8     Instruction -> For_edge_instr
Rule 9     If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END
Rule 10    If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
Rule 11    For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END
Rule 12    For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END
Rule 13    Plot_instr -> PLOT OPAR ID CPAR
Rule 14    Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
Rule 15    Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
Rule 16    Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
Rule 17    Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR
Rule 18    edge_expression -> edge_expression OPAR INT COMMA INT CPAR
Rule 19    edge_expression -> OPAR INT COMMA INT CPAR
Rule 20    edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR
Rule 21    edge_expression -> OPAR INT COMMA INT COMMA INT CPAR
Rule 22    edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 23    edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 24    logic_expression -> value_expression EQUAL value_expression
Rule 25    logic_expression -> value_expression GREATER value_expression
Rule 26    logic_expression -> value_expression LESS value_expression
Rule 27    logic_expression -> value_expression GREATEREQ value_expression
Rule 28    logic_expression -> value_expression LESSEQ value_expression
Rule 29    logic_expression -> value_expression NEQUAL value_expression
Rule 30    value_expression -> algebraic_expression
Rule 31    algebraic_expression -> INT
Rule 32    algebraic_expression -> FLOAT
Rule 33    algebraic_expression -> algebraic_expression PLUS algebraic_expression
Rule 34    algebraic_expression -> algebraic_expression MINUS algebraic_expression
Rule 35    algebraic_expression -> algebraic_expression MUL algebraic_expression
Rule 36    algebraic_expression -> algebraic_expression DIV algebraic_expression
Rule 37    algebraic_expression -> MINUS algebraic_expression

Terminals, with rules where they appear

ASSIGN               : 14 15 16 17
BEGIN                : 9 10 10 11 12
COMMA                : 14 15 16 17 18 19 20 20 21 21 22 22 23 23
CPAR                 : 9 10 13 14 15 16 17 18 19 20 21 22 23
DIGRAPH              : 15
DIV                  : 36
EDGE                 : 
ELIF                 : 
ELSE                 : 10
END                  : 9 10 10 11 12
EQUAL                : 24
FLOAT                : 22 23 32
FOREDGE              : 12
FORVERTEX            : 11
GRAPH                : 14
GREATER              : 25
GREATEREQ            : 27
ID                   : 11 11 12 12 13 14 15 16 17
IF                   : 9 10
IN                   : 11 12
INT                  : 14 15 16 17 18 18 19 19 20 20 20 21 21 21 22 22 23 23 31
LESS                 : 26
LESSEQ               : 28
MINUS                : 34 37
MUL                  : 35
MULTIGRAPH           : 16
NEQUAL               : 29
OPAR                 : 9 10 13 14 15 16 17 18 19 20 21 22 23
PLOT                 : 13
PLUS                 : 33
PSEUDOGRAPH          : 17
STRING               : 
error                : 

Nonterminals, with rules where they appear

Assign_instr         : 7
For_edge_instr       : 8
For_vertex_instr     : 6
If_else_instr        : 5
If_instr             : 4
Instruction          : 1 2
Instructions         : 1 9 10 10 11 12 0
Plot_instr           : 3
algebraic_expression : 30 33 33 34 34 35 35 36 36 37
edge_expression      : 14 15 16 17 18 20 22
logic_expression     : 9 10
value_expression     : 24 24 25 25 26 26 27 27 28 28 29 29

Parsing method: LALR

state 0

    (0) S' -> . Instructions
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> . ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> . ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> . ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instructions                   shift and go to state 1
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 1

    (0) S' -> Instructions .
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> . ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> . ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> . ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instruction                    shift and go to state 14
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 2

    (2) Instructions -> Instruction .

    PLOT            reduce using rule 2 (Instructions -> Instruction .)
    IF              reduce using rule 2 (Instructions -> Instruction .)
    FORVERTEX       reduce using rule 2 (Instructions -> Instruction .)
    ID              reduce using rule 2 (Instructions -> Instruction .)
    FOREDGE         reduce using rule 2 (Instructions -> Instruction .)
    $end            reduce using rule 2 (Instructions -> Instruction .)
    END             reduce using rule 2 (Instructions -> Instruction .)


state 3

    (3) Instruction -> Plot_instr .

    PLOT            reduce using rule 3 (Instruction -> Plot_instr .)
    IF              reduce using rule 3 (Instruction -> Plot_instr .)
    FORVERTEX       reduce using rule 3 (Instruction -> Plot_instr .)
    ID              reduce using rule 3 (Instruction -> Plot_instr .)
    FOREDGE         reduce using rule 3 (Instruction -> Plot_instr .)
    $end            reduce using rule 3 (Instruction -> Plot_instr .)
    END             reduce using rule 3 (Instruction -> Plot_instr .)


state 4

    (4) Instruction -> If_instr .

    PLOT            reduce using rule 4 (Instruction -> If_instr .)
    IF              reduce using rule 4 (Instruction -> If_instr .)
    FORVERTEX       reduce using rule 4 (Instruction -> If_instr .)
    ID              reduce using rule 4 (Instruction -> If_instr .)
    FOREDGE         reduce using rule 4 (Instruction -> If_instr .)
    $end            reduce using rule 4 (Instruction -> If_instr .)
    END             reduce using rule 4 (Instruction -> If_instr .)


state 5

    (5) Instruction -> If_else_instr .

    PLOT            reduce using rule 5 (Instruction -> If_else_instr .)
    IF              reduce using rule 5 (Instruction -> If_else_instr .)
    FORVERTEX       reduce using rule 5 (Instruction -> If_else_instr .)
    ID              reduce using rule 5 (Instruction -> If_else_instr .)
    FOREDGE         reduce using rule 5 (Instruction -> If_else_instr .)
    $end            reduce using rule 5 (Instruction -> If_else_instr .)
    END             reduce using rule 5 (Instruction -> If_else_instr .)


state 6

    (6) Instruction -> For_vertex_instr .

    PLOT            reduce using rule 6 (Instruction -> For_vertex_instr .)
    IF              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FORVERTEX       reduce using rule 6 (Instruction -> For_vertex_instr .)
    ID              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FOREDGE         reduce using rule 6 (Instruction -> For_vertex_instr .)
    $end            reduce using rule 6 (Instruction -> For_vertex_instr .)
    END             reduce using rule 6 (Instruction -> For_vertex_instr .)


state 7

    (7) Instruction -> Assign_instr .

    PLOT            reduce using rule 7 (Instruction -> Assign_instr .)
    IF              reduce using rule 7 (Instruction -> Assign_instr .)
    FORVERTEX       reduce using rule 7 (Instruction -> Assign_instr .)
    ID              reduce using rule 7 (Instruction -> Assign_instr .)
    FOREDGE         reduce using rule 7 (Instruction -> Assign_instr .)
    $end            reduce using rule 7 (Instruction -> Assign_instr .)
    END             reduce using rule 7 (Instruction -> Assign_instr .)


state 8

    (8) Instruction -> For_edge_instr .

    PLOT            reduce using rule 8 (Instruction -> For_edge_instr .)
    IF              reduce using rule 8 (Instruction -> For_edge_instr .)
    FORVERTEX       reduce using rule 8 (Instruction -> For_edge_instr .)
    ID              reduce using rule 8 (Instruction -> For_edge_instr .)
    FOREDGE         reduce using rule 8 (Instruction -> For_edge_instr .)
    $end            reduce using rule 8 (Instruction -> For_edge_instr .)
    END             reduce using rule 8 (Instruction -> For_edge_instr .)


state 9

    (13) Plot_instr -> PLOT . OPAR ID CPAR

    OPAR            shift and go to state 15


state 10

    (14) Assign_instr -> ID . ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> ID . ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> ID . ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> ID . ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR

    ASSIGN          shift and go to state 16


state 11

    (9) If_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    OPAR            shift and go to state 17


state 12

    (11) For_vertex_instr -> FORVERTEX . ID IN ID BEGIN Instructions END

    ID              shift and go to state 18


state 13

    (12) For_edge_instr -> FOREDGE . ID IN ID BEGIN Instructions END

    ID              shift and go to state 19


state 14

    (1) Instructions -> Instructions Instruction .

    PLOT            reduce using rule 1 (Instructions -> Instructions Instruction .)
    IF              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FORVERTEX       reduce using rule 1 (Instructions -> Instructions Instruction .)
    ID              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FOREDGE         reduce using rule 1 (Instructions -> Instructions Instruction .)
    $end            reduce using rule 1 (Instructions -> Instructions Instruction .)
    END             reduce using rule 1 (Instructions -> Instructions Instruction .)


state 15

    (13) Plot_instr -> PLOT OPAR . ID CPAR

    ID              shift and go to state 20


state 16

    (14) Assign_instr -> ID ASSIGN . GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> ID ASSIGN . DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> ID ASSIGN . MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> ID ASSIGN . PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR

    GRAPH           shift and go to state 21
    DIGRAPH         shift and go to state 22
    MULTIGRAPH      shift and go to state 23
    PSEUDOGRAPH     shift and go to state 24


state 17

    (9) If_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (24) logic_expression -> . value_expression EQUAL value_expression
    (25) logic_expression -> . value_expression GREATER value_expression
    (26) logic_expression -> . value_expression LESS value_expression
    (27) logic_expression -> . value_expression GREATEREQ value_expression
    (28) logic_expression -> . value_expression LESSEQ value_expression
    (29) logic_expression -> . value_expression NEQUAL value_expression
    (30) value_expression -> . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    logic_expression               shift and go to state 25
    value_expression               shift and go to state 26
    algebraic_expression           shift and go to state 27

state 18

    (11) For_vertex_instr -> FORVERTEX ID . IN ID BEGIN Instructions END

    IN              shift and go to state 31


state 19

    (12) For_edge_instr -> FOREDGE ID . IN ID BEGIN Instructions END

    IN              shift and go to state 32


state 20

    (13) Plot_instr -> PLOT OPAR ID . CPAR

    CPAR            shift and go to state 33


state 21

    (14) Assign_instr -> ID ASSIGN GRAPH . OPAR INT COMMA edge_expression CPAR

    OPAR            shift and go to state 34


state 22

    (15) Assign_instr -> ID ASSIGN DIGRAPH . OPAR INT COMMA edge_expression CPAR

    OPAR            shift and go to state 35


state 23

    (16) Assign_instr -> ID ASSIGN MULTIGRAPH . OPAR INT COMMA edge_expression CPAR

    OPAR            shift and go to state 36


state 24

    (17) Assign_instr -> ID ASSIGN PSEUDOGRAPH . OPAR INT COMMA edge_expression CPAR

    OPAR            shift and go to state 37


state 25

    (9) If_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END
    (10) If_else_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    CPAR            shift and go to state 38


state 26

    (24) logic_expression -> value_expression . EQUAL value_expression
    (25) logic_expression -> value_expression . GREATER value_expression
    (26) logic_expression -> value_expression . LESS value_expression
    (27) logic_expression -> value_expression . GREATEREQ value_expression
    (28) logic_expression -> value_expression . LESSEQ value_expression
    (29) logic_expression -> value_expression . NEQUAL value_expression

    EQUAL           shift and go to state 39
    GREATER         shift and go to state 40
    LESS            shift and go to state 41
    GREATEREQ       shift and go to state 42
    LESSEQ          shift and go to state 43
    NEQUAL          shift and go to state 44


state 27

    (30) value_expression -> algebraic_expression .
    (33) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (34) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (35) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (36) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    EQUAL           reduce using rule 30 (value_expression -> algebraic_expression .)
    GREATER         reduce using rule 30 (value_expression -> algebraic_expression .)
    LESS            reduce using rule 30 (value_expression -> algebraic_expression .)
    GREATEREQ       reduce using rule 30 (value_expression -> algebraic_expression .)
    LESSEQ          reduce using rule 30 (value_expression -> algebraic_expression .)
    NEQUAL          reduce using rule 30 (value_expression -> algebraic_expression .)
    CPAR            reduce using rule 30 (value_expression -> algebraic_expression .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MUL             shift and go to state 47
    DIV             shift and go to state 48


state 28

    (31) algebraic_expression -> INT .

    PLUS            reduce using rule 31 (algebraic_expression -> INT .)
    MINUS           reduce using rule 31 (algebraic_expression -> INT .)
    MUL             reduce using rule 31 (algebraic_expression -> INT .)
    DIV             reduce using rule 31 (algebraic_expression -> INT .)
    EQUAL           reduce using rule 31 (algebraic_expression -> INT .)
    GREATER         reduce using rule 31 (algebraic_expression -> INT .)
    LESS            reduce using rule 31 (algebraic_expression -> INT .)
    GREATEREQ       reduce using rule 31 (algebraic_expression -> INT .)
    LESSEQ          reduce using rule 31 (algebraic_expression -> INT .)
    NEQUAL          reduce using rule 31 (algebraic_expression -> INT .)
    CPAR            reduce using rule 31 (algebraic_expression -> INT .)


state 29

    (32) algebraic_expression -> FLOAT .

    PLUS            reduce using rule 32 (algebraic_expression -> FLOAT .)
    MINUS           reduce using rule 32 (algebraic_expression -> FLOAT .)
    MUL             reduce using rule 32 (algebraic_expression -> FLOAT .)
    DIV             reduce using rule 32 (algebraic_expression -> FLOAT .)
    EQUAL           reduce using rule 32 (algebraic_expression -> FLOAT .)
    GREATER         reduce using rule 32 (algebraic_expression -> FLOAT .)
    LESS            reduce using rule 32 (algebraic_expression -> FLOAT .)
    GREATEREQ       reduce using rule 32 (algebraic_expression -> FLOAT .)
    LESSEQ          reduce using rule 32 (algebraic_expression -> FLOAT .)
    NEQUAL          reduce using rule 32 (algebraic_expression -> FLOAT .)
    CPAR            reduce using rule 32 (algebraic_expression -> FLOAT .)


state 30

    (37) algebraic_expression -> MINUS . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    algebraic_expression           shift and go to state 49

state 31

    (11) For_vertex_instr -> FORVERTEX ID IN . ID BEGIN Instructions END

    ID              shift and go to state 50


state 32

    (12) For_edge_instr -> FOREDGE ID IN . ID BEGIN Instructions END

    ID              shift and go to state 51


state 33

    (13) Plot_instr -> PLOT OPAR ID CPAR .

    PLOT            reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    IF              reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    FORVERTEX       reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    ID              reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    FOREDGE         reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    $end            reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    END             reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)


state 34

    (14) Assign_instr -> ID ASSIGN GRAPH OPAR . INT COMMA edge_expression CPAR

    INT             shift and go to state 52


state 35

    (15) Assign_instr -> ID ASSIGN DIGRAPH OPAR . INT COMMA edge_expression CPAR

    INT             shift and go to state 53


state 36

    (16) Assign_instr -> ID ASSIGN MULTIGRAPH OPAR . INT COMMA edge_expression CPAR

    INT             shift and go to state 54


state 37

    (17) Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR . INT COMMA edge_expression CPAR

    INT             shift and go to state 55


state 38

    (9) If_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END
    (10) If_else_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END ELSE BEGIN Instructions END

    BEGIN           shift and go to state 56


state 39

    (24) logic_expression -> value_expression EQUAL . value_expression
    (30) value_expression -> . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    value_expression               shift and go to state 57
    algebraic_expression           shift and go to state 27

state 40

    (25) logic_expression -> value_expression GREATER . value_expression
    (30) value_expression -> . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    value_expression               shift and go to state 58
    algebraic_expression           shift and go to state 27

state 41

    (26) logic_expression -> value_expression LESS . value_expression
    (30) value_expression -> . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    value_expression               shift and go to state 59
    algebraic_expression           shift and go to state 27

state 42

    (27) logic_expression -> value_expression GREATEREQ . value_expression
    (30) value_expression -> . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    value_expression               shift and go to state 60
    algebraic_expression           shift and go to state 27

state 43

    (28) logic_expression -> value_expression LESSEQ . value_expression
    (30) value_expression -> . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    value_expression               shift and go to state 61
    algebraic_expression           shift and go to state 27

state 44

    (29) logic_expression -> value_expression NEQUAL . value_expression
    (30) value_expression -> . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    value_expression               shift and go to state 62
    algebraic_expression           shift and go to state 27

state 45

    (33) algebraic_expression -> algebraic_expression PLUS . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    algebraic_expression           shift and go to state 63

state 46

    (34) algebraic_expression -> algebraic_expression MINUS . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    algebraic_expression           shift and go to state 64

state 47

    (35) algebraic_expression -> algebraic_expression MUL . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    algebraic_expression           shift and go to state 65

state 48

    (36) algebraic_expression -> algebraic_expression DIV . algebraic_expression
    (31) algebraic_expression -> . INT
    (32) algebraic_expression -> . FLOAT
    (33) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (34) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (35) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (36) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (37) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    MINUS           shift and go to state 30

    algebraic_expression           shift and go to state 66

state 49

    (37) algebraic_expression -> MINUS algebraic_expression .
    (33) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (34) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (35) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (36) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 37 (algebraic_expression -> MINUS algebraic_expression .)
    MINUS           reduce using rule 37 (algebraic_expression -> MINUS algebraic_expression .)
    MUL             reduce using rule 37 (algebraic_expression -> MINUS algebraic_expression .)
    DIV             reduce using rule 37 (algebraic_expression -> MINUS algebraic_expression .)
    EQUAL           reduce using rule 37 (algebraic_expression -> MINUS algebraic_expression .)
    GREATER         reduce using rule 37 (algebraic_expression -> MINUS algebraic_expression .)
    LESS            reduce using rule 37 (algebraic_expression -> MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 37 (algebraic_expression -> MINUS algebraic_expression .)
    LESSEQ          reduce using rule 37 (algebraic_expression -> MINUS algebraic_expression .)
    NEQUAL          reduce using rule 37 (algebraic_expression -> MINUS algebraic_expression .)
    CPAR            reduce using rule 37 (algebraic_expression -> MINUS algebraic_expression .)

  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIV             [ shift and go to state 48 ]


state 50

    (11) For_vertex_instr -> FORVERTEX ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 67


state 51

    (12) For_edge_instr -> FOREDGE ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 68


state 52

    (14) Assign_instr -> ID ASSIGN GRAPH OPAR INT . COMMA edge_expression CPAR

    COMMA           shift and go to state 69


state 53

    (15) Assign_instr -> ID ASSIGN DIGRAPH OPAR INT . COMMA edge_expression CPAR

    COMMA           shift and go to state 70


state 54

    (16) Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT . COMMA edge_expression CPAR

    COMMA           shift and go to state 71


state 55

    (17) Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT . COMMA edge_expression CPAR

    COMMA           shift and go to state 72


state 56

    (9) If_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END
    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END ELSE BEGIN Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> . ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> . ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> . ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instructions                   shift and go to state 73
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 57

    (24) logic_expression -> value_expression EQUAL value_expression .

    CPAR            reduce using rule 24 (logic_expression -> value_expression EQUAL value_expression .)


state 58

    (25) logic_expression -> value_expression GREATER value_expression .

    CPAR            reduce using rule 25 (logic_expression -> value_expression GREATER value_expression .)


state 59

    (26) logic_expression -> value_expression LESS value_expression .

    CPAR            reduce using rule 26 (logic_expression -> value_expression LESS value_expression .)


state 60

    (27) logic_expression -> value_expression GREATEREQ value_expression .

    CPAR            reduce using rule 27 (logic_expression -> value_expression GREATEREQ value_expression .)


state 61

    (28) logic_expression -> value_expression LESSEQ value_expression .

    CPAR            reduce using rule 28 (logic_expression -> value_expression LESSEQ value_expression .)


state 62

    (29) logic_expression -> value_expression NEQUAL value_expression .

    CPAR            reduce using rule 29 (logic_expression -> value_expression NEQUAL value_expression .)


state 63

    (33) algebraic_expression -> algebraic_expression PLUS algebraic_expression .
    (33) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (34) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (35) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (36) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 33 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MINUS           reduce using rule 33 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    EQUAL           reduce using rule 33 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATER         reduce using rule 33 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESS            reduce using rule 33 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATEREQ       reduce using rule 33 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESSEQ          reduce using rule 33 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    NEQUAL          reduce using rule 33 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    CPAR            reduce using rule 33 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MUL             shift and go to state 47
    DIV             shift and go to state 48

  ! MUL             [ reduce using rule 33 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 33 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]


state 64

    (34) algebraic_expression -> algebraic_expression MINUS algebraic_expression .
    (33) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (34) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (35) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (36) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 34 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MINUS           reduce using rule 34 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    EQUAL           reduce using rule 34 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATER         reduce using rule 34 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESS            reduce using rule 34 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 34 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESSEQ          reduce using rule 34 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    NEQUAL          reduce using rule 34 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    CPAR            reduce using rule 34 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MUL             shift and go to state 47
    DIV             shift and go to state 48

  ! MUL             [ reduce using rule 34 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 34 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]


state 65

    (35) algebraic_expression -> algebraic_expression MUL algebraic_expression .
    (33) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (34) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (35) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (36) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 35 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MINUS           reduce using rule 35 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MUL             reduce using rule 35 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    DIV             reduce using rule 35 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    EQUAL           reduce using rule 35 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATER         reduce using rule 35 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESS            reduce using rule 35 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATEREQ       reduce using rule 35 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESSEQ          reduce using rule 35 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    NEQUAL          reduce using rule 35 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    CPAR            reduce using rule 35 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)

  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIV             [ shift and go to state 48 ]


state 66

    (36) algebraic_expression -> algebraic_expression DIV algebraic_expression .
    (33) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (34) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (35) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (36) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 36 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MINUS           reduce using rule 36 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MUL             reduce using rule 36 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    DIV             reduce using rule 36 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    EQUAL           reduce using rule 36 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATER         reduce using rule 36 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESS            reduce using rule 36 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATEREQ       reduce using rule 36 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESSEQ          reduce using rule 36 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    NEQUAL          reduce using rule 36 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    CPAR            reduce using rule 36 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)

  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MUL             [ shift and go to state 47 ]
  ! DIV             [ shift and go to state 48 ]


state 67

    (11) For_vertex_instr -> FORVERTEX ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> . ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> . ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> . ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instructions                   shift and go to state 74
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 68

    (12) For_edge_instr -> FOREDGE ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> . ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> . ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> . ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instructions                   shift and go to state 75
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 69

    (14) Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA . edge_expression CPAR
    (18) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (19) edge_expression -> . OPAR INT COMMA INT CPAR
    (20) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (21) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (22) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (23) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR

    OPAR            shift and go to state 76

    edge_expression                shift and go to state 77

state 70

    (15) Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA . edge_expression CPAR
    (18) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (19) edge_expression -> . OPAR INT COMMA INT CPAR
    (20) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (21) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (22) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (23) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR

    OPAR            shift and go to state 76

    edge_expression                shift and go to state 78

state 71

    (16) Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA . edge_expression CPAR
    (18) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (19) edge_expression -> . OPAR INT COMMA INT CPAR
    (20) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (21) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (22) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (23) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR

    OPAR            shift and go to state 76

    edge_expression                shift and go to state 79

state 72

    (17) Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA . edge_expression CPAR
    (18) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (19) edge_expression -> . OPAR INT COMMA INT CPAR
    (20) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (21) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (22) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (23) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR

    OPAR            shift and go to state 76

    edge_expression                shift and go to state 80

state 73

    (9) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END
    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END ELSE BEGIN Instructions END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> . ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> . ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> . ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    END             shift and go to state 81
    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instruction                    shift and go to state 14
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 74

    (11) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> . ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> . ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> . ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    END             shift and go to state 82
    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instruction                    shift and go to state 14
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 75

    (12) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> . ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> . ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> . ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    END             shift and go to state 83
    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instruction                    shift and go to state 14
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 76

    (19) edge_expression -> OPAR . INT COMMA INT CPAR
    (21) edge_expression -> OPAR . INT COMMA INT COMMA INT CPAR
    (23) edge_expression -> OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 84


state 77

    (14) Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA edge_expression . CPAR
    (18) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (20) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (22) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 86
    OPAR            shift and go to state 85


state 78

    (15) Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression . CPAR
    (18) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (20) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (22) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 87
    OPAR            shift and go to state 85


state 79

    (16) Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression . CPAR
    (18) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (20) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (22) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 88
    OPAR            shift and go to state 85


state 80

    (17) Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression . CPAR
    (18) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (20) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (22) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 89
    OPAR            shift and go to state 85


state 81

    (9) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .
    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END . ELSE BEGIN Instructions END

    PLOT            reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    IF              reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FORVERTEX       reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ID              reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FOREDGE         reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    $end            reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    END             reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ELSE            shift and go to state 90


state 82

    (11) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    END             reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)


state 83

    (12) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    END             reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)


state 84

    (19) edge_expression -> OPAR INT . COMMA INT CPAR
    (21) edge_expression -> OPAR INT . COMMA INT COMMA INT CPAR
    (23) edge_expression -> OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 91


state 85

    (18) edge_expression -> edge_expression OPAR . INT COMMA INT CPAR
    (20) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA INT CPAR
    (22) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 92


state 86

    (14) Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR .

    PLOT            reduce using rule 14 (Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR .)
    IF              reduce using rule 14 (Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 14 (Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR .)
    ID              reduce using rule 14 (Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 14 (Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR .)
    $end            reduce using rule 14 (Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR .)
    END             reduce using rule 14 (Assign_instr -> ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR .)


state 87

    (15) Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR .

    PLOT            reduce using rule 15 (Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    IF              reduce using rule 15 (Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 15 (Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    ID              reduce using rule 15 (Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 15 (Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    $end            reduce using rule 15 (Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    END             reduce using rule 15 (Assign_instr -> ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR .)


state 88

    (16) Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR .

    PLOT            reduce using rule 16 (Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR .)
    IF              reduce using rule 16 (Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 16 (Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR .)
    ID              reduce using rule 16 (Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 16 (Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR .)
    $end            reduce using rule 16 (Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR .)
    END             reduce using rule 16 (Assign_instr -> ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR .)


state 89

    (17) Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR .

    PLOT            reduce using rule 17 (Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR .)
    IF              reduce using rule 17 (Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 17 (Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR .)
    ID              reduce using rule 17 (Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 17 (Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR .)
    $end            reduce using rule 17 (Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR .)
    END             reduce using rule 17 (Assign_instr -> ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR .)


state 90

    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE . BEGIN Instructions END

    BEGIN           shift and go to state 93


state 91

    (19) edge_expression -> OPAR INT COMMA . INT CPAR
    (21) edge_expression -> OPAR INT COMMA . INT COMMA INT CPAR
    (23) edge_expression -> OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 94


state 92

    (18) edge_expression -> edge_expression OPAR INT . COMMA INT CPAR
    (20) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA INT CPAR
    (22) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 95


state 93

    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> . ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> . ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> . ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instructions                   shift and go to state 96
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 94

    (19) edge_expression -> OPAR INT COMMA INT . CPAR
    (21) edge_expression -> OPAR INT COMMA INT . COMMA INT CPAR
    (23) edge_expression -> OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 98
    COMMA           shift and go to state 97


state 95

    (18) edge_expression -> edge_expression OPAR INT COMMA . INT CPAR
    (20) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA INT CPAR
    (22) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 99


state 96

    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN GRAPH OPAR INT COMMA edge_expression CPAR
    (15) Assign_instr -> . ID ASSIGN DIGRAPH OPAR INT COMMA edge_expression CPAR
    (16) Assign_instr -> . ID ASSIGN MULTIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) Assign_instr -> . ID ASSIGN PSEUDOGRAPH OPAR INT COMMA edge_expression CPAR
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    END             shift and go to state 100
    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instruction                    shift and go to state 14
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 97

    (21) edge_expression -> OPAR INT COMMA INT COMMA . INT CPAR
    (23) edge_expression -> OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 101
    FLOAT           shift and go to state 102


state 98

    (19) edge_expression -> OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 19 (edge_expression -> OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 19 (edge_expression -> OPAR INT COMMA INT CPAR .)


state 99

    (18) edge_expression -> edge_expression OPAR INT COMMA INT . CPAR
    (20) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA INT CPAR
    (22) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 104
    COMMA           shift and go to state 103


state 100

    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .

    PLOT            reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    IF              reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FORVERTEX       reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    ID              reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FOREDGE         reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    $end            reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    END             reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)


state 101

    (21) edge_expression -> OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 105


state 102

    (23) edge_expression -> OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 106


state 103

    (20) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . INT CPAR
    (22) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 107
    FLOAT           shift and go to state 108


state 104

    (18) edge_expression -> edge_expression OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 18 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 18 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)


state 105

    (21) edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 21 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 21 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)


state 106

    (23) edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 23 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 23 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 107

    (20) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 109


state 108

    (22) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 110


state 109

    (20) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 20 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 20 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)


state 110

    (22) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 22 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 22 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)

