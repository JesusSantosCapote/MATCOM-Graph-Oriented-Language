Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EDGE
    ELIF
    MULTIGRAPH
    PSEUDOGRAPH
    STRING

Grammar

Rule 0     S' -> Instructions
Rule 1     Instructions -> Instructions Instruction
Rule 2     Instructions -> Instruction
Rule 3     Instruction -> Plot_instr
Rule 4     Instruction -> If_instr
Rule 5     Instruction -> If_else_instr
Rule 6     Instruction -> For_vertex_instr
Rule 7     Instruction -> Assign_instr
Rule 8     Instruction -> For_edge_instr
Rule 9     Instruction -> Add_vertex_instr
Rule 10    Instruction -> Add_edge_instr
Rule 11    Instruction -> Add_vertex_and_edge_instr
Rule 12    If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END
Rule 13    If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
Rule 14    For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END
Rule 15    For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END
Rule 16    Plot_instr -> PLOT OPAR ID CPAR
Rule 17    Assign_instr -> ID ASSIGN graph_expression
Rule 18    Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR
Rule 19    Add_edge_instr -> ID ADD OPAR edge_expression CPAR
Rule 20    Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR
Rule 21    graph_expression -> OPAR graph_expression CPAR
Rule 22    graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 23    graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 24    graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 25    graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 26    graph_expression -> graph_expression UNION graph_expression
Rule 27    graph_expression -> graph_expression INTERSECTION graph_expression
Rule 28    graph_expression -> graph_expression DIFFERENCE graph_expression
Rule 29    graph_expression -> graph_expression CONCAT graph_expression
Rule 30    graph_expression -> COMPLEMENT OPAR graph_expression CPAR
Rule 31    graph_expression -> ID
Rule 32    vertex_expression -> vertex_expression INT
Rule 33    vertex_expression -> INT
Rule 34    edge_expression -> edge_expression OPAR INT COMMA INT CPAR
Rule 35    edge_expression -> OPAR INT COMMA INT CPAR
Rule 36    edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR
Rule 37    edge_expression -> OPAR INT COMMA INT COMMA INT CPAR
Rule 38    edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 39    edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 40    edge_expression -> empty
Rule 41    logic_expression -> value_expression EQUAL value_expression
Rule 42    logic_expression -> value_expression GREATER value_expression
Rule 43    logic_expression -> value_expression LESS value_expression
Rule 44    logic_expression -> value_expression GREATEREQ value_expression
Rule 45    logic_expression -> value_expression LESSEQ value_expression
Rule 46    logic_expression -> value_expression NEQUAL value_expression
Rule 47    logic_expression -> logic_function
Rule 48    value_expression -> algebraic_expression
Rule 49    value_expression -> numeric_function
Rule 50    algebraic_expression -> INT
Rule 51    algebraic_expression -> FLOAT
Rule 52    algebraic_expression -> OPAR algebraic_expression CPAR
Rule 53    algebraic_expression -> numeric_function
Rule 54    algebraic_expression -> algebraic_expression PLUS algebraic_expression
Rule 55    algebraic_expression -> algebraic_expression MINUS algebraic_expression
Rule 56    algebraic_expression -> algebraic_expression MUL algebraic_expression
Rule 57    algebraic_expression -> algebraic_expression DIV algebraic_expression
Rule 58    algebraic_expression -> MINUS algebraic_expression
Rule 59    empty -> <empty>
Rule 60    numeric_function -> graph_expression POINT NODES_COUNT
Rule 61    numeric_function -> graph_expression POINT EDGES_COUNT
Rule 62    numeric_function -> graph_expression POINT WEIGHT_SUM
Rule 63    logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression
Rule 64    logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression

Terminals, with rules where they appear

ADD                  : 18 19 20
ASSIGN               : 17
BEGIN                : 12 13 13 14 15
CBR                  : 24 25
COMMA                : 20 22 23 24 25 34 35 36 36 37 37 38 38 39 39
COMPLEMENT           : 30
CONCAT               : 29
CONTAIN_EDGES        : 64
CONTAIN_VERTEX       : 63
CPAR                 : 12 13 16 18 19 20 21 22 23 24 25 30 34 35 36 37 38 39 52
DIFFERENCE           : 28
DIGRAPH              : 23 25
DIV                  : 57
EDGE                 : 
EDGES_COUNT          : 61
ELIF                 : 
ELSE                 : 13
END                  : 12 13 13 14 15
EQUAL                : 41
FLOAT                : 38 39 51
FOREDGE              : 15
FORVERTEX            : 14
GRAPH                : 22 24
GREATER              : 42
GREATEREQ            : 44
ID                   : 14 14 15 15 16 17 18 19 20 31
IF                   : 12 13
IN                   : 14 15
INT                  : 32 33 34 34 35 35 36 36 36 37 37 37 38 38 39 39 50
INTERSECTION         : 27
LESS                 : 43
LESSEQ               : 45
MINUS                : 55 58
MUL                  : 56
MULTIGRAPH           : 
NEQUAL               : 46
NODES_COUNT          : 60
OBR                  : 24 25
OPAR                 : 12 13 16 18 19 20 21 22 23 24 25 30 34 35 36 37 38 39 52
PLOT                 : 16
PLUS                 : 54
POINT                : 60 61 62 63 64
PSEUDOGRAPH          : 
STRING               : 
UNION                : 26
WEIGHT_SUM           : 62
error                : 

Nonterminals, with rules where they appear

Add_edge_instr       : 10
Add_vertex_and_edge_instr : 11
Add_vertex_instr     : 9
Assign_instr         : 7
For_edge_instr       : 8
For_vertex_instr     : 6
If_else_instr        : 5
If_instr             : 4
Instruction          : 1 2
Instructions         : 1 12 13 13 14 15 0
Plot_instr           : 3
algebraic_expression : 48 52 54 54 55 55 56 56 57 57 58
edge_expression      : 19 20 22 23 24 25 34 36 38 64
empty                : 40
graph_expression     : 17 21 26 26 27 27 28 28 29 29 30 60 61 62 63 64
logic_expression     : 12 13
logic_function       : 47
numeric_function     : 49 53
value_expression     : 22 23 41 41 42 42 43 43 44 44 45 45 46 46 63
vertex_expression    : 18 20 24 25 32

Parsing method: LALR

state 0

    (0) S' -> . Instructions
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 1
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 1

    (0) S' -> Instructions .
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 2

    (2) Instructions -> Instruction .

    PLOT            reduce using rule 2 (Instructions -> Instruction .)
    IF              reduce using rule 2 (Instructions -> Instruction .)
    FORVERTEX       reduce using rule 2 (Instructions -> Instruction .)
    ID              reduce using rule 2 (Instructions -> Instruction .)
    FOREDGE         reduce using rule 2 (Instructions -> Instruction .)
    $end            reduce using rule 2 (Instructions -> Instruction .)
    END             reduce using rule 2 (Instructions -> Instruction .)


state 3

    (3) Instruction -> Plot_instr .

    PLOT            reduce using rule 3 (Instruction -> Plot_instr .)
    IF              reduce using rule 3 (Instruction -> Plot_instr .)
    FORVERTEX       reduce using rule 3 (Instruction -> Plot_instr .)
    ID              reduce using rule 3 (Instruction -> Plot_instr .)
    FOREDGE         reduce using rule 3 (Instruction -> Plot_instr .)
    $end            reduce using rule 3 (Instruction -> Plot_instr .)
    END             reduce using rule 3 (Instruction -> Plot_instr .)


state 4

    (4) Instruction -> If_instr .

    PLOT            reduce using rule 4 (Instruction -> If_instr .)
    IF              reduce using rule 4 (Instruction -> If_instr .)
    FORVERTEX       reduce using rule 4 (Instruction -> If_instr .)
    ID              reduce using rule 4 (Instruction -> If_instr .)
    FOREDGE         reduce using rule 4 (Instruction -> If_instr .)
    $end            reduce using rule 4 (Instruction -> If_instr .)
    END             reduce using rule 4 (Instruction -> If_instr .)


state 5

    (5) Instruction -> If_else_instr .

    PLOT            reduce using rule 5 (Instruction -> If_else_instr .)
    IF              reduce using rule 5 (Instruction -> If_else_instr .)
    FORVERTEX       reduce using rule 5 (Instruction -> If_else_instr .)
    ID              reduce using rule 5 (Instruction -> If_else_instr .)
    FOREDGE         reduce using rule 5 (Instruction -> If_else_instr .)
    $end            reduce using rule 5 (Instruction -> If_else_instr .)
    END             reduce using rule 5 (Instruction -> If_else_instr .)


state 6

    (6) Instruction -> For_vertex_instr .

    PLOT            reduce using rule 6 (Instruction -> For_vertex_instr .)
    IF              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FORVERTEX       reduce using rule 6 (Instruction -> For_vertex_instr .)
    ID              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FOREDGE         reduce using rule 6 (Instruction -> For_vertex_instr .)
    $end            reduce using rule 6 (Instruction -> For_vertex_instr .)
    END             reduce using rule 6 (Instruction -> For_vertex_instr .)


state 7

    (7) Instruction -> Assign_instr .

    PLOT            reduce using rule 7 (Instruction -> Assign_instr .)
    IF              reduce using rule 7 (Instruction -> Assign_instr .)
    FORVERTEX       reduce using rule 7 (Instruction -> Assign_instr .)
    ID              reduce using rule 7 (Instruction -> Assign_instr .)
    FOREDGE         reduce using rule 7 (Instruction -> Assign_instr .)
    $end            reduce using rule 7 (Instruction -> Assign_instr .)
    END             reduce using rule 7 (Instruction -> Assign_instr .)


state 8

    (8) Instruction -> For_edge_instr .

    PLOT            reduce using rule 8 (Instruction -> For_edge_instr .)
    IF              reduce using rule 8 (Instruction -> For_edge_instr .)
    FORVERTEX       reduce using rule 8 (Instruction -> For_edge_instr .)
    ID              reduce using rule 8 (Instruction -> For_edge_instr .)
    FOREDGE         reduce using rule 8 (Instruction -> For_edge_instr .)
    $end            reduce using rule 8 (Instruction -> For_edge_instr .)
    END             reduce using rule 8 (Instruction -> For_edge_instr .)


state 9

    (9) Instruction -> Add_vertex_instr .

    PLOT            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    IF              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FORVERTEX       reduce using rule 9 (Instruction -> Add_vertex_instr .)
    ID              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FOREDGE         reduce using rule 9 (Instruction -> Add_vertex_instr .)
    $end            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    END             reduce using rule 9 (Instruction -> Add_vertex_instr .)


state 10

    (10) Instruction -> Add_edge_instr .

    PLOT            reduce using rule 10 (Instruction -> Add_edge_instr .)
    IF              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FORVERTEX       reduce using rule 10 (Instruction -> Add_edge_instr .)
    ID              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FOREDGE         reduce using rule 10 (Instruction -> Add_edge_instr .)
    $end            reduce using rule 10 (Instruction -> Add_edge_instr .)
    END             reduce using rule 10 (Instruction -> Add_edge_instr .)


state 11

    (11) Instruction -> Add_vertex_and_edge_instr .

    PLOT            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    IF              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FORVERTEX       reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    ID              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FOREDGE         reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    $end            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    END             reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)


state 12

    (16) Plot_instr -> PLOT . OPAR ID CPAR

    OPAR            shift and go to state 18


state 13

    (17) Assign_instr -> ID . ASSIGN graph_expression
    (18) Add_vertex_instr -> ID . ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> ID . ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> ID . ADD OPAR vertex_expression COMMA edge_expression CPAR

    ASSIGN          shift and go to state 19
    ADD             shift and go to state 20


state 14

    (12) If_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    OPAR            shift and go to state 21


state 15

    (14) For_vertex_instr -> FORVERTEX . ID IN ID BEGIN Instructions END

    ID              shift and go to state 22


state 16

    (15) For_edge_instr -> FOREDGE . ID IN ID BEGIN Instructions END

    ID              shift and go to state 23


state 17

    (1) Instructions -> Instructions Instruction .

    PLOT            reduce using rule 1 (Instructions -> Instructions Instruction .)
    IF              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FORVERTEX       reduce using rule 1 (Instructions -> Instructions Instruction .)
    ID              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FOREDGE         reduce using rule 1 (Instructions -> Instructions Instruction .)
    $end            reduce using rule 1 (Instructions -> Instructions Instruction .)
    END             reduce using rule 1 (Instructions -> Instructions Instruction .)


state 18

    (16) Plot_instr -> PLOT OPAR . ID CPAR

    ID              shift and go to state 24


state 19

    (17) Assign_instr -> ID ASSIGN . graph_expression
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    graph_expression               shift and go to state 26

state 20

    (18) Add_vertex_instr -> ID ADD . OPAR vertex_expression CPAR
    (19) Add_edge_instr -> ID ADD . OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> ID ADD . OPAR vertex_expression COMMA edge_expression CPAR

    OPAR            shift and go to state 31


state 21

    (12) If_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (41) logic_expression -> . value_expression EQUAL value_expression
    (42) logic_expression -> . value_expression GREATER value_expression
    (43) logic_expression -> . value_expression LESS value_expression
    (44) logic_expression -> . value_expression GREATEREQ value_expression
    (45) logic_expression -> . value_expression LESSEQ value_expression
    (46) logic_expression -> . value_expression NEQUAL value_expression
    (47) logic_expression -> . logic_function
    (48) value_expression -> . algebraic_expression
    (49) value_expression -> . numeric_function
    (63) logic_function -> . graph_expression POINT CONTAIN_VERTEX value_expression
    (64) logic_function -> . graph_expression POINT CONTAIN_EDGES edge_expression
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    logic_expression               shift and go to state 33
    value_expression               shift and go to state 34
    logic_function                 shift and go to state 35
    algebraic_expression           shift and go to state 36
    numeric_function               shift and go to state 37
    graph_expression               shift and go to state 38

state 22

    (14) For_vertex_instr -> FORVERTEX ID . IN ID BEGIN Instructions END

    IN              shift and go to state 42


state 23

    (15) For_edge_instr -> FOREDGE ID . IN ID BEGIN Instructions END

    IN              shift and go to state 43


state 24

    (16) Plot_instr -> PLOT OPAR ID . CPAR

    CPAR            shift and go to state 44


state 25

    (31) graph_expression -> ID .

    UNION           reduce using rule 31 (graph_expression -> ID .)
    INTERSECTION    reduce using rule 31 (graph_expression -> ID .)
    DIFFERENCE      reduce using rule 31 (graph_expression -> ID .)
    CONCAT          reduce using rule 31 (graph_expression -> ID .)
    PLOT            reduce using rule 31 (graph_expression -> ID .)
    IF              reduce using rule 31 (graph_expression -> ID .)
    FORVERTEX       reduce using rule 31 (graph_expression -> ID .)
    ID              reduce using rule 31 (graph_expression -> ID .)
    FOREDGE         reduce using rule 31 (graph_expression -> ID .)
    $end            reduce using rule 31 (graph_expression -> ID .)
    END             reduce using rule 31 (graph_expression -> ID .)
    POINT           reduce using rule 31 (graph_expression -> ID .)
    CPAR            reduce using rule 31 (graph_expression -> ID .)


state 26

    (17) Assign_instr -> ID ASSIGN graph_expression .
    (26) graph_expression -> graph_expression . UNION graph_expression
    (27) graph_expression -> graph_expression . INTERSECTION graph_expression
    (28) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (29) graph_expression -> graph_expression . CONCAT graph_expression

    PLOT            reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    IF              reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    FORVERTEX       reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    ID              reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    FOREDGE         reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    $end            reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    END             reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    UNION           shift and go to state 45
    INTERSECTION    shift and go to state 46
    DIFFERENCE      shift and go to state 47
    CONCAT          shift and go to state 48


state 27

    (21) graph_expression -> OPAR . graph_expression CPAR
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    graph_expression               shift and go to state 49

state 28

    (22) graph_expression -> GRAPH . OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> GRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 50


state 29

    (23) graph_expression -> DIGRAPH . OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> DIGRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 51


state 30

    (30) graph_expression -> COMPLEMENT . OPAR graph_expression CPAR

    OPAR            shift and go to state 52


state 31

    (18) Add_vertex_instr -> ID ADD OPAR . vertex_expression CPAR
    (19) Add_edge_instr -> ID ADD OPAR . edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> ID ADD OPAR . vertex_expression COMMA edge_expression CPAR
    (32) vertex_expression -> . vertex_expression INT
    (33) vertex_expression -> . INT
    (34) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (35) edge_expression -> . OPAR INT COMMA INT CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (40) edge_expression -> . empty
    (59) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    INT             shift and go to state 56
    OPAR            shift and go to state 53
    CPAR            reduce using rule 59 (empty -> .)

  ! OPAR            [ reduce using rule 59 (empty -> .) ]

    vertex_expression              shift and go to state 54
    edge_expression                shift and go to state 55
    empty                          shift and go to state 57

state 32

    (52) algebraic_expression -> OPAR . algebraic_expression CPAR
    (21) graph_expression -> OPAR . graph_expression CPAR
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    algebraic_expression           shift and go to state 58
    graph_expression               shift and go to state 59
    numeric_function               shift and go to state 60

state 33

    (12) If_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END
    (13) If_else_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    CPAR            shift and go to state 61


state 34

    (41) logic_expression -> value_expression . EQUAL value_expression
    (42) logic_expression -> value_expression . GREATER value_expression
    (43) logic_expression -> value_expression . LESS value_expression
    (44) logic_expression -> value_expression . GREATEREQ value_expression
    (45) logic_expression -> value_expression . LESSEQ value_expression
    (46) logic_expression -> value_expression . NEQUAL value_expression

    EQUAL           shift and go to state 62
    GREATER         shift and go to state 63
    LESS            shift and go to state 64
    GREATEREQ       shift and go to state 65
    LESSEQ          shift and go to state 66
    NEQUAL          shift and go to state 67


state 35

    (47) logic_expression -> logic_function .

    CPAR            reduce using rule 47 (logic_expression -> logic_function .)


state 36

    (48) value_expression -> algebraic_expression .
    (54) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (55) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (56) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (57) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    EQUAL           reduce using rule 48 (value_expression -> algebraic_expression .)
    GREATER         reduce using rule 48 (value_expression -> algebraic_expression .)
    LESS            reduce using rule 48 (value_expression -> algebraic_expression .)
    GREATEREQ       reduce using rule 48 (value_expression -> algebraic_expression .)
    LESSEQ          reduce using rule 48 (value_expression -> algebraic_expression .)
    NEQUAL          reduce using rule 48 (value_expression -> algebraic_expression .)
    COMMA           reduce using rule 48 (value_expression -> algebraic_expression .)
    CPAR            reduce using rule 48 (value_expression -> algebraic_expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71


state 37

    (49) value_expression -> numeric_function .
    (53) algebraic_expression -> numeric_function .

  ! reduce/reduce conflict for EQUAL resolved using rule 49 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for GREATER resolved using rule 49 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for LESS resolved using rule 49 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 49 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 49 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 49 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for COMMA resolved using rule 49 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for CPAR resolved using rule 49 (value_expression -> numeric_function .)
    EQUAL           reduce using rule 49 (value_expression -> numeric_function .)
    GREATER         reduce using rule 49 (value_expression -> numeric_function .)
    LESS            reduce using rule 49 (value_expression -> numeric_function .)
    GREATEREQ       reduce using rule 49 (value_expression -> numeric_function .)
    LESSEQ          reduce using rule 49 (value_expression -> numeric_function .)
    NEQUAL          reduce using rule 49 (value_expression -> numeric_function .)
    COMMA           reduce using rule 49 (value_expression -> numeric_function .)
    CPAR            reduce using rule 49 (value_expression -> numeric_function .)
    PLUS            reduce using rule 53 (algebraic_expression -> numeric_function .)
    MINUS           reduce using rule 53 (algebraic_expression -> numeric_function .)
    MUL             reduce using rule 53 (algebraic_expression -> numeric_function .)
    DIV             reduce using rule 53 (algebraic_expression -> numeric_function .)

  ! EQUAL           [ reduce using rule 53 (algebraic_expression -> numeric_function .) ]
  ! GREATER         [ reduce using rule 53 (algebraic_expression -> numeric_function .) ]
  ! LESS            [ reduce using rule 53 (algebraic_expression -> numeric_function .) ]
  ! GREATEREQ       [ reduce using rule 53 (algebraic_expression -> numeric_function .) ]
  ! LESSEQ          [ reduce using rule 53 (algebraic_expression -> numeric_function .) ]
  ! NEQUAL          [ reduce using rule 53 (algebraic_expression -> numeric_function .) ]
  ! COMMA           [ reduce using rule 53 (algebraic_expression -> numeric_function .) ]
  ! CPAR            [ reduce using rule 53 (algebraic_expression -> numeric_function .) ]


state 38

    (63) logic_function -> graph_expression . POINT CONTAIN_VERTEX value_expression
    (64) logic_function -> graph_expression . POINT CONTAIN_EDGES edge_expression
    (60) numeric_function -> graph_expression . POINT NODES_COUNT
    (61) numeric_function -> graph_expression . POINT EDGES_COUNT
    (62) numeric_function -> graph_expression . POINT WEIGHT_SUM
    (26) graph_expression -> graph_expression . UNION graph_expression
    (27) graph_expression -> graph_expression . INTERSECTION graph_expression
    (28) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (29) graph_expression -> graph_expression . CONCAT graph_expression

    POINT           shift and go to state 72
    UNION           shift and go to state 45
    INTERSECTION    shift and go to state 46
    DIFFERENCE      shift and go to state 47
    CONCAT          shift and go to state 48


state 39

    (50) algebraic_expression -> INT .

    PLUS            reduce using rule 50 (algebraic_expression -> INT .)
    MINUS           reduce using rule 50 (algebraic_expression -> INT .)
    MUL             reduce using rule 50 (algebraic_expression -> INT .)
    DIV             reduce using rule 50 (algebraic_expression -> INT .)
    EQUAL           reduce using rule 50 (algebraic_expression -> INT .)
    GREATER         reduce using rule 50 (algebraic_expression -> INT .)
    LESS            reduce using rule 50 (algebraic_expression -> INT .)
    GREATEREQ       reduce using rule 50 (algebraic_expression -> INT .)
    LESSEQ          reduce using rule 50 (algebraic_expression -> INT .)
    NEQUAL          reduce using rule 50 (algebraic_expression -> INT .)
    CPAR            reduce using rule 50 (algebraic_expression -> INT .)
    COMMA           reduce using rule 50 (algebraic_expression -> INT .)


state 40

    (51) algebraic_expression -> FLOAT .

    PLUS            reduce using rule 51 (algebraic_expression -> FLOAT .)
    MINUS           reduce using rule 51 (algebraic_expression -> FLOAT .)
    MUL             reduce using rule 51 (algebraic_expression -> FLOAT .)
    DIV             reduce using rule 51 (algebraic_expression -> FLOAT .)
    EQUAL           reduce using rule 51 (algebraic_expression -> FLOAT .)
    GREATER         reduce using rule 51 (algebraic_expression -> FLOAT .)
    LESS            reduce using rule 51 (algebraic_expression -> FLOAT .)
    GREATEREQ       reduce using rule 51 (algebraic_expression -> FLOAT .)
    LESSEQ          reduce using rule 51 (algebraic_expression -> FLOAT .)
    NEQUAL          reduce using rule 51 (algebraic_expression -> FLOAT .)
    CPAR            reduce using rule 51 (algebraic_expression -> FLOAT .)
    COMMA           reduce using rule 51 (algebraic_expression -> FLOAT .)


state 41

    (58) algebraic_expression -> MINUS . algebraic_expression
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    algebraic_expression           shift and go to state 73
    numeric_function               shift and go to state 60
    graph_expression               shift and go to state 74

state 42

    (14) For_vertex_instr -> FORVERTEX ID IN . ID BEGIN Instructions END

    ID              shift and go to state 75


state 43

    (15) For_edge_instr -> FOREDGE ID IN . ID BEGIN Instructions END

    ID              shift and go to state 76


state 44

    (16) Plot_instr -> PLOT OPAR ID CPAR .

    PLOT            reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    IF              reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    FORVERTEX       reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    ID              reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    FOREDGE         reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    $end            reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    END             reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)


state 45

    (26) graph_expression -> graph_expression UNION . graph_expression
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    graph_expression               shift and go to state 77

state 46

    (27) graph_expression -> graph_expression INTERSECTION . graph_expression
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    graph_expression               shift and go to state 78

state 47

    (28) graph_expression -> graph_expression DIFFERENCE . graph_expression
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    graph_expression               shift and go to state 79

state 48

    (29) graph_expression -> graph_expression CONCAT . graph_expression
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    graph_expression               shift and go to state 80

state 49

    (21) graph_expression -> OPAR graph_expression . CPAR
    (26) graph_expression -> graph_expression . UNION graph_expression
    (27) graph_expression -> graph_expression . INTERSECTION graph_expression
    (28) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (29) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 81
    UNION           shift and go to state 45
    INTERSECTION    shift and go to state 46
    DIFFERENCE      shift and go to state 47
    CONCAT          shift and go to state 48


state 50

    (22) graph_expression -> GRAPH OPAR . value_expression COMMA edge_expression CPAR
    (24) graph_expression -> GRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (48) value_expression -> . algebraic_expression
    (49) value_expression -> . numeric_function
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    OBR             shift and go to state 83
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    value_expression               shift and go to state 82
    algebraic_expression           shift and go to state 36
    numeric_function               shift and go to state 37
    graph_expression               shift and go to state 74

state 51

    (23) graph_expression -> DIGRAPH OPAR . value_expression COMMA edge_expression CPAR
    (25) graph_expression -> DIGRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (48) value_expression -> . algebraic_expression
    (49) value_expression -> . numeric_function
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    OBR             shift and go to state 85
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    value_expression               shift and go to state 84
    algebraic_expression           shift and go to state 36
    numeric_function               shift and go to state 37
    graph_expression               shift and go to state 74

state 52

    (30) graph_expression -> COMPLEMENT OPAR . graph_expression CPAR
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    graph_expression               shift and go to state 86

state 53

    (35) edge_expression -> OPAR . INT COMMA INT CPAR
    (37) edge_expression -> OPAR . INT COMMA INT COMMA INT CPAR
    (39) edge_expression -> OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 87


state 54

    (18) Add_vertex_instr -> ID ADD OPAR vertex_expression . CPAR
    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression . COMMA edge_expression CPAR
    (32) vertex_expression -> vertex_expression . INT

    CPAR            shift and go to state 88
    COMMA           shift and go to state 89
    INT             shift and go to state 90


state 55

    (19) Add_edge_instr -> ID ADD OPAR edge_expression . CPAR
    (34) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 92
    OPAR            shift and go to state 91


state 56

    (33) vertex_expression -> INT .

    CPAR            reduce using rule 33 (vertex_expression -> INT .)
    COMMA           reduce using rule 33 (vertex_expression -> INT .)
    INT             reduce using rule 33 (vertex_expression -> INT .)
    CBR             reduce using rule 33 (vertex_expression -> INT .)


state 57

    (40) edge_expression -> empty .

    CPAR            reduce using rule 40 (edge_expression -> empty .)
    OPAR            reduce using rule 40 (edge_expression -> empty .)


state 58

    (52) algebraic_expression -> OPAR algebraic_expression . CPAR
    (54) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (55) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (56) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (57) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    CPAR            shift and go to state 93
    PLUS            shift and go to state 68
    MINUS           shift and go to state 69
    MUL             shift and go to state 70
    DIV             shift and go to state 71


state 59

    (21) graph_expression -> OPAR graph_expression . CPAR
    (26) graph_expression -> graph_expression . UNION graph_expression
    (27) graph_expression -> graph_expression . INTERSECTION graph_expression
    (28) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (29) graph_expression -> graph_expression . CONCAT graph_expression
    (60) numeric_function -> graph_expression . POINT NODES_COUNT
    (61) numeric_function -> graph_expression . POINT EDGES_COUNT
    (62) numeric_function -> graph_expression . POINT WEIGHT_SUM

    CPAR            shift and go to state 81
    UNION           shift and go to state 45
    INTERSECTION    shift and go to state 46
    DIFFERENCE      shift and go to state 47
    CONCAT          shift and go to state 48
    POINT           shift and go to state 94


state 60

    (53) algebraic_expression -> numeric_function .

    CPAR            reduce using rule 53 (algebraic_expression -> numeric_function .)
    PLUS            reduce using rule 53 (algebraic_expression -> numeric_function .)
    MINUS           reduce using rule 53 (algebraic_expression -> numeric_function .)
    MUL             reduce using rule 53 (algebraic_expression -> numeric_function .)
    DIV             reduce using rule 53 (algebraic_expression -> numeric_function .)
    EQUAL           reduce using rule 53 (algebraic_expression -> numeric_function .)
    GREATER         reduce using rule 53 (algebraic_expression -> numeric_function .)
    LESS            reduce using rule 53 (algebraic_expression -> numeric_function .)
    GREATEREQ       reduce using rule 53 (algebraic_expression -> numeric_function .)
    LESSEQ          reduce using rule 53 (algebraic_expression -> numeric_function .)
    NEQUAL          reduce using rule 53 (algebraic_expression -> numeric_function .)
    COMMA           reduce using rule 53 (algebraic_expression -> numeric_function .)


state 61

    (12) If_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END
    (13) If_else_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END ELSE BEGIN Instructions END

    BEGIN           shift and go to state 95


state 62

    (41) logic_expression -> value_expression EQUAL . value_expression
    (48) value_expression -> . algebraic_expression
    (49) value_expression -> . numeric_function
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    value_expression               shift and go to state 96
    algebraic_expression           shift and go to state 36
    numeric_function               shift and go to state 37
    graph_expression               shift and go to state 74

state 63

    (42) logic_expression -> value_expression GREATER . value_expression
    (48) value_expression -> . algebraic_expression
    (49) value_expression -> . numeric_function
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    value_expression               shift and go to state 97
    algebraic_expression           shift and go to state 36
    numeric_function               shift and go to state 37
    graph_expression               shift and go to state 74

state 64

    (43) logic_expression -> value_expression LESS . value_expression
    (48) value_expression -> . algebraic_expression
    (49) value_expression -> . numeric_function
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    value_expression               shift and go to state 98
    algebraic_expression           shift and go to state 36
    numeric_function               shift and go to state 37
    graph_expression               shift and go to state 74

state 65

    (44) logic_expression -> value_expression GREATEREQ . value_expression
    (48) value_expression -> . algebraic_expression
    (49) value_expression -> . numeric_function
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    value_expression               shift and go to state 99
    algebraic_expression           shift and go to state 36
    numeric_function               shift and go to state 37
    graph_expression               shift and go to state 74

state 66

    (45) logic_expression -> value_expression LESSEQ . value_expression
    (48) value_expression -> . algebraic_expression
    (49) value_expression -> . numeric_function
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    value_expression               shift and go to state 100
    algebraic_expression           shift and go to state 36
    numeric_function               shift and go to state 37
    graph_expression               shift and go to state 74

state 67

    (46) logic_expression -> value_expression NEQUAL . value_expression
    (48) value_expression -> . algebraic_expression
    (49) value_expression -> . numeric_function
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    value_expression               shift and go to state 101
    algebraic_expression           shift and go to state 36
    numeric_function               shift and go to state 37
    graph_expression               shift and go to state 74

state 68

    (54) algebraic_expression -> algebraic_expression PLUS . algebraic_expression
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    algebraic_expression           shift and go to state 102
    numeric_function               shift and go to state 60
    graph_expression               shift and go to state 74

state 69

    (55) algebraic_expression -> algebraic_expression MINUS . algebraic_expression
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    algebraic_expression           shift and go to state 103
    numeric_function               shift and go to state 60
    graph_expression               shift and go to state 74

state 70

    (56) algebraic_expression -> algebraic_expression MUL . algebraic_expression
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    algebraic_expression           shift and go to state 104
    numeric_function               shift and go to state 60
    graph_expression               shift and go to state 74

state 71

    (57) algebraic_expression -> algebraic_expression DIV . algebraic_expression
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    algebraic_expression           shift and go to state 105
    numeric_function               shift and go to state 60
    graph_expression               shift and go to state 74

state 72

    (63) logic_function -> graph_expression POINT . CONTAIN_VERTEX value_expression
    (64) logic_function -> graph_expression POINT . CONTAIN_EDGES edge_expression
    (60) numeric_function -> graph_expression POINT . NODES_COUNT
    (61) numeric_function -> graph_expression POINT . EDGES_COUNT
    (62) numeric_function -> graph_expression POINT . WEIGHT_SUM

    CONTAIN_VERTEX  shift and go to state 106
    CONTAIN_EDGES   shift and go to state 107
    NODES_COUNT     shift and go to state 108
    EDGES_COUNT     shift and go to state 109
    WEIGHT_SUM      shift and go to state 110


state 73

    (58) algebraic_expression -> MINUS algebraic_expression .
    (54) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (55) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (56) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (57) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)
    MINUS           reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)
    MUL             reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)
    DIV             reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)
    EQUAL           reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)
    GREATER         reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)
    LESS            reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)
    LESSEQ          reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)
    NEQUAL          reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)
    CPAR            reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)
    COMMA           reduce using rule 58 (algebraic_expression -> MINUS algebraic_expression .)

  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MUL             [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 71 ]


state 74

    (60) numeric_function -> graph_expression . POINT NODES_COUNT
    (61) numeric_function -> graph_expression . POINT EDGES_COUNT
    (62) numeric_function -> graph_expression . POINT WEIGHT_SUM
    (26) graph_expression -> graph_expression . UNION graph_expression
    (27) graph_expression -> graph_expression . INTERSECTION graph_expression
    (28) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (29) graph_expression -> graph_expression . CONCAT graph_expression

    POINT           shift and go to state 94
    UNION           shift and go to state 45
    INTERSECTION    shift and go to state 46
    DIFFERENCE      shift and go to state 47
    CONCAT          shift and go to state 48


state 75

    (14) For_vertex_instr -> FORVERTEX ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 111


state 76

    (15) For_edge_instr -> FOREDGE ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 112


state 77

    (26) graph_expression -> graph_expression UNION graph_expression .
    (26) graph_expression -> graph_expression . UNION graph_expression
    (27) graph_expression -> graph_expression . INTERSECTION graph_expression
    (28) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (29) graph_expression -> graph_expression . CONCAT graph_expression

    UNION           reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    INTERSECTION    reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    DIFFERENCE      reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    CONCAT          reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    PLOT            reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    IF              reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    FORVERTEX       reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    ID              reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    FOREDGE         reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    $end            reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    END             reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    POINT           reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)
    CPAR            reduce using rule 26 (graph_expression -> graph_expression UNION graph_expression .)

  ! UNION           [ shift and go to state 45 ]
  ! INTERSECTION    [ shift and go to state 46 ]
  ! DIFFERENCE      [ shift and go to state 47 ]
  ! CONCAT          [ shift and go to state 48 ]


state 78

    (27) graph_expression -> graph_expression INTERSECTION graph_expression .
    (26) graph_expression -> graph_expression . UNION graph_expression
    (27) graph_expression -> graph_expression . INTERSECTION graph_expression
    (28) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (29) graph_expression -> graph_expression . CONCAT graph_expression

    UNION           reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    INTERSECTION    reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    DIFFERENCE      reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    CONCAT          reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    PLOT            reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    IF              reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FORVERTEX       reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    ID              reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FOREDGE         reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    $end            reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    END             reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    POINT           reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    CPAR            reduce using rule 27 (graph_expression -> graph_expression INTERSECTION graph_expression .)

  ! UNION           [ shift and go to state 45 ]
  ! INTERSECTION    [ shift and go to state 46 ]
  ! DIFFERENCE      [ shift and go to state 47 ]
  ! CONCAT          [ shift and go to state 48 ]


state 79

    (28) graph_expression -> graph_expression DIFFERENCE graph_expression .
    (26) graph_expression -> graph_expression . UNION graph_expression
    (27) graph_expression -> graph_expression . INTERSECTION graph_expression
    (28) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (29) graph_expression -> graph_expression . CONCAT graph_expression

    UNION           reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    INTERSECTION    reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    DIFFERENCE      reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    CONCAT          reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    PLOT            reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    IF              reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FORVERTEX       reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    ID              reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FOREDGE         reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    $end            reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    END             reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    POINT           reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    CPAR            reduce using rule 28 (graph_expression -> graph_expression DIFFERENCE graph_expression .)

  ! UNION           [ shift and go to state 45 ]
  ! INTERSECTION    [ shift and go to state 46 ]
  ! DIFFERENCE      [ shift and go to state 47 ]
  ! CONCAT          [ shift and go to state 48 ]


state 80

    (29) graph_expression -> graph_expression CONCAT graph_expression .
    (26) graph_expression -> graph_expression . UNION graph_expression
    (27) graph_expression -> graph_expression . INTERSECTION graph_expression
    (28) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (29) graph_expression -> graph_expression . CONCAT graph_expression

    CONCAT          reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .)
    PLOT            reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .)
    IF              reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .)
    FORVERTEX       reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .)
    ID              reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .)
    FOREDGE         reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .)
    $end            reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .)
    END             reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .)
    POINT           reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .)
    CPAR            reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .)
    UNION           shift and go to state 45
    INTERSECTION    shift and go to state 46
    DIFFERENCE      shift and go to state 47

  ! UNION           [ reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! DIFFERENCE      [ reduce using rule 29 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! CONCAT          [ shift and go to state 48 ]


state 81

    (21) graph_expression -> OPAR graph_expression CPAR .

    UNION           reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    PLOT            reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    IF              reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    ID              reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    $end            reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    END             reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    POINT           reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)
    CPAR            reduce using rule 21 (graph_expression -> OPAR graph_expression CPAR .)


state 82

    (22) graph_expression -> GRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 113


state 83

    (24) graph_expression -> GRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (32) vertex_expression -> . vertex_expression INT
    (33) vertex_expression -> . INT

    INT             shift and go to state 56

    vertex_expression              shift and go to state 114

state 84

    (23) graph_expression -> DIGRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 115


state 85

    (25) graph_expression -> DIGRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (32) vertex_expression -> . vertex_expression INT
    (33) vertex_expression -> . INT

    INT             shift and go to state 56

    vertex_expression              shift and go to state 116

state 86

    (30) graph_expression -> COMPLEMENT OPAR graph_expression . CPAR
    (26) graph_expression -> graph_expression . UNION graph_expression
    (27) graph_expression -> graph_expression . INTERSECTION graph_expression
    (28) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (29) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 117
    UNION           shift and go to state 45
    INTERSECTION    shift and go to state 46
    DIFFERENCE      shift and go to state 47
    CONCAT          shift and go to state 48


state 87

    (35) edge_expression -> OPAR INT . COMMA INT CPAR
    (37) edge_expression -> OPAR INT . COMMA INT COMMA INT CPAR
    (39) edge_expression -> OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 118


state 88

    (18) Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .

    PLOT            reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    IF              reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FORVERTEX       reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    ID              reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FOREDGE         reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    $end            reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    END             reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)


state 89

    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA . edge_expression CPAR
    (34) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (35) edge_expression -> . OPAR INT COMMA INT CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (40) edge_expression -> . empty
    (59) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 53
    CPAR            reduce using rule 59 (empty -> .)

  ! OPAR            [ reduce using rule 59 (empty -> .) ]

    edge_expression                shift and go to state 119
    empty                          shift and go to state 57

state 90

    (32) vertex_expression -> vertex_expression INT .

    CPAR            reduce using rule 32 (vertex_expression -> vertex_expression INT .)
    COMMA           reduce using rule 32 (vertex_expression -> vertex_expression INT .)
    INT             reduce using rule 32 (vertex_expression -> vertex_expression INT .)
    CBR             reduce using rule 32 (vertex_expression -> vertex_expression INT .)


state 91

    (34) edge_expression -> edge_expression OPAR . INT COMMA INT CPAR
    (36) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 120


state 92

    (19) Add_edge_instr -> ID ADD OPAR edge_expression CPAR .

    PLOT            reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    IF              reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FORVERTEX       reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    ID              reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FOREDGE         reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    $end            reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    END             reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)


state 93

    (52) algebraic_expression -> OPAR algebraic_expression CPAR .

    PLUS            reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    MINUS           reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    MUL             reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    DIV             reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    EQUAL           reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    GREATER         reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    LESS            reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    GREATEREQ       reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    LESSEQ          reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    NEQUAL          reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    CPAR            reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    COMMA           reduce using rule 52 (algebraic_expression -> OPAR algebraic_expression CPAR .)


state 94

    (60) numeric_function -> graph_expression POINT . NODES_COUNT
    (61) numeric_function -> graph_expression POINT . EDGES_COUNT
    (62) numeric_function -> graph_expression POINT . WEIGHT_SUM

    NODES_COUNT     shift and go to state 108
    EDGES_COUNT     shift and go to state 109
    WEIGHT_SUM      shift and go to state 110


state 95

    (12) If_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END
    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END ELSE BEGIN Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 121
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 96

    (41) logic_expression -> value_expression EQUAL value_expression .

    CPAR            reduce using rule 41 (logic_expression -> value_expression EQUAL value_expression .)


state 97

    (42) logic_expression -> value_expression GREATER value_expression .

    CPAR            reduce using rule 42 (logic_expression -> value_expression GREATER value_expression .)


state 98

    (43) logic_expression -> value_expression LESS value_expression .

    CPAR            reduce using rule 43 (logic_expression -> value_expression LESS value_expression .)


state 99

    (44) logic_expression -> value_expression GREATEREQ value_expression .

    CPAR            reduce using rule 44 (logic_expression -> value_expression GREATEREQ value_expression .)


state 100

    (45) logic_expression -> value_expression LESSEQ value_expression .

    CPAR            reduce using rule 45 (logic_expression -> value_expression LESSEQ value_expression .)


state 101

    (46) logic_expression -> value_expression NEQUAL value_expression .

    CPAR            reduce using rule 46 (logic_expression -> value_expression NEQUAL value_expression .)


state 102

    (54) algebraic_expression -> algebraic_expression PLUS algebraic_expression .
    (54) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (55) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (56) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (57) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MINUS           reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    EQUAL           reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATER         reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESS            reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATEREQ       reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESSEQ          reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    NEQUAL          reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    CPAR            reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    COMMA           reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MUL             shift and go to state 70
    DIV             shift and go to state 71

  ! MUL             [ reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 54 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]


state 103

    (55) algebraic_expression -> algebraic_expression MINUS algebraic_expression .
    (54) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (55) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (56) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (57) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MINUS           reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    EQUAL           reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATER         reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESS            reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESSEQ          reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    NEQUAL          reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    CPAR            reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    COMMA           reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MUL             shift and go to state 70
    DIV             shift and go to state 71

  ! MUL             [ reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 55 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]


state 104

    (56) algebraic_expression -> algebraic_expression MUL algebraic_expression .
    (54) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (55) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (56) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (57) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MINUS           reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MUL             reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    DIV             reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    EQUAL           reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATER         reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESS            reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATEREQ       reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESSEQ          reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    NEQUAL          reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    CPAR            reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    COMMA           reduce using rule 56 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)

  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MUL             [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 71 ]


state 105

    (57) algebraic_expression -> algebraic_expression DIV algebraic_expression .
    (54) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (55) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (56) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (57) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MINUS           reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MUL             reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    DIV             reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    EQUAL           reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATER         reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESS            reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATEREQ       reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESSEQ          reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    NEQUAL          reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    CPAR            reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    COMMA           reduce using rule 57 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)

  ! PLUS            [ shift and go to state 68 ]
  ! MINUS           [ shift and go to state 69 ]
  ! MUL             [ shift and go to state 70 ]
  ! DIV             [ shift and go to state 71 ]


state 106

    (63) logic_function -> graph_expression POINT CONTAIN_VERTEX . value_expression
    (48) value_expression -> . algebraic_expression
    (49) value_expression -> . numeric_function
    (50) algebraic_expression -> . INT
    (51) algebraic_expression -> . FLOAT
    (52) algebraic_expression -> . OPAR algebraic_expression CPAR
    (53) algebraic_expression -> . numeric_function
    (54) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (55) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (56) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (57) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (58) algebraic_expression -> . MINUS algebraic_expression
    (60) numeric_function -> . graph_expression POINT NODES_COUNT
    (61) numeric_function -> . graph_expression POINT EDGES_COUNT
    (62) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (21) graph_expression -> . OPAR graph_expression CPAR
    (22) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (26) graph_expression -> . graph_expression UNION graph_expression
    (27) graph_expression -> . graph_expression INTERSECTION graph_expression
    (28) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (29) graph_expression -> . graph_expression CONCAT graph_expression
    (30) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (31) graph_expression -> . ID

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    OPAR            shift and go to state 32
    MINUS           shift and go to state 41
    GRAPH           shift and go to state 28
    DIGRAPH         shift and go to state 29
    COMPLEMENT      shift and go to state 30
    ID              shift and go to state 25

    graph_expression               shift and go to state 74
    value_expression               shift and go to state 122
    algebraic_expression           shift and go to state 36
    numeric_function               shift and go to state 37

state 107

    (64) logic_function -> graph_expression POINT CONTAIN_EDGES . edge_expression
    (34) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (35) edge_expression -> . OPAR INT COMMA INT CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (40) edge_expression -> . empty
    (59) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 53
    CPAR            reduce using rule 59 (empty -> .)

  ! OPAR            [ reduce using rule 59 (empty -> .) ]

    edge_expression                shift and go to state 123
    empty                          shift and go to state 57

state 108

    (60) numeric_function -> graph_expression POINT NODES_COUNT .

    EQUAL           reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)
    GREATER         reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)
    LESS            reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)
    GREATEREQ       reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)
    LESSEQ          reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)
    NEQUAL          reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)
    PLUS            reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)
    MINUS           reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)
    MUL             reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)
    DIV             reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)
    CPAR            reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)
    COMMA           reduce using rule 60 (numeric_function -> graph_expression POINT NODES_COUNT .)


state 109

    (61) numeric_function -> graph_expression POINT EDGES_COUNT .

    EQUAL           reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    GREATER         reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    LESS            reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    GREATEREQ       reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    LESSEQ          reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    NEQUAL          reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    PLUS            reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    MINUS           reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    MUL             reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    DIV             reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    CPAR            reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    COMMA           reduce using rule 61 (numeric_function -> graph_expression POINT EDGES_COUNT .)


state 110

    (62) numeric_function -> graph_expression POINT WEIGHT_SUM .

    EQUAL           reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    GREATER         reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    LESS            reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    GREATEREQ       reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    LESSEQ          reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    NEQUAL          reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    PLUS            reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    MINUS           reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    MUL             reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    DIV             reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    CPAR            reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    COMMA           reduce using rule 62 (numeric_function -> graph_expression POINT WEIGHT_SUM .)


state 111

    (14) For_vertex_instr -> FORVERTEX ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 124
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 112

    (15) For_edge_instr -> FOREDGE ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 125
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 113

    (22) graph_expression -> GRAPH OPAR value_expression COMMA . edge_expression CPAR
    (34) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (35) edge_expression -> . OPAR INT COMMA INT CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (40) edge_expression -> . empty
    (59) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 53
    CPAR            reduce using rule 59 (empty -> .)

  ! OPAR            [ reduce using rule 59 (empty -> .) ]

    edge_expression                shift and go to state 126
    empty                          shift and go to state 57

state 114

    (24) graph_expression -> GRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (32) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 127
    INT             shift and go to state 90


state 115

    (23) graph_expression -> DIGRAPH OPAR value_expression COMMA . edge_expression CPAR
    (34) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (35) edge_expression -> . OPAR INT COMMA INT CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (40) edge_expression -> . empty
    (59) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 53
    CPAR            reduce using rule 59 (empty -> .)

  ! OPAR            [ reduce using rule 59 (empty -> .) ]

    edge_expression                shift and go to state 128
    empty                          shift and go to state 57

state 116

    (25) graph_expression -> DIGRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (32) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 129
    INT             shift and go to state 90


state 117

    (30) graph_expression -> COMPLEMENT OPAR graph_expression CPAR .

    UNION           reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    PLOT            reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    IF              reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    ID              reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    $end            reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    END             reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    POINT           reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    CPAR            reduce using rule 30 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)


state 118

    (35) edge_expression -> OPAR INT COMMA . INT CPAR
    (37) edge_expression -> OPAR INT COMMA . INT COMMA INT CPAR
    (39) edge_expression -> OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 130


state 119

    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression . CPAR
    (34) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 131
    OPAR            shift and go to state 91


state 120

    (34) edge_expression -> edge_expression OPAR INT . COMMA INT CPAR
    (36) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA INT CPAR
    (38) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 132


state 121

    (12) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END
    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END ELSE BEGIN Instructions END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 133
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 122

    (63) logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression .

    CPAR            reduce using rule 63 (logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression .)


state 123

    (64) logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression .
    (34) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            reduce using rule 64 (logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression .)
    OPAR            shift and go to state 91


state 124

    (14) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 134
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 125

    (15) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 135
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 126

    (22) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression . CPAR
    (34) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 136
    OPAR            shift and go to state 91


state 127

    (24) graph_expression -> GRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 137


state 128

    (23) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression . CPAR
    (34) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 138
    OPAR            shift and go to state 91


state 129

    (25) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 139


state 130

    (35) edge_expression -> OPAR INT COMMA INT . CPAR
    (37) edge_expression -> OPAR INT COMMA INT . COMMA INT CPAR
    (39) edge_expression -> OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 141
    COMMA           shift and go to state 140


state 131

    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .

    PLOT            reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    END             reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)


state 132

    (34) edge_expression -> edge_expression OPAR INT COMMA . INT CPAR
    (36) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA INT CPAR
    (38) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 142


state 133

    (12) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .
    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END . ELSE BEGIN Instructions END

    PLOT            reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    IF              reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FORVERTEX       reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ID              reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FOREDGE         reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    $end            reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    END             reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ELSE            shift and go to state 143


state 134

    (14) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    END             reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)


state 135

    (15) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    END             reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)


state 136

    (22) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .

    UNION           reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CPAR            reduce using rule 22 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 137

    (24) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (34) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (35) edge_expression -> . OPAR INT COMMA INT CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (40) edge_expression -> . empty
    (59) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 53
    CPAR            reduce using rule 59 (empty -> .)

  ! OPAR            [ reduce using rule 59 (empty -> .) ]

    edge_expression                shift and go to state 144
    empty                          shift and go to state 57

state 138

    (23) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .

    UNION           reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CPAR            reduce using rule 23 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 139

    (25) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (34) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (35) edge_expression -> . OPAR INT COMMA INT CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (40) edge_expression -> . empty
    (59) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 53
    CPAR            reduce using rule 59 (empty -> .)

  ! OPAR            [ reduce using rule 59 (empty -> .) ]

    edge_expression                shift and go to state 145
    empty                          shift and go to state 57

state 140

    (37) edge_expression -> OPAR INT COMMA INT COMMA . INT CPAR
    (39) edge_expression -> OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 146
    FLOAT           shift and go to state 147


state 141

    (35) edge_expression -> OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 35 (edge_expression -> OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 35 (edge_expression -> OPAR INT COMMA INT CPAR .)


state 142

    (34) edge_expression -> edge_expression OPAR INT COMMA INT . CPAR
    (36) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA INT CPAR
    (38) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 149
    COMMA           shift and go to state 148


state 143

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE . BEGIN Instructions END

    BEGIN           shift and go to state 150


state 144

    (24) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (34) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 151
    OPAR            shift and go to state 91


state 145

    (25) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (34) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 152
    OPAR            shift and go to state 91


state 146

    (37) edge_expression -> OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 153


state 147

    (39) edge_expression -> OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 154


state 148

    (36) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . INT CPAR
    (38) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 155
    FLOAT           shift and go to state 156


state 149

    (34) edge_expression -> edge_expression OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 34 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 34 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)


state 150

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 157
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 151

    (24) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    UNION           reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CPAR            reduce using rule 24 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 152

    (25) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    UNION           reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CPAR            reduce using rule 25 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 153

    (37) edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 37 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 37 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)


state 154

    (39) edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 39 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 39 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 155

    (36) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 158


state 156

    (38) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 159


state 157

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 160
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 158

    (36) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 36 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 36 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)


state 159

    (38) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 38 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 38 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 160

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .

    PLOT            reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    IF              reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FORVERTEX       reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    ID              reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FOREDGE         reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    $end            reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    END             reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPAR in state 31 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 89 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 107 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 113 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 115 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 137 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 139 resolved as shift
WARNING: reduce/reduce conflict in state 37 resolved using rule (value_expression -> numeric_function)
WARNING: rejected rule (algebraic_expression -> numeric_function) in state 37
