Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EDGE
    ELIF
    MULTIGRAPH
    PSEUDOGRAPH
    STRING

Grammar

Rule 0     S' -> Instructions
Rule 1     Instructions -> Instructions Instruction
Rule 2     Instructions -> Instruction
Rule 3     Instruction -> Plot_instr
Rule 4     Instruction -> If_instr
Rule 5     Instruction -> If_else_instr
Rule 6     Instruction -> For_vertex_instr
Rule 7     Instruction -> Assign_instr
Rule 8     Instruction -> For_edge_instr
Rule 9     Instruction -> Add_vertex_instr
Rule 10    Instruction -> Add_edge_instr
Rule 11    Instruction -> Add_vertex_and_edge_instr
Rule 12    Instruction -> K_color_plot_instr
Rule 13    Instruction -> Weighted_plt_instr
Rule 14    If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END
Rule 15    If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
Rule 16    For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END
Rule 17    For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END
Rule 18    Plot_instr -> PLOT OPAR graph_expression CPAR
Rule 19    Assign_instr -> ID ASSIGN graph_expression
Rule 20    Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR
Rule 21    K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR
Rule 22    Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR
Rule 23    Add_edge_instr -> ID ADD OPAR edge_expression CPAR
Rule 24    Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR
Rule 25    graph_expression -> OPAR graph_expression CPAR
Rule 26    graph_expression -> KRUSKAL OPAR graph_expression CPAR
Rule 27    graph_expression -> PRIM OPAR graph_expression CPAR
Rule 28    graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR
Rule 29    graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 30    graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 31    graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 32    graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 33    graph_expression -> graph_expression UNION graph_expression
Rule 34    graph_expression -> graph_expression INTERSECTION graph_expression
Rule 35    graph_expression -> graph_expression DIFFERENCE graph_expression
Rule 36    graph_expression -> graph_expression CONCAT graph_expression
Rule 37    graph_expression -> COMPLEMENT OPAR graph_expression CPAR
Rule 38    graph_expression -> ID
Rule 39    vertex_expression -> vertex_expression INT
Rule 40    vertex_expression -> INT
Rule 41    edge_expression -> edge_expression OPAR INT COMMA INT CPAR
Rule 42    edge_expression -> OPAR INT COMMA INT CPAR
Rule 43    edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR
Rule 44    edge_expression -> OPAR INT COMMA INT COMMA INT CPAR
Rule 45    edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 46    edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 47    edge_expression -> empty
Rule 48    logic_expression -> value_expression EQUAL value_expression
Rule 49    logic_expression -> value_expression GREATER value_expression
Rule 50    logic_expression -> value_expression LESS value_expression
Rule 51    logic_expression -> value_expression GREATEREQ value_expression
Rule 52    logic_expression -> value_expression LESSEQ value_expression
Rule 53    logic_expression -> value_expression NEQUAL value_expression
Rule 54    logic_expression -> logic_function
Rule 55    value_expression -> algebraic_expression
Rule 56    value_expression -> numeric_function
Rule 57    algebraic_expression -> INT
Rule 58    algebraic_expression -> FLOAT
Rule 59    algebraic_expression -> OPAR algebraic_expression CPAR
Rule 60    algebraic_expression -> numeric_function
Rule 61    algebraic_expression -> algebraic_expression PLUS algebraic_expression
Rule 62    algebraic_expression -> algebraic_expression MINUS algebraic_expression
Rule 63    algebraic_expression -> algebraic_expression MUL algebraic_expression
Rule 64    algebraic_expression -> algebraic_expression DIV algebraic_expression
Rule 65    algebraic_expression -> MINUS algebraic_expression
Rule 66    empty -> <empty>
Rule 67    numeric_function -> graph_expression POINT NODES_COUNT
Rule 68    numeric_function -> graph_expression POINT EDGES_COUNT
Rule 69    numeric_function -> graph_expression POINT WEIGHT_SUM
Rule 70    logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression
Rule 71    logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression

Terminals, with rules where they appear

ADD                  : 20 23 24
ASSIGN               : 19
BEGIN                : 14 15 15 16 17
BFS                  : 28
CBR                  : 31 32
COMMA                : 24 28 29 30 31 32 41 42 43 43 44 44 45 45 46 46
COMPLEMENT           : 37
CONCAT               : 36
CONTAIN_EDGES        : 71
CONTAIN_VERTEX       : 70
CPAR                 : 14 15 18 20 21 22 23 24 25 26 27 28 29 30 31 32 37 41 42 43 44 45 46 59
DIFFERENCE           : 35
DIGRAPH              : 30 32
DIV                  : 64
EDGE                 : 
EDGES_COUNT          : 68
ELIF                 : 
ELSE                 : 15
END                  : 14 15 15 16 17
EQUAL                : 48
FLOAT                : 45 46 58
FOREDGE              : 17
FORVERTEX            : 16
GRAPH                : 29 31
GREATER              : 49
GREATEREQ            : 51
ID                   : 16 16 17 17 19 20 23 24 38
IF                   : 14 15
IN                   : 16 17
INT                  : 39 40 41 41 42 42 43 43 43 44 44 44 45 45 46 46 57
INTERSECTION         : 34
KRUSKAL              : 26
K_COLOR_PLOT         : 21
LESS                 : 50
LESSEQ               : 52
MINUS                : 62 65
MUL                  : 63
MULTIGRAPH           : 
NEQUAL               : 53
NODES_COUNT          : 67
OBR                  : 31 32
OPAR                 : 14 15 18 20 21 22 23 24 25 26 27 28 29 30 31 32 37 41 42 43 44 45 46 59
PLOT                 : 18
PLUS                 : 61
POINT                : 67 68 69 70 71
PRIM                 : 27
PSEUDOGRAPH          : 
STRING               : 
UNION                : 33
WEIGHTED_PLOT        : 22
WEIGHT_SUM           : 69
error                : 

Nonterminals, with rules where they appear

Add_edge_instr       : 10
Add_vertex_and_edge_instr : 11
Add_vertex_instr     : 9
Assign_instr         : 7
For_edge_instr       : 8
For_vertex_instr     : 6
If_else_instr        : 5
If_instr             : 4
Instruction          : 1 2
Instructions         : 1 14 15 15 16 17 0
K_color_plot_instr   : 12
Plot_instr           : 3
Weighted_plt_instr   : 13
algebraic_expression : 55 59 61 61 62 62 63 63 64 64 65
edge_expression      : 23 24 29 30 31 32 41 43 45 71
empty                : 47
graph_expression     : 18 19 21 22 25 26 27 28 33 33 34 34 35 35 36 36 37 67 68 69 70 71
logic_expression     : 14 15
logic_function       : 54
numeric_function     : 56 60
value_expression     : 28 29 30 48 48 49 49 50 50 51 51 52 52 53 53 70
vertex_expression    : 20 24 31 32 39

Parsing method: LALR

state 0

    (0) S' -> . Instructions
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 1
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 1

    (0) S' -> Instructions .
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 2

    (2) Instructions -> Instruction .

    PLOT            reduce using rule 2 (Instructions -> Instruction .)
    IF              reduce using rule 2 (Instructions -> Instruction .)
    FORVERTEX       reduce using rule 2 (Instructions -> Instruction .)
    ID              reduce using rule 2 (Instructions -> Instruction .)
    FOREDGE         reduce using rule 2 (Instructions -> Instruction .)
    K_COLOR_PLOT    reduce using rule 2 (Instructions -> Instruction .)
    WEIGHTED_PLOT   reduce using rule 2 (Instructions -> Instruction .)
    $end            reduce using rule 2 (Instructions -> Instruction .)
    END             reduce using rule 2 (Instructions -> Instruction .)


state 3

    (3) Instruction -> Plot_instr .

    PLOT            reduce using rule 3 (Instruction -> Plot_instr .)
    IF              reduce using rule 3 (Instruction -> Plot_instr .)
    FORVERTEX       reduce using rule 3 (Instruction -> Plot_instr .)
    ID              reduce using rule 3 (Instruction -> Plot_instr .)
    FOREDGE         reduce using rule 3 (Instruction -> Plot_instr .)
    K_COLOR_PLOT    reduce using rule 3 (Instruction -> Plot_instr .)
    WEIGHTED_PLOT   reduce using rule 3 (Instruction -> Plot_instr .)
    $end            reduce using rule 3 (Instruction -> Plot_instr .)
    END             reduce using rule 3 (Instruction -> Plot_instr .)


state 4

    (4) Instruction -> If_instr .

    PLOT            reduce using rule 4 (Instruction -> If_instr .)
    IF              reduce using rule 4 (Instruction -> If_instr .)
    FORVERTEX       reduce using rule 4 (Instruction -> If_instr .)
    ID              reduce using rule 4 (Instruction -> If_instr .)
    FOREDGE         reduce using rule 4 (Instruction -> If_instr .)
    K_COLOR_PLOT    reduce using rule 4 (Instruction -> If_instr .)
    WEIGHTED_PLOT   reduce using rule 4 (Instruction -> If_instr .)
    $end            reduce using rule 4 (Instruction -> If_instr .)
    END             reduce using rule 4 (Instruction -> If_instr .)


state 5

    (5) Instruction -> If_else_instr .

    PLOT            reduce using rule 5 (Instruction -> If_else_instr .)
    IF              reduce using rule 5 (Instruction -> If_else_instr .)
    FORVERTEX       reduce using rule 5 (Instruction -> If_else_instr .)
    ID              reduce using rule 5 (Instruction -> If_else_instr .)
    FOREDGE         reduce using rule 5 (Instruction -> If_else_instr .)
    K_COLOR_PLOT    reduce using rule 5 (Instruction -> If_else_instr .)
    WEIGHTED_PLOT   reduce using rule 5 (Instruction -> If_else_instr .)
    $end            reduce using rule 5 (Instruction -> If_else_instr .)
    END             reduce using rule 5 (Instruction -> If_else_instr .)


state 6

    (6) Instruction -> For_vertex_instr .

    PLOT            reduce using rule 6 (Instruction -> For_vertex_instr .)
    IF              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FORVERTEX       reduce using rule 6 (Instruction -> For_vertex_instr .)
    ID              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FOREDGE         reduce using rule 6 (Instruction -> For_vertex_instr .)
    K_COLOR_PLOT    reduce using rule 6 (Instruction -> For_vertex_instr .)
    WEIGHTED_PLOT   reduce using rule 6 (Instruction -> For_vertex_instr .)
    $end            reduce using rule 6 (Instruction -> For_vertex_instr .)
    END             reduce using rule 6 (Instruction -> For_vertex_instr .)


state 7

    (7) Instruction -> Assign_instr .

    PLOT            reduce using rule 7 (Instruction -> Assign_instr .)
    IF              reduce using rule 7 (Instruction -> Assign_instr .)
    FORVERTEX       reduce using rule 7 (Instruction -> Assign_instr .)
    ID              reduce using rule 7 (Instruction -> Assign_instr .)
    FOREDGE         reduce using rule 7 (Instruction -> Assign_instr .)
    K_COLOR_PLOT    reduce using rule 7 (Instruction -> Assign_instr .)
    WEIGHTED_PLOT   reduce using rule 7 (Instruction -> Assign_instr .)
    $end            reduce using rule 7 (Instruction -> Assign_instr .)
    END             reduce using rule 7 (Instruction -> Assign_instr .)


state 8

    (8) Instruction -> For_edge_instr .

    PLOT            reduce using rule 8 (Instruction -> For_edge_instr .)
    IF              reduce using rule 8 (Instruction -> For_edge_instr .)
    FORVERTEX       reduce using rule 8 (Instruction -> For_edge_instr .)
    ID              reduce using rule 8 (Instruction -> For_edge_instr .)
    FOREDGE         reduce using rule 8 (Instruction -> For_edge_instr .)
    K_COLOR_PLOT    reduce using rule 8 (Instruction -> For_edge_instr .)
    WEIGHTED_PLOT   reduce using rule 8 (Instruction -> For_edge_instr .)
    $end            reduce using rule 8 (Instruction -> For_edge_instr .)
    END             reduce using rule 8 (Instruction -> For_edge_instr .)


state 9

    (9) Instruction -> Add_vertex_instr .

    PLOT            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    IF              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FORVERTEX       reduce using rule 9 (Instruction -> Add_vertex_instr .)
    ID              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FOREDGE         reduce using rule 9 (Instruction -> Add_vertex_instr .)
    K_COLOR_PLOT    reduce using rule 9 (Instruction -> Add_vertex_instr .)
    WEIGHTED_PLOT   reduce using rule 9 (Instruction -> Add_vertex_instr .)
    $end            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    END             reduce using rule 9 (Instruction -> Add_vertex_instr .)


state 10

    (10) Instruction -> Add_edge_instr .

    PLOT            reduce using rule 10 (Instruction -> Add_edge_instr .)
    IF              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FORVERTEX       reduce using rule 10 (Instruction -> Add_edge_instr .)
    ID              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FOREDGE         reduce using rule 10 (Instruction -> Add_edge_instr .)
    K_COLOR_PLOT    reduce using rule 10 (Instruction -> Add_edge_instr .)
    WEIGHTED_PLOT   reduce using rule 10 (Instruction -> Add_edge_instr .)
    $end            reduce using rule 10 (Instruction -> Add_edge_instr .)
    END             reduce using rule 10 (Instruction -> Add_edge_instr .)


state 11

    (11) Instruction -> Add_vertex_and_edge_instr .

    PLOT            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    IF              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FORVERTEX       reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    ID              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FOREDGE         reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    K_COLOR_PLOT    reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    WEIGHTED_PLOT   reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    $end            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    END             reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)


state 12

    (12) Instruction -> K_color_plot_instr .

    PLOT            reduce using rule 12 (Instruction -> K_color_plot_instr .)
    IF              reduce using rule 12 (Instruction -> K_color_plot_instr .)
    FORVERTEX       reduce using rule 12 (Instruction -> K_color_plot_instr .)
    ID              reduce using rule 12 (Instruction -> K_color_plot_instr .)
    FOREDGE         reduce using rule 12 (Instruction -> K_color_plot_instr .)
    K_COLOR_PLOT    reduce using rule 12 (Instruction -> K_color_plot_instr .)
    WEIGHTED_PLOT   reduce using rule 12 (Instruction -> K_color_plot_instr .)
    $end            reduce using rule 12 (Instruction -> K_color_plot_instr .)
    END             reduce using rule 12 (Instruction -> K_color_plot_instr .)


state 13

    (13) Instruction -> Weighted_plt_instr .

    PLOT            reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    IF              reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    FORVERTEX       reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    ID              reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    FOREDGE         reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    K_COLOR_PLOT    reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    WEIGHTED_PLOT   reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    $end            reduce using rule 13 (Instruction -> Weighted_plt_instr .)
    END             reduce using rule 13 (Instruction -> Weighted_plt_instr .)


state 14

    (18) Plot_instr -> PLOT . OPAR graph_expression CPAR

    OPAR            shift and go to state 22


state 15

    (14) If_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    OPAR            shift and go to state 23


state 16

    (16) For_vertex_instr -> FORVERTEX . ID IN ID BEGIN Instructions END

    ID              shift and go to state 24


state 17

    (19) Assign_instr -> ID . ASSIGN graph_expression
    (20) Add_vertex_instr -> ID . ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> ID . ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> ID . ADD OPAR vertex_expression COMMA edge_expression CPAR

    ASSIGN          shift and go to state 25
    ADD             shift and go to state 26


state 18

    (17) For_edge_instr -> FOREDGE . ID IN ID BEGIN Instructions END

    ID              shift and go to state 27


state 19

    (21) K_color_plot_instr -> K_COLOR_PLOT . OPAR graph_expression CPAR

    OPAR            shift and go to state 28


state 20

    (22) Weighted_plt_instr -> WEIGHTED_PLOT . OPAR graph_expression CPAR

    OPAR            shift and go to state 29


state 21

    (1) Instructions -> Instructions Instruction .

    PLOT            reduce using rule 1 (Instructions -> Instructions Instruction .)
    IF              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FORVERTEX       reduce using rule 1 (Instructions -> Instructions Instruction .)
    ID              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FOREDGE         reduce using rule 1 (Instructions -> Instructions Instruction .)
    K_COLOR_PLOT    reduce using rule 1 (Instructions -> Instructions Instruction .)
    WEIGHTED_PLOT   reduce using rule 1 (Instructions -> Instructions Instruction .)
    $end            reduce using rule 1 (Instructions -> Instructions Instruction .)
    END             reduce using rule 1 (Instructions -> Instructions Instruction .)


state 22

    (18) Plot_instr -> PLOT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 31

state 23

    (14) If_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (48) logic_expression -> . value_expression EQUAL value_expression
    (49) logic_expression -> . value_expression GREATER value_expression
    (50) logic_expression -> . value_expression LESS value_expression
    (51) logic_expression -> . value_expression GREATEREQ value_expression
    (52) logic_expression -> . value_expression LESSEQ value_expression
    (53) logic_expression -> . value_expression NEQUAL value_expression
    (54) logic_expression -> . logic_function
    (55) value_expression -> . algebraic_expression
    (56) value_expression -> . numeric_function
    (70) logic_function -> . graph_expression POINT CONTAIN_VERTEX value_expression
    (71) logic_function -> . graph_expression POINT CONTAIN_EDGES edge_expression
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    logic_expression               shift and go to state 40
    value_expression               shift and go to state 41
    logic_function                 shift and go to state 42
    algebraic_expression           shift and go to state 43
    numeric_function               shift and go to state 44
    graph_expression               shift and go to state 45

state 24

    (16) For_vertex_instr -> FORVERTEX ID . IN ID BEGIN Instructions END

    IN              shift and go to state 49


state 25

    (19) Assign_instr -> ID ASSIGN . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 50

state 26

    (20) Add_vertex_instr -> ID ADD . OPAR vertex_expression CPAR
    (23) Add_edge_instr -> ID ADD . OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> ID ADD . OPAR vertex_expression COMMA edge_expression CPAR

    OPAR            shift and go to state 51


state 27

    (17) For_edge_instr -> FOREDGE ID . IN ID BEGIN Instructions END

    IN              shift and go to state 52


state 28

    (21) K_color_plot_instr -> K_COLOR_PLOT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 53

state 29

    (22) Weighted_plt_instr -> WEIGHTED_PLOT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 54

state 30

    (25) graph_expression -> OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 55

state 31

    (18) Plot_instr -> PLOT OPAR graph_expression . CPAR
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 56
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60


state 32

    (26) graph_expression -> KRUSKAL . OPAR graph_expression CPAR

    OPAR            shift and go to state 61


state 33

    (27) graph_expression -> PRIM . OPAR graph_expression CPAR

    OPAR            shift and go to state 62


state 34

    (28) graph_expression -> BFS . OPAR graph_expression COMMA value_expression CPAR

    OPAR            shift and go to state 63


state 35

    (29) graph_expression -> GRAPH . OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> GRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 64


state 36

    (30) graph_expression -> DIGRAPH . OPAR value_expression COMMA edge_expression CPAR
    (32) graph_expression -> DIGRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 65


state 37

    (37) graph_expression -> COMPLEMENT . OPAR graph_expression CPAR

    OPAR            shift and go to state 66


state 38

    (38) graph_expression -> ID .

    CPAR            reduce using rule 38 (graph_expression -> ID .)
    UNION           reduce using rule 38 (graph_expression -> ID .)
    INTERSECTION    reduce using rule 38 (graph_expression -> ID .)
    DIFFERENCE      reduce using rule 38 (graph_expression -> ID .)
    CONCAT          reduce using rule 38 (graph_expression -> ID .)
    POINT           reduce using rule 38 (graph_expression -> ID .)
    PLOT            reduce using rule 38 (graph_expression -> ID .)
    IF              reduce using rule 38 (graph_expression -> ID .)
    FORVERTEX       reduce using rule 38 (graph_expression -> ID .)
    ID              reduce using rule 38 (graph_expression -> ID .)
    FOREDGE         reduce using rule 38 (graph_expression -> ID .)
    K_COLOR_PLOT    reduce using rule 38 (graph_expression -> ID .)
    WEIGHTED_PLOT   reduce using rule 38 (graph_expression -> ID .)
    $end            reduce using rule 38 (graph_expression -> ID .)
    END             reduce using rule 38 (graph_expression -> ID .)
    COMMA           reduce using rule 38 (graph_expression -> ID .)


state 39

    (59) algebraic_expression -> OPAR . algebraic_expression CPAR
    (25) graph_expression -> OPAR . graph_expression CPAR
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    algebraic_expression           shift and go to state 67
    graph_expression               shift and go to state 68
    numeric_function               shift and go to state 69

state 40

    (14) If_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END
    (15) If_else_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    CPAR            shift and go to state 70


state 41

    (48) logic_expression -> value_expression . EQUAL value_expression
    (49) logic_expression -> value_expression . GREATER value_expression
    (50) logic_expression -> value_expression . LESS value_expression
    (51) logic_expression -> value_expression . GREATEREQ value_expression
    (52) logic_expression -> value_expression . LESSEQ value_expression
    (53) logic_expression -> value_expression . NEQUAL value_expression

    EQUAL           shift and go to state 71
    GREATER         shift and go to state 72
    LESS            shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    NEQUAL          shift and go to state 76


state 42

    (54) logic_expression -> logic_function .

    CPAR            reduce using rule 54 (logic_expression -> logic_function .)


state 43

    (55) value_expression -> algebraic_expression .
    (61) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (62) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (64) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    EQUAL           reduce using rule 55 (value_expression -> algebraic_expression .)
    GREATER         reduce using rule 55 (value_expression -> algebraic_expression .)
    LESS            reduce using rule 55 (value_expression -> algebraic_expression .)
    GREATEREQ       reduce using rule 55 (value_expression -> algebraic_expression .)
    LESSEQ          reduce using rule 55 (value_expression -> algebraic_expression .)
    NEQUAL          reduce using rule 55 (value_expression -> algebraic_expression .)
    COMMA           reduce using rule 55 (value_expression -> algebraic_expression .)
    CPAR            reduce using rule 55 (value_expression -> algebraic_expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MUL             shift and go to state 79
    DIV             shift and go to state 80


state 44

    (56) value_expression -> numeric_function .
    (60) algebraic_expression -> numeric_function .

  ! reduce/reduce conflict for EQUAL resolved using rule 56 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for GREATER resolved using rule 56 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for LESS resolved using rule 56 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 56 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 56 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 56 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for COMMA resolved using rule 56 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for CPAR resolved using rule 56 (value_expression -> numeric_function .)
    EQUAL           reduce using rule 56 (value_expression -> numeric_function .)
    GREATER         reduce using rule 56 (value_expression -> numeric_function .)
    LESS            reduce using rule 56 (value_expression -> numeric_function .)
    GREATEREQ       reduce using rule 56 (value_expression -> numeric_function .)
    LESSEQ          reduce using rule 56 (value_expression -> numeric_function .)
    NEQUAL          reduce using rule 56 (value_expression -> numeric_function .)
    COMMA           reduce using rule 56 (value_expression -> numeric_function .)
    CPAR            reduce using rule 56 (value_expression -> numeric_function .)
    PLUS            reduce using rule 60 (algebraic_expression -> numeric_function .)
    MINUS           reduce using rule 60 (algebraic_expression -> numeric_function .)
    MUL             reduce using rule 60 (algebraic_expression -> numeric_function .)
    DIV             reduce using rule 60 (algebraic_expression -> numeric_function .)

  ! EQUAL           [ reduce using rule 60 (algebraic_expression -> numeric_function .) ]
  ! GREATER         [ reduce using rule 60 (algebraic_expression -> numeric_function .) ]
  ! LESS            [ reduce using rule 60 (algebraic_expression -> numeric_function .) ]
  ! GREATEREQ       [ reduce using rule 60 (algebraic_expression -> numeric_function .) ]
  ! LESSEQ          [ reduce using rule 60 (algebraic_expression -> numeric_function .) ]
  ! NEQUAL          [ reduce using rule 60 (algebraic_expression -> numeric_function .) ]
  ! COMMA           [ reduce using rule 60 (algebraic_expression -> numeric_function .) ]
  ! CPAR            [ reduce using rule 60 (algebraic_expression -> numeric_function .) ]


state 45

    (70) logic_function -> graph_expression . POINT CONTAIN_VERTEX value_expression
    (71) logic_function -> graph_expression . POINT CONTAIN_EDGES edge_expression
    (67) numeric_function -> graph_expression . POINT NODES_COUNT
    (68) numeric_function -> graph_expression . POINT EDGES_COUNT
    (69) numeric_function -> graph_expression . POINT WEIGHT_SUM
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    POINT           shift and go to state 81
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60


state 46

    (57) algebraic_expression -> INT .

    PLUS            reduce using rule 57 (algebraic_expression -> INT .)
    MINUS           reduce using rule 57 (algebraic_expression -> INT .)
    MUL             reduce using rule 57 (algebraic_expression -> INT .)
    DIV             reduce using rule 57 (algebraic_expression -> INT .)
    EQUAL           reduce using rule 57 (algebraic_expression -> INT .)
    GREATER         reduce using rule 57 (algebraic_expression -> INT .)
    LESS            reduce using rule 57 (algebraic_expression -> INT .)
    GREATEREQ       reduce using rule 57 (algebraic_expression -> INT .)
    LESSEQ          reduce using rule 57 (algebraic_expression -> INT .)
    NEQUAL          reduce using rule 57 (algebraic_expression -> INT .)
    CPAR            reduce using rule 57 (algebraic_expression -> INT .)
    COMMA           reduce using rule 57 (algebraic_expression -> INT .)


state 47

    (58) algebraic_expression -> FLOAT .

    PLUS            reduce using rule 58 (algebraic_expression -> FLOAT .)
    MINUS           reduce using rule 58 (algebraic_expression -> FLOAT .)
    MUL             reduce using rule 58 (algebraic_expression -> FLOAT .)
    DIV             reduce using rule 58 (algebraic_expression -> FLOAT .)
    EQUAL           reduce using rule 58 (algebraic_expression -> FLOAT .)
    GREATER         reduce using rule 58 (algebraic_expression -> FLOAT .)
    LESS            reduce using rule 58 (algebraic_expression -> FLOAT .)
    GREATEREQ       reduce using rule 58 (algebraic_expression -> FLOAT .)
    LESSEQ          reduce using rule 58 (algebraic_expression -> FLOAT .)
    NEQUAL          reduce using rule 58 (algebraic_expression -> FLOAT .)
    CPAR            reduce using rule 58 (algebraic_expression -> FLOAT .)
    COMMA           reduce using rule 58 (algebraic_expression -> FLOAT .)


state 48

    (65) algebraic_expression -> MINUS . algebraic_expression
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    algebraic_expression           shift and go to state 82
    numeric_function               shift and go to state 69
    graph_expression               shift and go to state 83

state 49

    (16) For_vertex_instr -> FORVERTEX ID IN . ID BEGIN Instructions END

    ID              shift and go to state 84


state 50

    (19) Assign_instr -> ID ASSIGN graph_expression .
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    PLOT            reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    IF              reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    FORVERTEX       reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    ID              reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    FOREDGE         reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    K_COLOR_PLOT    reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    WEIGHTED_PLOT   reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    $end            reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    END             reduce using rule 19 (Assign_instr -> ID ASSIGN graph_expression .)
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60


state 51

    (20) Add_vertex_instr -> ID ADD OPAR . vertex_expression CPAR
    (23) Add_edge_instr -> ID ADD OPAR . edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> ID ADD OPAR . vertex_expression COMMA edge_expression CPAR
    (39) vertex_expression -> . vertex_expression INT
    (40) vertex_expression -> . INT
    (41) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (42) edge_expression -> . OPAR INT COMMA INT CPAR
    (43) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (44) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (46) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . empty
    (66) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    INT             shift and go to state 88
    OPAR            shift and go to state 85
    CPAR            reduce using rule 66 (empty -> .)

  ! OPAR            [ reduce using rule 66 (empty -> .) ]

    vertex_expression              shift and go to state 86
    edge_expression                shift and go to state 87
    empty                          shift and go to state 89

state 52

    (17) For_edge_instr -> FOREDGE ID IN . ID BEGIN Instructions END

    ID              shift and go to state 90


state 53

    (21) K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression . CPAR
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 91
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60


state 54

    (22) Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression . CPAR
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 92
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60


state 55

    (25) graph_expression -> OPAR graph_expression . CPAR
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 93
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60


state 56

    (18) Plot_instr -> PLOT OPAR graph_expression CPAR .

    PLOT            reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    IF              reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    ID              reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    $end            reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    END             reduce using rule 18 (Plot_instr -> PLOT OPAR graph_expression CPAR .)


state 57

    (33) graph_expression -> graph_expression UNION . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 94

state 58

    (34) graph_expression -> graph_expression INTERSECTION . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 95

state 59

    (35) graph_expression -> graph_expression DIFFERENCE . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 96

state 60

    (36) graph_expression -> graph_expression CONCAT . graph_expression
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 97

state 61

    (26) graph_expression -> KRUSKAL OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 98

state 62

    (27) graph_expression -> PRIM OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 99

state 63

    (28) graph_expression -> BFS OPAR . graph_expression COMMA value_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 100

state 64

    (29) graph_expression -> GRAPH OPAR . value_expression COMMA edge_expression CPAR
    (31) graph_expression -> GRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (55) value_expression -> . algebraic_expression
    (56) value_expression -> . numeric_function
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OBR             shift and go to state 102
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    value_expression               shift and go to state 101
    algebraic_expression           shift and go to state 43
    numeric_function               shift and go to state 44
    graph_expression               shift and go to state 83

state 65

    (30) graph_expression -> DIGRAPH OPAR . value_expression COMMA edge_expression CPAR
    (32) graph_expression -> DIGRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (55) value_expression -> . algebraic_expression
    (56) value_expression -> . numeric_function
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OBR             shift and go to state 104
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    value_expression               shift and go to state 103
    algebraic_expression           shift and go to state 43
    numeric_function               shift and go to state 44
    graph_expression               shift and go to state 83

state 66

    (37) graph_expression -> COMPLEMENT OPAR . graph_expression CPAR
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    OPAR            shift and go to state 30
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 105

state 67

    (59) algebraic_expression -> OPAR algebraic_expression . CPAR
    (61) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (62) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (64) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    CPAR            shift and go to state 106
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    MUL             shift and go to state 79
    DIV             shift and go to state 80


state 68

    (25) graph_expression -> OPAR graph_expression . CPAR
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression
    (67) numeric_function -> graph_expression . POINT NODES_COUNT
    (68) numeric_function -> graph_expression . POINT EDGES_COUNT
    (69) numeric_function -> graph_expression . POINT WEIGHT_SUM

    CPAR            shift and go to state 93
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60
    POINT           shift and go to state 107


state 69

    (60) algebraic_expression -> numeric_function .

    CPAR            reduce using rule 60 (algebraic_expression -> numeric_function .)
    PLUS            reduce using rule 60 (algebraic_expression -> numeric_function .)
    MINUS           reduce using rule 60 (algebraic_expression -> numeric_function .)
    MUL             reduce using rule 60 (algebraic_expression -> numeric_function .)
    DIV             reduce using rule 60 (algebraic_expression -> numeric_function .)
    EQUAL           reduce using rule 60 (algebraic_expression -> numeric_function .)
    GREATER         reduce using rule 60 (algebraic_expression -> numeric_function .)
    LESS            reduce using rule 60 (algebraic_expression -> numeric_function .)
    GREATEREQ       reduce using rule 60 (algebraic_expression -> numeric_function .)
    LESSEQ          reduce using rule 60 (algebraic_expression -> numeric_function .)
    NEQUAL          reduce using rule 60 (algebraic_expression -> numeric_function .)
    COMMA           reduce using rule 60 (algebraic_expression -> numeric_function .)


state 70

    (14) If_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END
    (15) If_else_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END ELSE BEGIN Instructions END

    BEGIN           shift and go to state 108


state 71

    (48) logic_expression -> value_expression EQUAL . value_expression
    (55) value_expression -> . algebraic_expression
    (56) value_expression -> . numeric_function
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    value_expression               shift and go to state 109
    algebraic_expression           shift and go to state 43
    numeric_function               shift and go to state 44
    graph_expression               shift and go to state 83

state 72

    (49) logic_expression -> value_expression GREATER . value_expression
    (55) value_expression -> . algebraic_expression
    (56) value_expression -> . numeric_function
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    value_expression               shift and go to state 110
    algebraic_expression           shift and go to state 43
    numeric_function               shift and go to state 44
    graph_expression               shift and go to state 83

state 73

    (50) logic_expression -> value_expression LESS . value_expression
    (55) value_expression -> . algebraic_expression
    (56) value_expression -> . numeric_function
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    value_expression               shift and go to state 111
    algebraic_expression           shift and go to state 43
    numeric_function               shift and go to state 44
    graph_expression               shift and go to state 83

state 74

    (51) logic_expression -> value_expression GREATEREQ . value_expression
    (55) value_expression -> . algebraic_expression
    (56) value_expression -> . numeric_function
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    value_expression               shift and go to state 112
    algebraic_expression           shift and go to state 43
    numeric_function               shift and go to state 44
    graph_expression               shift and go to state 83

state 75

    (52) logic_expression -> value_expression LESSEQ . value_expression
    (55) value_expression -> . algebraic_expression
    (56) value_expression -> . numeric_function
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    value_expression               shift and go to state 113
    algebraic_expression           shift and go to state 43
    numeric_function               shift and go to state 44
    graph_expression               shift and go to state 83

state 76

    (53) logic_expression -> value_expression NEQUAL . value_expression
    (55) value_expression -> . algebraic_expression
    (56) value_expression -> . numeric_function
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    value_expression               shift and go to state 114
    algebraic_expression           shift and go to state 43
    numeric_function               shift and go to state 44
    graph_expression               shift and go to state 83

state 77

    (61) algebraic_expression -> algebraic_expression PLUS . algebraic_expression
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    algebraic_expression           shift and go to state 115
    numeric_function               shift and go to state 69
    graph_expression               shift and go to state 83

state 78

    (62) algebraic_expression -> algebraic_expression MINUS . algebraic_expression
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    algebraic_expression           shift and go to state 116
    numeric_function               shift and go to state 69
    graph_expression               shift and go to state 83

state 79

    (63) algebraic_expression -> algebraic_expression MUL . algebraic_expression
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    algebraic_expression           shift and go to state 117
    numeric_function               shift and go to state 69
    graph_expression               shift and go to state 83

state 80

    (64) algebraic_expression -> algebraic_expression DIV . algebraic_expression
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    algebraic_expression           shift and go to state 118
    numeric_function               shift and go to state 69
    graph_expression               shift and go to state 83

state 81

    (70) logic_function -> graph_expression POINT . CONTAIN_VERTEX value_expression
    (71) logic_function -> graph_expression POINT . CONTAIN_EDGES edge_expression
    (67) numeric_function -> graph_expression POINT . NODES_COUNT
    (68) numeric_function -> graph_expression POINT . EDGES_COUNT
    (69) numeric_function -> graph_expression POINT . WEIGHT_SUM

    CONTAIN_VERTEX  shift and go to state 119
    CONTAIN_EDGES   shift and go to state 120
    NODES_COUNT     shift and go to state 121
    EDGES_COUNT     shift and go to state 122
    WEIGHT_SUM      shift and go to state 123


state 82

    (65) algebraic_expression -> MINUS algebraic_expression .
    (61) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (62) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (64) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)
    MINUS           reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)
    MUL             reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)
    DIV             reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)
    EQUAL           reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)
    GREATER         reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)
    LESS            reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)
    LESSEQ          reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)
    NEQUAL          reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)
    CPAR            reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)
    COMMA           reduce using rule 65 (algebraic_expression -> MINUS algebraic_expression .)

  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! MUL             [ shift and go to state 79 ]
  ! DIV             [ shift and go to state 80 ]


state 83

    (67) numeric_function -> graph_expression . POINT NODES_COUNT
    (68) numeric_function -> graph_expression . POINT EDGES_COUNT
    (69) numeric_function -> graph_expression . POINT WEIGHT_SUM
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    POINT           shift and go to state 107
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60


state 84

    (16) For_vertex_instr -> FORVERTEX ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 124


state 85

    (42) edge_expression -> OPAR . INT COMMA INT CPAR
    (44) edge_expression -> OPAR . INT COMMA INT COMMA INT CPAR
    (46) edge_expression -> OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 125


state 86

    (20) Add_vertex_instr -> ID ADD OPAR vertex_expression . CPAR
    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression . COMMA edge_expression CPAR
    (39) vertex_expression -> vertex_expression . INT

    CPAR            shift and go to state 126
    COMMA           shift and go to state 127
    INT             shift and go to state 128


state 87

    (23) Add_edge_instr -> ID ADD OPAR edge_expression . CPAR
    (41) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (43) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 130
    OPAR            shift and go to state 129


state 88

    (40) vertex_expression -> INT .

    CPAR            reduce using rule 40 (vertex_expression -> INT .)
    COMMA           reduce using rule 40 (vertex_expression -> INT .)
    INT             reduce using rule 40 (vertex_expression -> INT .)
    CBR             reduce using rule 40 (vertex_expression -> INT .)


state 89

    (47) edge_expression -> empty .

    CPAR            reduce using rule 47 (edge_expression -> empty .)
    OPAR            reduce using rule 47 (edge_expression -> empty .)


state 90

    (17) For_edge_instr -> FOREDGE ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 131


state 91

    (21) K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .

    PLOT            reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    IF              reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    ID              reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    $end            reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    END             reduce using rule 21 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)


state 92

    (22) Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .

    PLOT            reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    IF              reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    ID              reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    $end            reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)
    END             reduce using rule 22 (Weighted_plt_instr -> WEIGHTED_PLOT OPAR graph_expression CPAR .)


state 93

    (25) graph_expression -> OPAR graph_expression CPAR .

    CPAR            reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    UNION           reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    POINT           reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    PLOT            reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    IF              reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    ID              reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    $end            reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    END             reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)
    COMMA           reduce using rule 25 (graph_expression -> OPAR graph_expression CPAR .)


state 94

    (33) graph_expression -> graph_expression UNION graph_expression .
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    UNION           reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    INTERSECTION    reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    DIFFERENCE      reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    CONCAT          reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    POINT           reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    PLOT            reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    IF              reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    FORVERTEX       reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    ID              reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    FOREDGE         reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    K_COLOR_PLOT    reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    WEIGHTED_PLOT   reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    $end            reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    END             reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)
    COMMA           reduce using rule 33 (graph_expression -> graph_expression UNION graph_expression .)

  ! UNION           [ shift and go to state 57 ]
  ! INTERSECTION    [ shift and go to state 58 ]
  ! DIFFERENCE      [ shift and go to state 59 ]
  ! CONCAT          [ shift and go to state 60 ]


state 95

    (34) graph_expression -> graph_expression INTERSECTION graph_expression .
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    UNION           reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    INTERSECTION    reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    DIFFERENCE      reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    CONCAT          reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    POINT           reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    PLOT            reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    IF              reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FORVERTEX       reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    ID              reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FOREDGE         reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    K_COLOR_PLOT    reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    WEIGHTED_PLOT   reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    $end            reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    END             reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    COMMA           reduce using rule 34 (graph_expression -> graph_expression INTERSECTION graph_expression .)

  ! UNION           [ shift and go to state 57 ]
  ! INTERSECTION    [ shift and go to state 58 ]
  ! DIFFERENCE      [ shift and go to state 59 ]
  ! CONCAT          [ shift and go to state 60 ]


state 96

    (35) graph_expression -> graph_expression DIFFERENCE graph_expression .
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    UNION           reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    INTERSECTION    reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    DIFFERENCE      reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    CONCAT          reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    POINT           reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    PLOT            reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    IF              reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FORVERTEX       reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    ID              reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FOREDGE         reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    K_COLOR_PLOT    reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    WEIGHTED_PLOT   reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    $end            reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    END             reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    COMMA           reduce using rule 35 (graph_expression -> graph_expression DIFFERENCE graph_expression .)

  ! UNION           [ shift and go to state 57 ]
  ! INTERSECTION    [ shift and go to state 58 ]
  ! DIFFERENCE      [ shift and go to state 59 ]
  ! CONCAT          [ shift and go to state 60 ]


state 97

    (36) graph_expression -> graph_expression CONCAT graph_expression .
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    CONCAT          reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    POINT           reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    PLOT            reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    IF              reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    FORVERTEX       reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    ID              reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    FOREDGE         reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    K_COLOR_PLOT    reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    WEIGHTED_PLOT   reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    $end            reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    END             reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    COMMA           reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .)
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59

  ! UNION           [ reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! DIFFERENCE      [ reduce using rule 36 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! CONCAT          [ shift and go to state 60 ]


state 98

    (26) graph_expression -> KRUSKAL OPAR graph_expression . CPAR
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 132
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60


state 99

    (27) graph_expression -> PRIM OPAR graph_expression . CPAR
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 133
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60


state 100

    (28) graph_expression -> BFS OPAR graph_expression . COMMA value_expression CPAR
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    COMMA           shift and go to state 134
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60


state 101

    (29) graph_expression -> GRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 135


state 102

    (31) graph_expression -> GRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (39) vertex_expression -> . vertex_expression INT
    (40) vertex_expression -> . INT

    INT             shift and go to state 88

    vertex_expression              shift and go to state 136

state 103

    (30) graph_expression -> DIGRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 137


state 104

    (32) graph_expression -> DIGRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (39) vertex_expression -> . vertex_expression INT
    (40) vertex_expression -> . INT

    INT             shift and go to state 88

    vertex_expression              shift and go to state 138

state 105

    (37) graph_expression -> COMPLEMENT OPAR graph_expression . CPAR
    (33) graph_expression -> graph_expression . UNION graph_expression
    (34) graph_expression -> graph_expression . INTERSECTION graph_expression
    (35) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (36) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 139
    UNION           shift and go to state 57
    INTERSECTION    shift and go to state 58
    DIFFERENCE      shift and go to state 59
    CONCAT          shift and go to state 60


state 106

    (59) algebraic_expression -> OPAR algebraic_expression CPAR .

    PLUS            reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    MINUS           reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    MUL             reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    DIV             reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    EQUAL           reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    GREATER         reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    LESS            reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    GREATEREQ       reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    LESSEQ          reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    NEQUAL          reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    CPAR            reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    COMMA           reduce using rule 59 (algebraic_expression -> OPAR algebraic_expression CPAR .)


state 107

    (67) numeric_function -> graph_expression POINT . NODES_COUNT
    (68) numeric_function -> graph_expression POINT . EDGES_COUNT
    (69) numeric_function -> graph_expression POINT . WEIGHT_SUM

    NODES_COUNT     shift and go to state 121
    EDGES_COUNT     shift and go to state 122
    WEIGHT_SUM      shift and go to state 123


state 108

    (14) If_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END
    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END ELSE BEGIN Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 140
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 109

    (48) logic_expression -> value_expression EQUAL value_expression .

    CPAR            reduce using rule 48 (logic_expression -> value_expression EQUAL value_expression .)


state 110

    (49) logic_expression -> value_expression GREATER value_expression .

    CPAR            reduce using rule 49 (logic_expression -> value_expression GREATER value_expression .)


state 111

    (50) logic_expression -> value_expression LESS value_expression .

    CPAR            reduce using rule 50 (logic_expression -> value_expression LESS value_expression .)


state 112

    (51) logic_expression -> value_expression GREATEREQ value_expression .

    CPAR            reduce using rule 51 (logic_expression -> value_expression GREATEREQ value_expression .)


state 113

    (52) logic_expression -> value_expression LESSEQ value_expression .

    CPAR            reduce using rule 52 (logic_expression -> value_expression LESSEQ value_expression .)


state 114

    (53) logic_expression -> value_expression NEQUAL value_expression .

    CPAR            reduce using rule 53 (logic_expression -> value_expression NEQUAL value_expression .)


state 115

    (61) algebraic_expression -> algebraic_expression PLUS algebraic_expression .
    (61) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (62) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (64) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MINUS           reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    EQUAL           reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATER         reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESS            reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATEREQ       reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESSEQ          reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    NEQUAL          reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    CPAR            reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    COMMA           reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MUL             shift and go to state 79
    DIV             shift and go to state 80

  ! MUL             [ reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 61 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]


state 116

    (62) algebraic_expression -> algebraic_expression MINUS algebraic_expression .
    (61) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (62) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (64) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MINUS           reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    EQUAL           reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATER         reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESS            reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESSEQ          reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    NEQUAL          reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    CPAR            reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    COMMA           reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MUL             shift and go to state 79
    DIV             shift and go to state 80

  ! MUL             [ reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 62 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]


state 117

    (63) algebraic_expression -> algebraic_expression MUL algebraic_expression .
    (61) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (62) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (64) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MINUS           reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MUL             reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    DIV             reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    EQUAL           reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATER         reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESS            reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATEREQ       reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESSEQ          reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    NEQUAL          reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    CPAR            reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    COMMA           reduce using rule 63 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)

  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! MUL             [ shift and go to state 79 ]
  ! DIV             [ shift and go to state 80 ]


state 118

    (64) algebraic_expression -> algebraic_expression DIV algebraic_expression .
    (61) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (62) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (63) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (64) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MINUS           reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MUL             reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    DIV             reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    EQUAL           reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATER         reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESS            reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATEREQ       reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESSEQ          reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    NEQUAL          reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    CPAR            reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    COMMA           reduce using rule 64 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)

  ! PLUS            [ shift and go to state 77 ]
  ! MINUS           [ shift and go to state 78 ]
  ! MUL             [ shift and go to state 79 ]
  ! DIV             [ shift and go to state 80 ]


state 119

    (70) logic_function -> graph_expression POINT CONTAIN_VERTEX . value_expression
    (55) value_expression -> . algebraic_expression
    (56) value_expression -> . numeric_function
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 83
    value_expression               shift and go to state 141
    algebraic_expression           shift and go to state 43
    numeric_function               shift and go to state 44

state 120

    (71) logic_function -> graph_expression POINT CONTAIN_EDGES . edge_expression
    (41) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (42) edge_expression -> . OPAR INT COMMA INT CPAR
    (43) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (44) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (46) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . empty
    (66) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 85
    CPAR            reduce using rule 66 (empty -> .)

  ! OPAR            [ reduce using rule 66 (empty -> .) ]

    edge_expression                shift and go to state 142
    empty                          shift and go to state 89

state 121

    (67) numeric_function -> graph_expression POINT NODES_COUNT .

    EQUAL           reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)
    GREATER         reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)
    LESS            reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)
    GREATEREQ       reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)
    LESSEQ          reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)
    NEQUAL          reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)
    PLUS            reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)
    MINUS           reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)
    MUL             reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)
    DIV             reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)
    CPAR            reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)
    COMMA           reduce using rule 67 (numeric_function -> graph_expression POINT NODES_COUNT .)


state 122

    (68) numeric_function -> graph_expression POINT EDGES_COUNT .

    EQUAL           reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    GREATER         reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    LESS            reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    GREATEREQ       reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    LESSEQ          reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    NEQUAL          reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    PLUS            reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    MINUS           reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    MUL             reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    DIV             reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    CPAR            reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    COMMA           reduce using rule 68 (numeric_function -> graph_expression POINT EDGES_COUNT .)


state 123

    (69) numeric_function -> graph_expression POINT WEIGHT_SUM .

    EQUAL           reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    GREATER         reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    LESS            reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    GREATEREQ       reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    LESSEQ          reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    NEQUAL          reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    PLUS            reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    MINUS           reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    MUL             reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    DIV             reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    CPAR            reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    COMMA           reduce using rule 69 (numeric_function -> graph_expression POINT WEIGHT_SUM .)


state 124

    (16) For_vertex_instr -> FORVERTEX ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 143
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 125

    (42) edge_expression -> OPAR INT . COMMA INT CPAR
    (44) edge_expression -> OPAR INT . COMMA INT COMMA INT CPAR
    (46) edge_expression -> OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 144


state 126

    (20) Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .

    PLOT            reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    IF              reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FORVERTEX       reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    ID              reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FOREDGE         reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    $end            reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    END             reduce using rule 20 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)


state 127

    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA . edge_expression CPAR
    (41) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (42) edge_expression -> . OPAR INT COMMA INT CPAR
    (43) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (44) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (46) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . empty
    (66) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 85
    CPAR            reduce using rule 66 (empty -> .)

  ! OPAR            [ reduce using rule 66 (empty -> .) ]

    edge_expression                shift and go to state 145
    empty                          shift and go to state 89

state 128

    (39) vertex_expression -> vertex_expression INT .

    CPAR            reduce using rule 39 (vertex_expression -> vertex_expression INT .)
    COMMA           reduce using rule 39 (vertex_expression -> vertex_expression INT .)
    INT             reduce using rule 39 (vertex_expression -> vertex_expression INT .)
    CBR             reduce using rule 39 (vertex_expression -> vertex_expression INT .)


state 129

    (41) edge_expression -> edge_expression OPAR . INT COMMA INT CPAR
    (43) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 146


state 130

    (23) Add_edge_instr -> ID ADD OPAR edge_expression CPAR .

    PLOT            reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    IF              reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FORVERTEX       reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    ID              reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FOREDGE         reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    $end            reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    END             reduce using rule 23 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)


state 131

    (17) For_edge_instr -> FOREDGE ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 147
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 132

    (26) graph_expression -> KRUSKAL OPAR graph_expression CPAR .

    CPAR            reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    UNION           reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    POINT           reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    PLOT            reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    IF              reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    ID              reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    $end            reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    END             reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)
    COMMA           reduce using rule 26 (graph_expression -> KRUSKAL OPAR graph_expression CPAR .)


state 133

    (27) graph_expression -> PRIM OPAR graph_expression CPAR .

    CPAR            reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    UNION           reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    POINT           reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    PLOT            reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    IF              reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    ID              reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    $end            reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    END             reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)
    COMMA           reduce using rule 27 (graph_expression -> PRIM OPAR graph_expression CPAR .)


state 134

    (28) graph_expression -> BFS OPAR graph_expression COMMA . value_expression CPAR
    (55) value_expression -> . algebraic_expression
    (56) value_expression -> . numeric_function
    (57) algebraic_expression -> . INT
    (58) algebraic_expression -> . FLOAT
    (59) algebraic_expression -> . OPAR algebraic_expression CPAR
    (60) algebraic_expression -> . numeric_function
    (61) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (62) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (63) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (64) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (65) algebraic_expression -> . MINUS algebraic_expression
    (67) numeric_function -> . graph_expression POINT NODES_COUNT
    (68) numeric_function -> . graph_expression POINT EDGES_COUNT
    (69) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (25) graph_expression -> . OPAR graph_expression CPAR
    (26) graph_expression -> . KRUSKAL OPAR graph_expression CPAR
    (27) graph_expression -> . PRIM OPAR graph_expression CPAR
    (28) graph_expression -> . BFS OPAR graph_expression COMMA value_expression CPAR
    (29) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (30) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (31) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (32) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (33) graph_expression -> . graph_expression UNION graph_expression
    (34) graph_expression -> . graph_expression INTERSECTION graph_expression
    (35) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (36) graph_expression -> . graph_expression CONCAT graph_expression
    (37) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (38) graph_expression -> . ID

    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    OPAR            shift and go to state 39
    MINUS           shift and go to state 48
    KRUSKAL         shift and go to state 32
    PRIM            shift and go to state 33
    BFS             shift and go to state 34
    GRAPH           shift and go to state 35
    DIGRAPH         shift and go to state 36
    COMPLEMENT      shift and go to state 37
    ID              shift and go to state 38

    graph_expression               shift and go to state 83
    value_expression               shift and go to state 148
    algebraic_expression           shift and go to state 43
    numeric_function               shift and go to state 44

state 135

    (29) graph_expression -> GRAPH OPAR value_expression COMMA . edge_expression CPAR
    (41) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (42) edge_expression -> . OPAR INT COMMA INT CPAR
    (43) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (44) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (46) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . empty
    (66) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 85
    CPAR            reduce using rule 66 (empty -> .)

  ! OPAR            [ reduce using rule 66 (empty -> .) ]

    edge_expression                shift and go to state 149
    empty                          shift and go to state 89

state 136

    (31) graph_expression -> GRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (39) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 150
    INT             shift and go to state 128


state 137

    (30) graph_expression -> DIGRAPH OPAR value_expression COMMA . edge_expression CPAR
    (41) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (42) edge_expression -> . OPAR INT COMMA INT CPAR
    (43) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (44) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (46) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . empty
    (66) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 85
    CPAR            reduce using rule 66 (empty -> .)

  ! OPAR            [ reduce using rule 66 (empty -> .) ]

    edge_expression                shift and go to state 151
    empty                          shift and go to state 89

state 138

    (32) graph_expression -> DIGRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (39) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 152
    INT             shift and go to state 128


state 139

    (37) graph_expression -> COMPLEMENT OPAR graph_expression CPAR .

    CPAR            reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    UNION           reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    POINT           reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    PLOT            reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    IF              reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    ID              reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    $end            reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    END             reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    COMMA           reduce using rule 37 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)


state 140

    (14) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END
    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END ELSE BEGIN Instructions END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 153
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 141

    (70) logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression .

    CPAR            reduce using rule 70 (logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression .)


state 142

    (71) logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression .
    (41) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (43) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            reduce using rule 71 (logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression .)
    OPAR            shift and go to state 129


state 143

    (16) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 154
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 144

    (42) edge_expression -> OPAR INT COMMA . INT CPAR
    (44) edge_expression -> OPAR INT COMMA . INT COMMA INT CPAR
    (46) edge_expression -> OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 155


state 145

    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression . CPAR
    (41) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (43) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 156
    OPAR            shift and go to state 129


state 146

    (41) edge_expression -> edge_expression OPAR INT . COMMA INT CPAR
    (43) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA INT CPAR
    (45) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 157


state 147

    (17) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 158
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 148

    (28) graph_expression -> BFS OPAR graph_expression COMMA value_expression . CPAR

    CPAR            shift and go to state 159


state 149

    (29) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression . CPAR
    (41) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (43) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 160
    OPAR            shift and go to state 129


state 150

    (31) graph_expression -> GRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 161


state 151

    (30) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression . CPAR
    (41) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (43) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 162
    OPAR            shift and go to state 129


state 152

    (32) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 163


state 153

    (14) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .
    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END . ELSE BEGIN Instructions END

    PLOT            reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    IF              reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FORVERTEX       reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ID              reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FOREDGE         reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    $end            reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    END             reduce using rule 14 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ELSE            shift and go to state 164


state 154

    (16) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    END             reduce using rule 16 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)


state 155

    (42) edge_expression -> OPAR INT COMMA INT . CPAR
    (44) edge_expression -> OPAR INT COMMA INT . COMMA INT CPAR
    (46) edge_expression -> OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 166
    COMMA           shift and go to state 165


state 156

    (24) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .

    PLOT            reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    END             reduce using rule 24 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)


state 157

    (41) edge_expression -> edge_expression OPAR INT COMMA . INT CPAR
    (43) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA INT CPAR
    (45) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 167


state 158

    (17) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    END             reduce using rule 17 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)


state 159

    (28) graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .

    CPAR            reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    UNION           reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    INTERSECTION    reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    DIFFERENCE      reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    CONCAT          reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    POINT           reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    PLOT            reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    IF              reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    FORVERTEX       reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    ID              reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    FOREDGE         reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    $end            reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    END             reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)
    COMMA           reduce using rule 28 (graph_expression -> BFS OPAR graph_expression COMMA value_expression CPAR .)


state 160

    (29) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .

    CPAR            reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    UNION           reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    COMMA           reduce using rule 29 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 161

    (31) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (41) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (42) edge_expression -> . OPAR INT COMMA INT CPAR
    (43) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (44) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (46) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . empty
    (66) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 85
    CPAR            reduce using rule 66 (empty -> .)

  ! OPAR            [ reduce using rule 66 (empty -> .) ]

    edge_expression                shift and go to state 168
    empty                          shift and go to state 89

state 162

    (30) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .

    CPAR            reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    UNION           reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    COMMA           reduce using rule 30 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 163

    (32) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (41) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (42) edge_expression -> . OPAR INT COMMA INT CPAR
    (43) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (44) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (46) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (47) edge_expression -> . empty
    (66) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 85
    CPAR            reduce using rule 66 (empty -> .)

  ! OPAR            [ reduce using rule 66 (empty -> .) ]

    edge_expression                shift and go to state 169
    empty                          shift and go to state 89

state 164

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE . BEGIN Instructions END

    BEGIN           shift and go to state 170


state 165

    (44) edge_expression -> OPAR INT COMMA INT COMMA . INT CPAR
    (46) edge_expression -> OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 171
    FLOAT           shift and go to state 172


state 166

    (42) edge_expression -> OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 42 (edge_expression -> OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 42 (edge_expression -> OPAR INT COMMA INT CPAR .)


state 167

    (41) edge_expression -> edge_expression OPAR INT COMMA INT . CPAR
    (43) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA INT CPAR
    (45) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 174
    COMMA           shift and go to state 173


state 168

    (31) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (41) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (43) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 175
    OPAR            shift and go to state 129


state 169

    (32) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (41) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (43) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (45) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 176
    OPAR            shift and go to state 129


state 170

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instructions                   shift and go to state 177
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 171

    (44) edge_expression -> OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 178


state 172

    (46) edge_expression -> OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 179


state 173

    (43) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . INT CPAR
    (45) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 180
    FLOAT           shift and go to state 181


state 174

    (41) edge_expression -> edge_expression OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 41 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 41 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)


state 175

    (31) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    CPAR            reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    UNION           reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    COMMA           reduce using rule 31 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 176

    (32) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    CPAR            reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    UNION           reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    WEIGHTED_PLOT   reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    COMMA           reduce using rule 32 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 177

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (13) Instruction -> . Weighted_plt_instr
    (18) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (14) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (15) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (16) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (19) Assign_instr -> . ID ASSIGN graph_expression
    (17) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (20) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (23) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (24) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (21) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR
    (22) Weighted_plt_instr -> . WEIGHTED_PLOT OPAR graph_expression CPAR

    END             shift and go to state 182
    PLOT            shift and go to state 14
    IF              shift and go to state 15
    FORVERTEX       shift and go to state 16
    ID              shift and go to state 17
    FOREDGE         shift and go to state 18
    K_COLOR_PLOT    shift and go to state 19
    WEIGHTED_PLOT   shift and go to state 20

    Instruction                    shift and go to state 21
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12
    Weighted_plt_instr             shift and go to state 13

state 178

    (44) edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 44 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 44 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)


state 179

    (46) edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 46 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 46 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 180

    (43) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 183


state 181

    (45) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 184


state 182

    (15) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .

    PLOT            reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    IF              reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FORVERTEX       reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    ID              reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FOREDGE         reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    WEIGHTED_PLOT   reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    $end            reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    END             reduce using rule 15 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)


state 183

    (43) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 43 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 43 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)


state 184

    (45) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 45 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 45 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPAR in state 51 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 120 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 127 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 135 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 137 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 161 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 163 resolved as shift
WARNING: reduce/reduce conflict in state 44 resolved using rule (value_expression -> numeric_function)
WARNING: rejected rule (algebraic_expression -> numeric_function) in state 44
