Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMPLEMENT
    DIFFERENCE
    EDGE
    ELIF
    MULTIGRAPH
    PSEUDOGRAPH
    STRING

Grammar

Rule 0     S' -> Instructions
Rule 1     Instructions -> Instructions Instruction
Rule 2     Instructions -> Instruction
Rule 3     Instruction -> Plot_instr
Rule 4     Instruction -> If_instr
Rule 5     Instruction -> If_else_instr
Rule 6     Instruction -> For_vertex_instr
Rule 7     Instruction -> Assign_instr
Rule 8     Instruction -> For_edge_instr
Rule 9     If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END
Rule 10    If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
Rule 11    For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END
Rule 12    For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END
Rule 13    Plot_instr -> PLOT OPAR ID CPAR
Rule 14    Assign_instr -> ID ASSIGN graph_expression
Rule 15    graph_expression -> GRAPH OPAR INT COMMA edge_expression CPAR
Rule 16    graph_expression -> DIGRAPH OPAR INT COMMA edge_expression CPAR
Rule 17    graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 18    graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 19    graph_expression -> graph_expression UNION graph_expression
Rule 20    graph_expression -> graph_expression INTERSECTION graph_expression
Rule 21    vertex_expression -> vertex_expression INT
Rule 22    vertex_expression -> INT
Rule 23    edge_expression -> edge_expression OPAR INT COMMA INT CPAR
Rule 24    edge_expression -> OPAR INT COMMA INT CPAR
Rule 25    edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR
Rule 26    edge_expression -> OPAR INT COMMA INT COMMA INT CPAR
Rule 27    edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 28    edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 29    edge_expression -> empty
Rule 30    logic_expression -> value_expression EQUAL value_expression
Rule 31    logic_expression -> value_expression GREATER value_expression
Rule 32    logic_expression -> value_expression LESS value_expression
Rule 33    logic_expression -> value_expression GREATEREQ value_expression
Rule 34    logic_expression -> value_expression LESSEQ value_expression
Rule 35    logic_expression -> value_expression NEQUAL value_expression
Rule 36    value_expression -> algebraic_expression
Rule 37    algebraic_expression -> INT
Rule 38    algebraic_expression -> FLOAT
Rule 39    algebraic_expression -> algebraic_expression PLUS algebraic_expression
Rule 40    algebraic_expression -> algebraic_expression MINUS algebraic_expression
Rule 41    algebraic_expression -> algebraic_expression MUL algebraic_expression
Rule 42    algebraic_expression -> algebraic_expression DIV algebraic_expression
Rule 43    algebraic_expression -> MINUS algebraic_expression
Rule 44    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 14
BEGIN                : 9 10 10 11 12
CBR                  : 17 18
COMMA                : 15 16 17 18 23 24 25 25 26 26 27 27 28 28
COMPLEMENT           : 
CPAR                 : 9 10 13 15 16 17 18 23 24 25 26 27 28
DIFFERENCE           : 
DIGRAPH              : 16 18
DIV                  : 42
EDGE                 : 
ELIF                 : 
ELSE                 : 10
END                  : 9 10 10 11 12
EQUAL                : 30
FLOAT                : 27 28 38
FOREDGE              : 12
FORVERTEX            : 11
GRAPH                : 15 17
GREATER              : 31
GREATEREQ            : 33
ID                   : 11 11 12 12 13 14
IF                   : 9 10
IN                   : 11 12
INT                  : 15 16 21 22 23 23 24 24 25 25 25 26 26 26 27 27 28 28 37
INTERSECTION         : 20
LESS                 : 32
LESSEQ               : 34
MINUS                : 40 43
MUL                  : 41
MULTIGRAPH           : 
NEQUAL               : 35
OBR                  : 17 18
OPAR                 : 9 10 13 15 16 17 18 23 24 25 26 27 28
PLOT                 : 13
PLUS                 : 39
PSEUDOGRAPH          : 
STRING               : 
UNION                : 19
error                : 

Nonterminals, with rules where they appear

Assign_instr         : 7
For_edge_instr       : 8
For_vertex_instr     : 6
If_else_instr        : 5
If_instr             : 4
Instruction          : 1 2
Instructions         : 1 9 10 10 11 12 0
Plot_instr           : 3
algebraic_expression : 36 39 39 40 40 41 41 42 42 43
edge_expression      : 15 16 17 18 23 25 27
empty                : 29
graph_expression     : 14 19 19 20 20
logic_expression     : 9 10
value_expression     : 30 30 31 31 32 32 33 33 34 34 35 35
vertex_expression    : 17 18 21

Parsing method: LALR

state 0

    (0) S' -> . Instructions
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN graph_expression
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instructions                   shift and go to state 1
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 1

    (0) S' -> Instructions .
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN graph_expression
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instruction                    shift and go to state 14
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 2

    (2) Instructions -> Instruction .

    PLOT            reduce using rule 2 (Instructions -> Instruction .)
    IF              reduce using rule 2 (Instructions -> Instruction .)
    FORVERTEX       reduce using rule 2 (Instructions -> Instruction .)
    ID              reduce using rule 2 (Instructions -> Instruction .)
    FOREDGE         reduce using rule 2 (Instructions -> Instruction .)
    $end            reduce using rule 2 (Instructions -> Instruction .)
    END             reduce using rule 2 (Instructions -> Instruction .)


state 3

    (3) Instruction -> Plot_instr .

    PLOT            reduce using rule 3 (Instruction -> Plot_instr .)
    IF              reduce using rule 3 (Instruction -> Plot_instr .)
    FORVERTEX       reduce using rule 3 (Instruction -> Plot_instr .)
    ID              reduce using rule 3 (Instruction -> Plot_instr .)
    FOREDGE         reduce using rule 3 (Instruction -> Plot_instr .)
    $end            reduce using rule 3 (Instruction -> Plot_instr .)
    END             reduce using rule 3 (Instruction -> Plot_instr .)


state 4

    (4) Instruction -> If_instr .

    PLOT            reduce using rule 4 (Instruction -> If_instr .)
    IF              reduce using rule 4 (Instruction -> If_instr .)
    FORVERTEX       reduce using rule 4 (Instruction -> If_instr .)
    ID              reduce using rule 4 (Instruction -> If_instr .)
    FOREDGE         reduce using rule 4 (Instruction -> If_instr .)
    $end            reduce using rule 4 (Instruction -> If_instr .)
    END             reduce using rule 4 (Instruction -> If_instr .)


state 5

    (5) Instruction -> If_else_instr .

    PLOT            reduce using rule 5 (Instruction -> If_else_instr .)
    IF              reduce using rule 5 (Instruction -> If_else_instr .)
    FORVERTEX       reduce using rule 5 (Instruction -> If_else_instr .)
    ID              reduce using rule 5 (Instruction -> If_else_instr .)
    FOREDGE         reduce using rule 5 (Instruction -> If_else_instr .)
    $end            reduce using rule 5 (Instruction -> If_else_instr .)
    END             reduce using rule 5 (Instruction -> If_else_instr .)


state 6

    (6) Instruction -> For_vertex_instr .

    PLOT            reduce using rule 6 (Instruction -> For_vertex_instr .)
    IF              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FORVERTEX       reduce using rule 6 (Instruction -> For_vertex_instr .)
    ID              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FOREDGE         reduce using rule 6 (Instruction -> For_vertex_instr .)
    $end            reduce using rule 6 (Instruction -> For_vertex_instr .)
    END             reduce using rule 6 (Instruction -> For_vertex_instr .)


state 7

    (7) Instruction -> Assign_instr .

    PLOT            reduce using rule 7 (Instruction -> Assign_instr .)
    IF              reduce using rule 7 (Instruction -> Assign_instr .)
    FORVERTEX       reduce using rule 7 (Instruction -> Assign_instr .)
    ID              reduce using rule 7 (Instruction -> Assign_instr .)
    FOREDGE         reduce using rule 7 (Instruction -> Assign_instr .)
    $end            reduce using rule 7 (Instruction -> Assign_instr .)
    END             reduce using rule 7 (Instruction -> Assign_instr .)


state 8

    (8) Instruction -> For_edge_instr .

    PLOT            reduce using rule 8 (Instruction -> For_edge_instr .)
    IF              reduce using rule 8 (Instruction -> For_edge_instr .)
    FORVERTEX       reduce using rule 8 (Instruction -> For_edge_instr .)
    ID              reduce using rule 8 (Instruction -> For_edge_instr .)
    FOREDGE         reduce using rule 8 (Instruction -> For_edge_instr .)
    $end            reduce using rule 8 (Instruction -> For_edge_instr .)
    END             reduce using rule 8 (Instruction -> For_edge_instr .)


state 9

    (13) Plot_instr -> PLOT . OPAR ID CPAR

    OPAR            shift and go to state 15


state 10

    (14) Assign_instr -> ID . ASSIGN graph_expression

    ASSIGN          shift and go to state 16


state 11

    (9) If_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    OPAR            shift and go to state 17


state 12

    (11) For_vertex_instr -> FORVERTEX . ID IN ID BEGIN Instructions END

    ID              shift and go to state 18


state 13

    (12) For_edge_instr -> FOREDGE . ID IN ID BEGIN Instructions END

    ID              shift and go to state 19


state 14

    (1) Instructions -> Instructions Instruction .

    PLOT            reduce using rule 1 (Instructions -> Instructions Instruction .)
    IF              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FORVERTEX       reduce using rule 1 (Instructions -> Instructions Instruction .)
    ID              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FOREDGE         reduce using rule 1 (Instructions -> Instructions Instruction .)
    $end            reduce using rule 1 (Instructions -> Instructions Instruction .)
    END             reduce using rule 1 (Instructions -> Instructions Instruction .)


state 15

    (13) Plot_instr -> PLOT OPAR . ID CPAR

    ID              shift and go to state 20


state 16

    (14) Assign_instr -> ID ASSIGN . graph_expression
    (15) graph_expression -> . GRAPH OPAR INT COMMA edge_expression CPAR
    (16) graph_expression -> . DIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (18) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (19) graph_expression -> . graph_expression UNION graph_expression
    (20) graph_expression -> . graph_expression INTERSECTION graph_expression

    GRAPH           shift and go to state 22
    DIGRAPH         shift and go to state 23

    graph_expression               shift and go to state 21

state 17

    (9) If_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (30) logic_expression -> . value_expression EQUAL value_expression
    (31) logic_expression -> . value_expression GREATER value_expression
    (32) logic_expression -> . value_expression LESS value_expression
    (33) logic_expression -> . value_expression GREATEREQ value_expression
    (34) logic_expression -> . value_expression LESSEQ value_expression
    (35) logic_expression -> . value_expression NEQUAL value_expression
    (36) value_expression -> . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    logic_expression               shift and go to state 24
    value_expression               shift and go to state 25
    algebraic_expression           shift and go to state 26

state 18

    (11) For_vertex_instr -> FORVERTEX ID . IN ID BEGIN Instructions END

    IN              shift and go to state 30


state 19

    (12) For_edge_instr -> FOREDGE ID . IN ID BEGIN Instructions END

    IN              shift and go to state 31


state 20

    (13) Plot_instr -> PLOT OPAR ID . CPAR

    CPAR            shift and go to state 32


state 21

    (14) Assign_instr -> ID ASSIGN graph_expression .
    (19) graph_expression -> graph_expression . UNION graph_expression
    (20) graph_expression -> graph_expression . INTERSECTION graph_expression

    PLOT            reduce using rule 14 (Assign_instr -> ID ASSIGN graph_expression .)
    IF              reduce using rule 14 (Assign_instr -> ID ASSIGN graph_expression .)
    FORVERTEX       reduce using rule 14 (Assign_instr -> ID ASSIGN graph_expression .)
    ID              reduce using rule 14 (Assign_instr -> ID ASSIGN graph_expression .)
    FOREDGE         reduce using rule 14 (Assign_instr -> ID ASSIGN graph_expression .)
    $end            reduce using rule 14 (Assign_instr -> ID ASSIGN graph_expression .)
    END             reduce using rule 14 (Assign_instr -> ID ASSIGN graph_expression .)
    UNION           shift and go to state 33
    INTERSECTION    shift and go to state 34


state 22

    (15) graph_expression -> GRAPH . OPAR INT COMMA edge_expression CPAR
    (17) graph_expression -> GRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 35


state 23

    (16) graph_expression -> DIGRAPH . OPAR INT COMMA edge_expression CPAR
    (18) graph_expression -> DIGRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 36


state 24

    (9) If_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END
    (10) If_else_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    CPAR            shift and go to state 37


state 25

    (30) logic_expression -> value_expression . EQUAL value_expression
    (31) logic_expression -> value_expression . GREATER value_expression
    (32) logic_expression -> value_expression . LESS value_expression
    (33) logic_expression -> value_expression . GREATEREQ value_expression
    (34) logic_expression -> value_expression . LESSEQ value_expression
    (35) logic_expression -> value_expression . NEQUAL value_expression

    EQUAL           shift and go to state 38
    GREATER         shift and go to state 39
    LESS            shift and go to state 40
    GREATEREQ       shift and go to state 41
    LESSEQ          shift and go to state 42
    NEQUAL          shift and go to state 43


state 26

    (36) value_expression -> algebraic_expression .
    (39) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (40) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (41) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (42) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    EQUAL           reduce using rule 36 (value_expression -> algebraic_expression .)
    GREATER         reduce using rule 36 (value_expression -> algebraic_expression .)
    LESS            reduce using rule 36 (value_expression -> algebraic_expression .)
    GREATEREQ       reduce using rule 36 (value_expression -> algebraic_expression .)
    LESSEQ          reduce using rule 36 (value_expression -> algebraic_expression .)
    NEQUAL          reduce using rule 36 (value_expression -> algebraic_expression .)
    CPAR            reduce using rule 36 (value_expression -> algebraic_expression .)
    PLUS            shift and go to state 44
    MINUS           shift and go to state 45
    MUL             shift and go to state 46
    DIV             shift and go to state 47


state 27

    (37) algebraic_expression -> INT .

    PLUS            reduce using rule 37 (algebraic_expression -> INT .)
    MINUS           reduce using rule 37 (algebraic_expression -> INT .)
    MUL             reduce using rule 37 (algebraic_expression -> INT .)
    DIV             reduce using rule 37 (algebraic_expression -> INT .)
    EQUAL           reduce using rule 37 (algebraic_expression -> INT .)
    GREATER         reduce using rule 37 (algebraic_expression -> INT .)
    LESS            reduce using rule 37 (algebraic_expression -> INT .)
    GREATEREQ       reduce using rule 37 (algebraic_expression -> INT .)
    LESSEQ          reduce using rule 37 (algebraic_expression -> INT .)
    NEQUAL          reduce using rule 37 (algebraic_expression -> INT .)
    CPAR            reduce using rule 37 (algebraic_expression -> INT .)


state 28

    (38) algebraic_expression -> FLOAT .

    PLUS            reduce using rule 38 (algebraic_expression -> FLOAT .)
    MINUS           reduce using rule 38 (algebraic_expression -> FLOAT .)
    MUL             reduce using rule 38 (algebraic_expression -> FLOAT .)
    DIV             reduce using rule 38 (algebraic_expression -> FLOAT .)
    EQUAL           reduce using rule 38 (algebraic_expression -> FLOAT .)
    GREATER         reduce using rule 38 (algebraic_expression -> FLOAT .)
    LESS            reduce using rule 38 (algebraic_expression -> FLOAT .)
    GREATEREQ       reduce using rule 38 (algebraic_expression -> FLOAT .)
    LESSEQ          reduce using rule 38 (algebraic_expression -> FLOAT .)
    NEQUAL          reduce using rule 38 (algebraic_expression -> FLOAT .)
    CPAR            reduce using rule 38 (algebraic_expression -> FLOAT .)


state 29

    (43) algebraic_expression -> MINUS . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    algebraic_expression           shift and go to state 48

state 30

    (11) For_vertex_instr -> FORVERTEX ID IN . ID BEGIN Instructions END

    ID              shift and go to state 49


state 31

    (12) For_edge_instr -> FOREDGE ID IN . ID BEGIN Instructions END

    ID              shift and go to state 50


state 32

    (13) Plot_instr -> PLOT OPAR ID CPAR .

    PLOT            reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    IF              reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    FORVERTEX       reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    ID              reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    FOREDGE         reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    $end            reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)
    END             reduce using rule 13 (Plot_instr -> PLOT OPAR ID CPAR .)


state 33

    (19) graph_expression -> graph_expression UNION . graph_expression
    (15) graph_expression -> . GRAPH OPAR INT COMMA edge_expression CPAR
    (16) graph_expression -> . DIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (18) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (19) graph_expression -> . graph_expression UNION graph_expression
    (20) graph_expression -> . graph_expression INTERSECTION graph_expression

    GRAPH           shift and go to state 22
    DIGRAPH         shift and go to state 23

    graph_expression               shift and go to state 51

state 34

    (20) graph_expression -> graph_expression INTERSECTION . graph_expression
    (15) graph_expression -> . GRAPH OPAR INT COMMA edge_expression CPAR
    (16) graph_expression -> . DIGRAPH OPAR INT COMMA edge_expression CPAR
    (17) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (18) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (19) graph_expression -> . graph_expression UNION graph_expression
    (20) graph_expression -> . graph_expression INTERSECTION graph_expression

    GRAPH           shift and go to state 22
    DIGRAPH         shift and go to state 23

    graph_expression               shift and go to state 52

state 35

    (15) graph_expression -> GRAPH OPAR . INT COMMA edge_expression CPAR
    (17) graph_expression -> GRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR

    INT             shift and go to state 53
    OBR             shift and go to state 54


state 36

    (16) graph_expression -> DIGRAPH OPAR . INT COMMA edge_expression CPAR
    (18) graph_expression -> DIGRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR

    INT             shift and go to state 55
    OBR             shift and go to state 56


state 37

    (9) If_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END
    (10) If_else_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END ELSE BEGIN Instructions END

    BEGIN           shift and go to state 57


state 38

    (30) logic_expression -> value_expression EQUAL . value_expression
    (36) value_expression -> . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    value_expression               shift and go to state 58
    algebraic_expression           shift and go to state 26

state 39

    (31) logic_expression -> value_expression GREATER . value_expression
    (36) value_expression -> . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    value_expression               shift and go to state 59
    algebraic_expression           shift and go to state 26

state 40

    (32) logic_expression -> value_expression LESS . value_expression
    (36) value_expression -> . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    value_expression               shift and go to state 60
    algebraic_expression           shift and go to state 26

state 41

    (33) logic_expression -> value_expression GREATEREQ . value_expression
    (36) value_expression -> . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    value_expression               shift and go to state 61
    algebraic_expression           shift and go to state 26

state 42

    (34) logic_expression -> value_expression LESSEQ . value_expression
    (36) value_expression -> . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    value_expression               shift and go to state 62
    algebraic_expression           shift and go to state 26

state 43

    (35) logic_expression -> value_expression NEQUAL . value_expression
    (36) value_expression -> . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    value_expression               shift and go to state 63
    algebraic_expression           shift and go to state 26

state 44

    (39) algebraic_expression -> algebraic_expression PLUS . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    algebraic_expression           shift and go to state 64

state 45

    (40) algebraic_expression -> algebraic_expression MINUS . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    algebraic_expression           shift and go to state 65

state 46

    (41) algebraic_expression -> algebraic_expression MUL . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    algebraic_expression           shift and go to state 66

state 47

    (42) algebraic_expression -> algebraic_expression DIV . algebraic_expression
    (37) algebraic_expression -> . INT
    (38) algebraic_expression -> . FLOAT
    (39) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (40) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (41) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (42) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (43) algebraic_expression -> . MINUS algebraic_expression

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    MINUS           shift and go to state 29

    algebraic_expression           shift and go to state 67

state 48

    (43) algebraic_expression -> MINUS algebraic_expression .
    (39) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (40) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (41) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (42) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 43 (algebraic_expression -> MINUS algebraic_expression .)
    MINUS           reduce using rule 43 (algebraic_expression -> MINUS algebraic_expression .)
    MUL             reduce using rule 43 (algebraic_expression -> MINUS algebraic_expression .)
    DIV             reduce using rule 43 (algebraic_expression -> MINUS algebraic_expression .)
    EQUAL           reduce using rule 43 (algebraic_expression -> MINUS algebraic_expression .)
    GREATER         reduce using rule 43 (algebraic_expression -> MINUS algebraic_expression .)
    LESS            reduce using rule 43 (algebraic_expression -> MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 43 (algebraic_expression -> MINUS algebraic_expression .)
    LESSEQ          reduce using rule 43 (algebraic_expression -> MINUS algebraic_expression .)
    NEQUAL          reduce using rule 43 (algebraic_expression -> MINUS algebraic_expression .)
    CPAR            reduce using rule 43 (algebraic_expression -> MINUS algebraic_expression .)

  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! MUL             [ shift and go to state 46 ]
  ! DIV             [ shift and go to state 47 ]


state 49

    (11) For_vertex_instr -> FORVERTEX ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 68


state 50

    (12) For_edge_instr -> FOREDGE ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 69


state 51

    (19) graph_expression -> graph_expression UNION graph_expression .
    (19) graph_expression -> graph_expression . UNION graph_expression
    (20) graph_expression -> graph_expression . INTERSECTION graph_expression

  ! shift/reduce conflict for UNION resolved as shift
  ! shift/reduce conflict for INTERSECTION resolved as shift
    PLOT            reduce using rule 19 (graph_expression -> graph_expression UNION graph_expression .)
    IF              reduce using rule 19 (graph_expression -> graph_expression UNION graph_expression .)
    FORVERTEX       reduce using rule 19 (graph_expression -> graph_expression UNION graph_expression .)
    ID              reduce using rule 19 (graph_expression -> graph_expression UNION graph_expression .)
    FOREDGE         reduce using rule 19 (graph_expression -> graph_expression UNION graph_expression .)
    $end            reduce using rule 19 (graph_expression -> graph_expression UNION graph_expression .)
    END             reduce using rule 19 (graph_expression -> graph_expression UNION graph_expression .)
    UNION           shift and go to state 33
    INTERSECTION    shift and go to state 34

  ! UNION           [ reduce using rule 19 (graph_expression -> graph_expression UNION graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 19 (graph_expression -> graph_expression UNION graph_expression .) ]


state 52

    (20) graph_expression -> graph_expression INTERSECTION graph_expression .
    (19) graph_expression -> graph_expression . UNION graph_expression
    (20) graph_expression -> graph_expression . INTERSECTION graph_expression

  ! shift/reduce conflict for UNION resolved as shift
  ! shift/reduce conflict for INTERSECTION resolved as shift
    PLOT            reduce using rule 20 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    IF              reduce using rule 20 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FORVERTEX       reduce using rule 20 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    ID              reduce using rule 20 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FOREDGE         reduce using rule 20 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    $end            reduce using rule 20 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    END             reduce using rule 20 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    UNION           shift and go to state 33
    INTERSECTION    shift and go to state 34

  ! UNION           [ reduce using rule 20 (graph_expression -> graph_expression INTERSECTION graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 20 (graph_expression -> graph_expression INTERSECTION graph_expression .) ]


state 53

    (15) graph_expression -> GRAPH OPAR INT . COMMA edge_expression CPAR

    COMMA           shift and go to state 70


state 54

    (17) graph_expression -> GRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (21) vertex_expression -> . vertex_expression INT
    (22) vertex_expression -> . INT

    INT             shift and go to state 72

    vertex_expression              shift and go to state 71

state 55

    (16) graph_expression -> DIGRAPH OPAR INT . COMMA edge_expression CPAR

    COMMA           shift and go to state 73


state 56

    (18) graph_expression -> DIGRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (21) vertex_expression -> . vertex_expression INT
    (22) vertex_expression -> . INT

    INT             shift and go to state 72

    vertex_expression              shift and go to state 74

state 57

    (9) If_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END
    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END ELSE BEGIN Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN graph_expression
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instructions                   shift and go to state 75
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 58

    (30) logic_expression -> value_expression EQUAL value_expression .

    CPAR            reduce using rule 30 (logic_expression -> value_expression EQUAL value_expression .)


state 59

    (31) logic_expression -> value_expression GREATER value_expression .

    CPAR            reduce using rule 31 (logic_expression -> value_expression GREATER value_expression .)


state 60

    (32) logic_expression -> value_expression LESS value_expression .

    CPAR            reduce using rule 32 (logic_expression -> value_expression LESS value_expression .)


state 61

    (33) logic_expression -> value_expression GREATEREQ value_expression .

    CPAR            reduce using rule 33 (logic_expression -> value_expression GREATEREQ value_expression .)


state 62

    (34) logic_expression -> value_expression LESSEQ value_expression .

    CPAR            reduce using rule 34 (logic_expression -> value_expression LESSEQ value_expression .)


state 63

    (35) logic_expression -> value_expression NEQUAL value_expression .

    CPAR            reduce using rule 35 (logic_expression -> value_expression NEQUAL value_expression .)


state 64

    (39) algebraic_expression -> algebraic_expression PLUS algebraic_expression .
    (39) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (40) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (41) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (42) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 39 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MINUS           reduce using rule 39 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    EQUAL           reduce using rule 39 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATER         reduce using rule 39 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESS            reduce using rule 39 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATEREQ       reduce using rule 39 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESSEQ          reduce using rule 39 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    NEQUAL          reduce using rule 39 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    CPAR            reduce using rule 39 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MUL             shift and go to state 46
    DIV             shift and go to state 47

  ! MUL             [ reduce using rule 39 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 39 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]


state 65

    (40) algebraic_expression -> algebraic_expression MINUS algebraic_expression .
    (39) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (40) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (41) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (42) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 40 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MINUS           reduce using rule 40 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    EQUAL           reduce using rule 40 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATER         reduce using rule 40 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESS            reduce using rule 40 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 40 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESSEQ          reduce using rule 40 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    NEQUAL          reduce using rule 40 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    CPAR            reduce using rule 40 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MUL             shift and go to state 46
    DIV             shift and go to state 47

  ! MUL             [ reduce using rule 40 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 40 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]


state 66

    (41) algebraic_expression -> algebraic_expression MUL algebraic_expression .
    (39) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (40) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (41) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (42) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 41 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MINUS           reduce using rule 41 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MUL             reduce using rule 41 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    DIV             reduce using rule 41 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    EQUAL           reduce using rule 41 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATER         reduce using rule 41 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESS            reduce using rule 41 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATEREQ       reduce using rule 41 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESSEQ          reduce using rule 41 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    NEQUAL          reduce using rule 41 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    CPAR            reduce using rule 41 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)

  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! MUL             [ shift and go to state 46 ]
  ! DIV             [ shift and go to state 47 ]


state 67

    (42) algebraic_expression -> algebraic_expression DIV algebraic_expression .
    (39) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (40) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (41) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (42) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 42 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MINUS           reduce using rule 42 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MUL             reduce using rule 42 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    DIV             reduce using rule 42 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    EQUAL           reduce using rule 42 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATER         reduce using rule 42 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESS            reduce using rule 42 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATEREQ       reduce using rule 42 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESSEQ          reduce using rule 42 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    NEQUAL          reduce using rule 42 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    CPAR            reduce using rule 42 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)

  ! PLUS            [ shift and go to state 44 ]
  ! MINUS           [ shift and go to state 45 ]
  ! MUL             [ shift and go to state 46 ]
  ! DIV             [ shift and go to state 47 ]


state 68

    (11) For_vertex_instr -> FORVERTEX ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN graph_expression
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instructions                   shift and go to state 76
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 69

    (12) For_edge_instr -> FOREDGE ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN graph_expression
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instructions                   shift and go to state 77
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 70

    (15) graph_expression -> GRAPH OPAR INT COMMA . edge_expression CPAR
    (23) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (24) edge_expression -> . OPAR INT COMMA INT CPAR
    (25) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (26) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (27) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (28) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (29) edge_expression -> . empty
    (44) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 78
    CPAR            reduce using rule 44 (empty -> .)

  ! OPAR            [ reduce using rule 44 (empty -> .) ]

    edge_expression                shift and go to state 79
    empty                          shift and go to state 80

state 71

    (17) graph_expression -> GRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (21) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 81
    INT             shift and go to state 82


state 72

    (22) vertex_expression -> INT .

    CBR             reduce using rule 22 (vertex_expression -> INT .)
    INT             reduce using rule 22 (vertex_expression -> INT .)


state 73

    (16) graph_expression -> DIGRAPH OPAR INT COMMA . edge_expression CPAR
    (23) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (24) edge_expression -> . OPAR INT COMMA INT CPAR
    (25) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (26) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (27) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (28) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (29) edge_expression -> . empty
    (44) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 78
    CPAR            reduce using rule 44 (empty -> .)

  ! OPAR            [ reduce using rule 44 (empty -> .) ]

    edge_expression                shift and go to state 83
    empty                          shift and go to state 80

state 74

    (18) graph_expression -> DIGRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (21) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 84
    INT             shift and go to state 82


state 75

    (9) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END
    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END ELSE BEGIN Instructions END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN graph_expression
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    END             shift and go to state 85
    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instruction                    shift and go to state 14
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 76

    (11) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN graph_expression
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    END             shift and go to state 86
    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instruction                    shift and go to state 14
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 77

    (12) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN graph_expression
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    END             shift and go to state 87
    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instruction                    shift and go to state 14
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 78

    (24) edge_expression -> OPAR . INT COMMA INT CPAR
    (26) edge_expression -> OPAR . INT COMMA INT COMMA INT CPAR
    (28) edge_expression -> OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 88


state 79

    (15) graph_expression -> GRAPH OPAR INT COMMA edge_expression . CPAR
    (23) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (25) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (27) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 90
    OPAR            shift and go to state 89


state 80

    (29) edge_expression -> empty .

    CPAR            reduce using rule 29 (edge_expression -> empty .)
    OPAR            reduce using rule 29 (edge_expression -> empty .)


state 81

    (17) graph_expression -> GRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 91


state 82

    (21) vertex_expression -> vertex_expression INT .

    CBR             reduce using rule 21 (vertex_expression -> vertex_expression INT .)
    INT             reduce using rule 21 (vertex_expression -> vertex_expression INT .)


state 83

    (16) graph_expression -> DIGRAPH OPAR INT COMMA edge_expression . CPAR
    (23) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (25) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (27) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 92
    OPAR            shift and go to state 89


state 84

    (18) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 93


state 85

    (9) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .
    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END . ELSE BEGIN Instructions END

    PLOT            reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    IF              reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FORVERTEX       reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ID              reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FOREDGE         reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    $end            reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    END             reduce using rule 9 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ELSE            shift and go to state 94


state 86

    (11) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    END             reduce using rule 11 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)


state 87

    (12) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    END             reduce using rule 12 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)


state 88

    (24) edge_expression -> OPAR INT . COMMA INT CPAR
    (26) edge_expression -> OPAR INT . COMMA INT COMMA INT CPAR
    (28) edge_expression -> OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 95


state 89

    (23) edge_expression -> edge_expression OPAR . INT COMMA INT CPAR
    (25) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA INT CPAR
    (27) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 96


state 90

    (15) graph_expression -> GRAPH OPAR INT COMMA edge_expression CPAR .

    UNION           reduce using rule 15 (graph_expression -> GRAPH OPAR INT COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 15 (graph_expression -> GRAPH OPAR INT COMMA edge_expression CPAR .)
    PLOT            reduce using rule 15 (graph_expression -> GRAPH OPAR INT COMMA edge_expression CPAR .)
    IF              reduce using rule 15 (graph_expression -> GRAPH OPAR INT COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 15 (graph_expression -> GRAPH OPAR INT COMMA edge_expression CPAR .)
    ID              reduce using rule 15 (graph_expression -> GRAPH OPAR INT COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 15 (graph_expression -> GRAPH OPAR INT COMMA edge_expression CPAR .)
    $end            reduce using rule 15 (graph_expression -> GRAPH OPAR INT COMMA edge_expression CPAR .)
    END             reduce using rule 15 (graph_expression -> GRAPH OPAR INT COMMA edge_expression CPAR .)


state 91

    (17) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (23) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (24) edge_expression -> . OPAR INT COMMA INT CPAR
    (25) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (26) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (27) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (28) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (29) edge_expression -> . empty
    (44) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 78
    CPAR            reduce using rule 44 (empty -> .)

  ! OPAR            [ reduce using rule 44 (empty -> .) ]

    edge_expression                shift and go to state 97
    empty                          shift and go to state 80

state 92

    (16) graph_expression -> DIGRAPH OPAR INT COMMA edge_expression CPAR .

    UNION           reduce using rule 16 (graph_expression -> DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 16 (graph_expression -> DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    PLOT            reduce using rule 16 (graph_expression -> DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    IF              reduce using rule 16 (graph_expression -> DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 16 (graph_expression -> DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    ID              reduce using rule 16 (graph_expression -> DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 16 (graph_expression -> DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    $end            reduce using rule 16 (graph_expression -> DIGRAPH OPAR INT COMMA edge_expression CPAR .)
    END             reduce using rule 16 (graph_expression -> DIGRAPH OPAR INT COMMA edge_expression CPAR .)


state 93

    (18) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (23) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (24) edge_expression -> . OPAR INT COMMA INT CPAR
    (25) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (26) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (27) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (28) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (29) edge_expression -> . empty
    (44) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 78
    CPAR            reduce using rule 44 (empty -> .)

  ! OPAR            [ reduce using rule 44 (empty -> .) ]

    edge_expression                shift and go to state 98
    empty                          shift and go to state 80

state 94

    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE . BEGIN Instructions END

    BEGIN           shift and go to state 99


state 95

    (24) edge_expression -> OPAR INT COMMA . INT CPAR
    (26) edge_expression -> OPAR INT COMMA . INT COMMA INT CPAR
    (28) edge_expression -> OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 100


state 96

    (23) edge_expression -> edge_expression OPAR INT . COMMA INT CPAR
    (25) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA INT CPAR
    (27) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 101


state 97

    (17) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (23) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (25) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (27) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 102
    OPAR            shift and go to state 89


state 98

    (18) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (23) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (25) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (27) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 103
    OPAR            shift and go to state 89


state 99

    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN graph_expression
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instructions                   shift and go to state 104
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 100

    (24) edge_expression -> OPAR INT COMMA INT . CPAR
    (26) edge_expression -> OPAR INT COMMA INT . COMMA INT CPAR
    (28) edge_expression -> OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 106
    COMMA           shift and go to state 105


state 101

    (23) edge_expression -> edge_expression OPAR INT COMMA . INT CPAR
    (25) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA INT CPAR
    (27) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 107


state 102

    (17) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    UNION           reduce using rule 17 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 17 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 17 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 17 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 17 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 17 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 17 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 17 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 17 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 103

    (18) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    UNION           reduce using rule 18 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 18 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 18 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 18 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 18 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 18 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 18 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 18 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 18 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 104

    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (13) Plot_instr -> . PLOT OPAR ID CPAR
    (9) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (10) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (11) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (14) Assign_instr -> . ID ASSIGN graph_expression
    (12) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END

    END             shift and go to state 108
    PLOT            shift and go to state 9
    IF              shift and go to state 11
    FORVERTEX       shift and go to state 12
    ID              shift and go to state 10
    FOREDGE         shift and go to state 13

    Instruction                    shift and go to state 14
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8

state 105

    (26) edge_expression -> OPAR INT COMMA INT COMMA . INT CPAR
    (28) edge_expression -> OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 109
    FLOAT           shift and go to state 110


state 106

    (24) edge_expression -> OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 24 (edge_expression -> OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 24 (edge_expression -> OPAR INT COMMA INT CPAR .)


state 107

    (23) edge_expression -> edge_expression OPAR INT COMMA INT . CPAR
    (25) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA INT CPAR
    (27) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 112
    COMMA           shift and go to state 111


state 108

    (10) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .

    PLOT            reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    IF              reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FORVERTEX       reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    ID              reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FOREDGE         reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    $end            reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    END             reduce using rule 10 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)


state 109

    (26) edge_expression -> OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 113


state 110

    (28) edge_expression -> OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 114


state 111

    (25) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . INT CPAR
    (27) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 115
    FLOAT           shift and go to state 116


state 112

    (23) edge_expression -> edge_expression OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 23 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 23 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)


state 113

    (26) edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 26 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 26 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)


state 114

    (28) edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 28 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 28 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 115

    (25) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 117


state 116

    (27) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 118


state 117

    (25) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 25 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 25 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)


state 118

    (27) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 27 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 27 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for UNION in state 51 resolved as shift
WARNING: shift/reduce conflict for INTERSECTION in state 51 resolved as shift
WARNING: shift/reduce conflict for UNION in state 52 resolved as shift
WARNING: shift/reduce conflict for INTERSECTION in state 52 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 70 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 73 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 91 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 93 resolved as shift
