Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EDGE
    ELIF
    MULTIGRAPH
    PSEUDOGRAPH
    STRING

Grammar

Rule 0     S' -> Instructions
Rule 1     Instructions -> Instructions Instruction
Rule 2     Instructions -> Instruction
Rule 3     Instruction -> Plot_instr
Rule 4     Instruction -> If_instr
Rule 5     Instruction -> If_else_instr
Rule 6     Instruction -> For_vertex_instr
Rule 7     Instruction -> Assign_instr
Rule 8     Instruction -> For_edge_instr
Rule 9     Instruction -> Add_vertex_instr
Rule 10    Instruction -> Add_edge_instr
Rule 11    Instruction -> Add_vertex_and_edge_instr
Rule 12    Instruction -> K_color_plot_instr
Rule 13    If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END
Rule 14    If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
Rule 15    For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END
Rule 16    For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END
Rule 17    Plot_instr -> PLOT OPAR graph_expression CPAR
Rule 18    Assign_instr -> ID ASSIGN graph_expression
Rule 19    Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR
Rule 20    K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR
Rule 21    Add_edge_instr -> ID ADD OPAR edge_expression CPAR
Rule 22    Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR
Rule 23    graph_expression -> OPAR graph_expression CPAR
Rule 24    graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 25    graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 26    graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 27    graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 28    graph_expression -> graph_expression UNION graph_expression
Rule 29    graph_expression -> graph_expression INTERSECTION graph_expression
Rule 30    graph_expression -> graph_expression DIFFERENCE graph_expression
Rule 31    graph_expression -> graph_expression CONCAT graph_expression
Rule 32    graph_expression -> COMPLEMENT OPAR graph_expression CPAR
Rule 33    graph_expression -> ID
Rule 34    vertex_expression -> vertex_expression INT
Rule 35    vertex_expression -> INT
Rule 36    edge_expression -> edge_expression OPAR INT COMMA INT CPAR
Rule 37    edge_expression -> OPAR INT COMMA INT CPAR
Rule 38    edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR
Rule 39    edge_expression -> OPAR INT COMMA INT COMMA INT CPAR
Rule 40    edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 41    edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 42    edge_expression -> empty
Rule 43    logic_expression -> value_expression EQUAL value_expression
Rule 44    logic_expression -> value_expression GREATER value_expression
Rule 45    logic_expression -> value_expression LESS value_expression
Rule 46    logic_expression -> value_expression GREATEREQ value_expression
Rule 47    logic_expression -> value_expression LESSEQ value_expression
Rule 48    logic_expression -> value_expression NEQUAL value_expression
Rule 49    logic_expression -> logic_function
Rule 50    value_expression -> algebraic_expression
Rule 51    value_expression -> numeric_function
Rule 52    algebraic_expression -> INT
Rule 53    algebraic_expression -> FLOAT
Rule 54    algebraic_expression -> OPAR algebraic_expression CPAR
Rule 55    algebraic_expression -> numeric_function
Rule 56    algebraic_expression -> algebraic_expression PLUS algebraic_expression
Rule 57    algebraic_expression -> algebraic_expression MINUS algebraic_expression
Rule 58    algebraic_expression -> algebraic_expression MUL algebraic_expression
Rule 59    algebraic_expression -> algebraic_expression DIV algebraic_expression
Rule 60    algebraic_expression -> MINUS algebraic_expression
Rule 61    empty -> <empty>
Rule 62    numeric_function -> graph_expression POINT NODES_COUNT
Rule 63    numeric_function -> graph_expression POINT EDGES_COUNT
Rule 64    numeric_function -> graph_expression POINT WEIGHT_SUM
Rule 65    logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression
Rule 66    logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression

Terminals, with rules where they appear

ADD                  : 19 21 22
ASSIGN               : 18
BEGIN                : 13 14 14 15 16
CBR                  : 26 27
COMMA                : 22 24 25 26 27 36 37 38 38 39 39 40 40 41 41
COMPLEMENT           : 32
CONCAT               : 31
CONTAIN_EDGES        : 66
CONTAIN_VERTEX       : 65
CPAR                 : 13 14 17 19 20 21 22 23 24 25 26 27 32 36 37 38 39 40 41 54
DIFFERENCE           : 30
DIGRAPH              : 25 27
DIV                  : 59
EDGE                 : 
EDGES_COUNT          : 63
ELIF                 : 
ELSE                 : 14
END                  : 13 14 14 15 16
EQUAL                : 43
FLOAT                : 40 41 53
FOREDGE              : 16
FORVERTEX            : 15
GRAPH                : 24 26
GREATER              : 44
GREATEREQ            : 46
ID                   : 15 15 16 16 18 19 21 22 33
IF                   : 13 14
IN                   : 15 16
INT                  : 34 35 36 36 37 37 38 38 38 39 39 39 40 40 41 41 52
INTERSECTION         : 29
K_COLOR_PLOT         : 20
LESS                 : 45
LESSEQ               : 47
MINUS                : 57 60
MUL                  : 58
MULTIGRAPH           : 
NEQUAL               : 48
NODES_COUNT          : 62
OBR                  : 26 27
OPAR                 : 13 14 17 19 20 21 22 23 24 25 26 27 32 36 37 38 39 40 41 54
PLOT                 : 17
PLUS                 : 56
POINT                : 62 63 64 65 66
PSEUDOGRAPH          : 
STRING               : 
UNION                : 28
WEIGHT_SUM           : 64
error                : 

Nonterminals, with rules where they appear

Add_edge_instr       : 10
Add_vertex_and_edge_instr : 11
Add_vertex_instr     : 9
Assign_instr         : 7
For_edge_instr       : 8
For_vertex_instr     : 6
If_else_instr        : 5
If_instr             : 4
Instruction          : 1 2
Instructions         : 1 13 14 14 15 16 0
K_color_plot_instr   : 12
Plot_instr           : 3
algebraic_expression : 50 54 56 56 57 57 58 58 59 59 60
edge_expression      : 21 22 24 25 26 27 36 38 40 66
empty                : 42
graph_expression     : 17 18 20 23 28 28 29 29 30 30 31 31 32 62 63 64 65 66
logic_expression     : 13 14
logic_function       : 49
numeric_function     : 51 55
value_expression     : 24 25 43 43 44 44 45 45 46 46 47 47 48 48 65
vertex_expression    : 19 22 26 27 34

Parsing method: LALR

state 0

    (0) S' -> . Instructions
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (17) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (13) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (15) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (18) Assign_instr -> . ID ASSIGN graph_expression
    (16) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (19) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (21) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (20) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 13
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 16
    FOREDGE         shift and go to state 17
    K_COLOR_PLOT    shift and go to state 18

    Instructions                   shift and go to state 1
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12

state 1

    (0) S' -> Instructions .
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (17) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (13) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (15) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (18) Assign_instr -> . ID ASSIGN graph_expression
    (16) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (19) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (21) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (20) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 13
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 16
    FOREDGE         shift and go to state 17
    K_COLOR_PLOT    shift and go to state 18

    Instruction                    shift and go to state 19
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12

state 2

    (2) Instructions -> Instruction .

    PLOT            reduce using rule 2 (Instructions -> Instruction .)
    IF              reduce using rule 2 (Instructions -> Instruction .)
    FORVERTEX       reduce using rule 2 (Instructions -> Instruction .)
    ID              reduce using rule 2 (Instructions -> Instruction .)
    FOREDGE         reduce using rule 2 (Instructions -> Instruction .)
    K_COLOR_PLOT    reduce using rule 2 (Instructions -> Instruction .)
    $end            reduce using rule 2 (Instructions -> Instruction .)
    END             reduce using rule 2 (Instructions -> Instruction .)


state 3

    (3) Instruction -> Plot_instr .

    PLOT            reduce using rule 3 (Instruction -> Plot_instr .)
    IF              reduce using rule 3 (Instruction -> Plot_instr .)
    FORVERTEX       reduce using rule 3 (Instruction -> Plot_instr .)
    ID              reduce using rule 3 (Instruction -> Plot_instr .)
    FOREDGE         reduce using rule 3 (Instruction -> Plot_instr .)
    K_COLOR_PLOT    reduce using rule 3 (Instruction -> Plot_instr .)
    $end            reduce using rule 3 (Instruction -> Plot_instr .)
    END             reduce using rule 3 (Instruction -> Plot_instr .)


state 4

    (4) Instruction -> If_instr .

    PLOT            reduce using rule 4 (Instruction -> If_instr .)
    IF              reduce using rule 4 (Instruction -> If_instr .)
    FORVERTEX       reduce using rule 4 (Instruction -> If_instr .)
    ID              reduce using rule 4 (Instruction -> If_instr .)
    FOREDGE         reduce using rule 4 (Instruction -> If_instr .)
    K_COLOR_PLOT    reduce using rule 4 (Instruction -> If_instr .)
    $end            reduce using rule 4 (Instruction -> If_instr .)
    END             reduce using rule 4 (Instruction -> If_instr .)


state 5

    (5) Instruction -> If_else_instr .

    PLOT            reduce using rule 5 (Instruction -> If_else_instr .)
    IF              reduce using rule 5 (Instruction -> If_else_instr .)
    FORVERTEX       reduce using rule 5 (Instruction -> If_else_instr .)
    ID              reduce using rule 5 (Instruction -> If_else_instr .)
    FOREDGE         reduce using rule 5 (Instruction -> If_else_instr .)
    K_COLOR_PLOT    reduce using rule 5 (Instruction -> If_else_instr .)
    $end            reduce using rule 5 (Instruction -> If_else_instr .)
    END             reduce using rule 5 (Instruction -> If_else_instr .)


state 6

    (6) Instruction -> For_vertex_instr .

    PLOT            reduce using rule 6 (Instruction -> For_vertex_instr .)
    IF              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FORVERTEX       reduce using rule 6 (Instruction -> For_vertex_instr .)
    ID              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FOREDGE         reduce using rule 6 (Instruction -> For_vertex_instr .)
    K_COLOR_PLOT    reduce using rule 6 (Instruction -> For_vertex_instr .)
    $end            reduce using rule 6 (Instruction -> For_vertex_instr .)
    END             reduce using rule 6 (Instruction -> For_vertex_instr .)


state 7

    (7) Instruction -> Assign_instr .

    PLOT            reduce using rule 7 (Instruction -> Assign_instr .)
    IF              reduce using rule 7 (Instruction -> Assign_instr .)
    FORVERTEX       reduce using rule 7 (Instruction -> Assign_instr .)
    ID              reduce using rule 7 (Instruction -> Assign_instr .)
    FOREDGE         reduce using rule 7 (Instruction -> Assign_instr .)
    K_COLOR_PLOT    reduce using rule 7 (Instruction -> Assign_instr .)
    $end            reduce using rule 7 (Instruction -> Assign_instr .)
    END             reduce using rule 7 (Instruction -> Assign_instr .)


state 8

    (8) Instruction -> For_edge_instr .

    PLOT            reduce using rule 8 (Instruction -> For_edge_instr .)
    IF              reduce using rule 8 (Instruction -> For_edge_instr .)
    FORVERTEX       reduce using rule 8 (Instruction -> For_edge_instr .)
    ID              reduce using rule 8 (Instruction -> For_edge_instr .)
    FOREDGE         reduce using rule 8 (Instruction -> For_edge_instr .)
    K_COLOR_PLOT    reduce using rule 8 (Instruction -> For_edge_instr .)
    $end            reduce using rule 8 (Instruction -> For_edge_instr .)
    END             reduce using rule 8 (Instruction -> For_edge_instr .)


state 9

    (9) Instruction -> Add_vertex_instr .

    PLOT            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    IF              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FORVERTEX       reduce using rule 9 (Instruction -> Add_vertex_instr .)
    ID              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FOREDGE         reduce using rule 9 (Instruction -> Add_vertex_instr .)
    K_COLOR_PLOT    reduce using rule 9 (Instruction -> Add_vertex_instr .)
    $end            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    END             reduce using rule 9 (Instruction -> Add_vertex_instr .)


state 10

    (10) Instruction -> Add_edge_instr .

    PLOT            reduce using rule 10 (Instruction -> Add_edge_instr .)
    IF              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FORVERTEX       reduce using rule 10 (Instruction -> Add_edge_instr .)
    ID              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FOREDGE         reduce using rule 10 (Instruction -> Add_edge_instr .)
    K_COLOR_PLOT    reduce using rule 10 (Instruction -> Add_edge_instr .)
    $end            reduce using rule 10 (Instruction -> Add_edge_instr .)
    END             reduce using rule 10 (Instruction -> Add_edge_instr .)


state 11

    (11) Instruction -> Add_vertex_and_edge_instr .

    PLOT            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    IF              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FORVERTEX       reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    ID              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FOREDGE         reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    K_COLOR_PLOT    reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    $end            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    END             reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)


state 12

    (12) Instruction -> K_color_plot_instr .

    PLOT            reduce using rule 12 (Instruction -> K_color_plot_instr .)
    IF              reduce using rule 12 (Instruction -> K_color_plot_instr .)
    FORVERTEX       reduce using rule 12 (Instruction -> K_color_plot_instr .)
    ID              reduce using rule 12 (Instruction -> K_color_plot_instr .)
    FOREDGE         reduce using rule 12 (Instruction -> K_color_plot_instr .)
    K_COLOR_PLOT    reduce using rule 12 (Instruction -> K_color_plot_instr .)
    $end            reduce using rule 12 (Instruction -> K_color_plot_instr .)
    END             reduce using rule 12 (Instruction -> K_color_plot_instr .)


state 13

    (17) Plot_instr -> PLOT . OPAR graph_expression CPAR

    OPAR            shift and go to state 20


state 14

    (13) If_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    OPAR            shift and go to state 21


state 15

    (15) For_vertex_instr -> FORVERTEX . ID IN ID BEGIN Instructions END

    ID              shift and go to state 22


state 16

    (18) Assign_instr -> ID . ASSIGN graph_expression
    (19) Add_vertex_instr -> ID . ADD OPAR vertex_expression CPAR
    (21) Add_edge_instr -> ID . ADD OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> ID . ADD OPAR vertex_expression COMMA edge_expression CPAR

    ASSIGN          shift and go to state 23
    ADD             shift and go to state 24


state 17

    (16) For_edge_instr -> FOREDGE . ID IN ID BEGIN Instructions END

    ID              shift and go to state 25


state 18

    (20) K_color_plot_instr -> K_COLOR_PLOT . OPAR graph_expression CPAR

    OPAR            shift and go to state 26


state 19

    (1) Instructions -> Instructions Instruction .

    PLOT            reduce using rule 1 (Instructions -> Instructions Instruction .)
    IF              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FORVERTEX       reduce using rule 1 (Instructions -> Instructions Instruction .)
    ID              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FOREDGE         reduce using rule 1 (Instructions -> Instructions Instruction .)
    K_COLOR_PLOT    reduce using rule 1 (Instructions -> Instructions Instruction .)
    $end            reduce using rule 1 (Instructions -> Instructions Instruction .)
    END             reduce using rule 1 (Instructions -> Instructions Instruction .)


state 20

    (17) Plot_instr -> PLOT OPAR . graph_expression CPAR
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    graph_expression               shift and go to state 28

state 21

    (13) If_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (43) logic_expression -> . value_expression EQUAL value_expression
    (44) logic_expression -> . value_expression GREATER value_expression
    (45) logic_expression -> . value_expression LESS value_expression
    (46) logic_expression -> . value_expression GREATEREQ value_expression
    (47) logic_expression -> . value_expression LESSEQ value_expression
    (48) logic_expression -> . value_expression NEQUAL value_expression
    (49) logic_expression -> . logic_function
    (50) value_expression -> . algebraic_expression
    (51) value_expression -> . numeric_function
    (65) logic_function -> . graph_expression POINT CONTAIN_VERTEX value_expression
    (66) logic_function -> . graph_expression POINT CONTAIN_EDGES edge_expression
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    logic_expression               shift and go to state 34
    value_expression               shift and go to state 35
    logic_function                 shift and go to state 36
    algebraic_expression           shift and go to state 37
    numeric_function               shift and go to state 38
    graph_expression               shift and go to state 39

state 22

    (15) For_vertex_instr -> FORVERTEX ID . IN ID BEGIN Instructions END

    IN              shift and go to state 43


state 23

    (18) Assign_instr -> ID ASSIGN . graph_expression
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    graph_expression               shift and go to state 44

state 24

    (19) Add_vertex_instr -> ID ADD . OPAR vertex_expression CPAR
    (21) Add_edge_instr -> ID ADD . OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> ID ADD . OPAR vertex_expression COMMA edge_expression CPAR

    OPAR            shift and go to state 45


state 25

    (16) For_edge_instr -> FOREDGE ID . IN ID BEGIN Instructions END

    IN              shift and go to state 46


state 26

    (20) K_color_plot_instr -> K_COLOR_PLOT OPAR . graph_expression CPAR
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    graph_expression               shift and go to state 47

state 27

    (23) graph_expression -> OPAR . graph_expression CPAR
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    graph_expression               shift and go to state 48

state 28

    (17) Plot_instr -> PLOT OPAR graph_expression . CPAR
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 49
    UNION           shift and go to state 50
    INTERSECTION    shift and go to state 51
    DIFFERENCE      shift and go to state 52
    CONCAT          shift and go to state 53


state 29

    (24) graph_expression -> GRAPH . OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> GRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 54


state 30

    (25) graph_expression -> DIGRAPH . OPAR value_expression COMMA edge_expression CPAR
    (27) graph_expression -> DIGRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 55


state 31

    (32) graph_expression -> COMPLEMENT . OPAR graph_expression CPAR

    OPAR            shift and go to state 56


state 32

    (33) graph_expression -> ID .

    CPAR            reduce using rule 33 (graph_expression -> ID .)
    UNION           reduce using rule 33 (graph_expression -> ID .)
    INTERSECTION    reduce using rule 33 (graph_expression -> ID .)
    DIFFERENCE      reduce using rule 33 (graph_expression -> ID .)
    CONCAT          reduce using rule 33 (graph_expression -> ID .)
    POINT           reduce using rule 33 (graph_expression -> ID .)
    PLOT            reduce using rule 33 (graph_expression -> ID .)
    IF              reduce using rule 33 (graph_expression -> ID .)
    FORVERTEX       reduce using rule 33 (graph_expression -> ID .)
    ID              reduce using rule 33 (graph_expression -> ID .)
    FOREDGE         reduce using rule 33 (graph_expression -> ID .)
    K_COLOR_PLOT    reduce using rule 33 (graph_expression -> ID .)
    $end            reduce using rule 33 (graph_expression -> ID .)
    END             reduce using rule 33 (graph_expression -> ID .)


state 33

    (54) algebraic_expression -> OPAR . algebraic_expression CPAR
    (23) graph_expression -> OPAR . graph_expression CPAR
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    algebraic_expression           shift and go to state 57
    graph_expression               shift and go to state 58
    numeric_function               shift and go to state 59

state 34

    (13) If_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END
    (14) If_else_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    CPAR            shift and go to state 60


state 35

    (43) logic_expression -> value_expression . EQUAL value_expression
    (44) logic_expression -> value_expression . GREATER value_expression
    (45) logic_expression -> value_expression . LESS value_expression
    (46) logic_expression -> value_expression . GREATEREQ value_expression
    (47) logic_expression -> value_expression . LESSEQ value_expression
    (48) logic_expression -> value_expression . NEQUAL value_expression

    EQUAL           shift and go to state 61
    GREATER         shift and go to state 62
    LESS            shift and go to state 63
    GREATEREQ       shift and go to state 64
    LESSEQ          shift and go to state 65
    NEQUAL          shift and go to state 66


state 36

    (49) logic_expression -> logic_function .

    CPAR            reduce using rule 49 (logic_expression -> logic_function .)


state 37

    (50) value_expression -> algebraic_expression .
    (56) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (57) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (58) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (59) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    EQUAL           reduce using rule 50 (value_expression -> algebraic_expression .)
    GREATER         reduce using rule 50 (value_expression -> algebraic_expression .)
    LESS            reduce using rule 50 (value_expression -> algebraic_expression .)
    GREATEREQ       reduce using rule 50 (value_expression -> algebraic_expression .)
    LESSEQ          reduce using rule 50 (value_expression -> algebraic_expression .)
    NEQUAL          reduce using rule 50 (value_expression -> algebraic_expression .)
    COMMA           reduce using rule 50 (value_expression -> algebraic_expression .)
    CPAR            reduce using rule 50 (value_expression -> algebraic_expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70


state 38

    (51) value_expression -> numeric_function .
    (55) algebraic_expression -> numeric_function .

  ! reduce/reduce conflict for EQUAL resolved using rule 51 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for GREATER resolved using rule 51 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for LESS resolved using rule 51 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 51 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 51 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 51 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for COMMA resolved using rule 51 (value_expression -> numeric_function .)
  ! reduce/reduce conflict for CPAR resolved using rule 51 (value_expression -> numeric_function .)
    EQUAL           reduce using rule 51 (value_expression -> numeric_function .)
    GREATER         reduce using rule 51 (value_expression -> numeric_function .)
    LESS            reduce using rule 51 (value_expression -> numeric_function .)
    GREATEREQ       reduce using rule 51 (value_expression -> numeric_function .)
    LESSEQ          reduce using rule 51 (value_expression -> numeric_function .)
    NEQUAL          reduce using rule 51 (value_expression -> numeric_function .)
    COMMA           reduce using rule 51 (value_expression -> numeric_function .)
    CPAR            reduce using rule 51 (value_expression -> numeric_function .)
    PLUS            reduce using rule 55 (algebraic_expression -> numeric_function .)
    MINUS           reduce using rule 55 (algebraic_expression -> numeric_function .)
    MUL             reduce using rule 55 (algebraic_expression -> numeric_function .)
    DIV             reduce using rule 55 (algebraic_expression -> numeric_function .)

  ! EQUAL           [ reduce using rule 55 (algebraic_expression -> numeric_function .) ]
  ! GREATER         [ reduce using rule 55 (algebraic_expression -> numeric_function .) ]
  ! LESS            [ reduce using rule 55 (algebraic_expression -> numeric_function .) ]
  ! GREATEREQ       [ reduce using rule 55 (algebraic_expression -> numeric_function .) ]
  ! LESSEQ          [ reduce using rule 55 (algebraic_expression -> numeric_function .) ]
  ! NEQUAL          [ reduce using rule 55 (algebraic_expression -> numeric_function .) ]
  ! COMMA           [ reduce using rule 55 (algebraic_expression -> numeric_function .) ]
  ! CPAR            [ reduce using rule 55 (algebraic_expression -> numeric_function .) ]


state 39

    (65) logic_function -> graph_expression . POINT CONTAIN_VERTEX value_expression
    (66) logic_function -> graph_expression . POINT CONTAIN_EDGES edge_expression
    (62) numeric_function -> graph_expression . POINT NODES_COUNT
    (63) numeric_function -> graph_expression . POINT EDGES_COUNT
    (64) numeric_function -> graph_expression . POINT WEIGHT_SUM
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression

    POINT           shift and go to state 71
    UNION           shift and go to state 50
    INTERSECTION    shift and go to state 51
    DIFFERENCE      shift and go to state 52
    CONCAT          shift and go to state 53


state 40

    (52) algebraic_expression -> INT .

    PLUS            reduce using rule 52 (algebraic_expression -> INT .)
    MINUS           reduce using rule 52 (algebraic_expression -> INT .)
    MUL             reduce using rule 52 (algebraic_expression -> INT .)
    DIV             reduce using rule 52 (algebraic_expression -> INT .)
    EQUAL           reduce using rule 52 (algebraic_expression -> INT .)
    GREATER         reduce using rule 52 (algebraic_expression -> INT .)
    LESS            reduce using rule 52 (algebraic_expression -> INT .)
    GREATEREQ       reduce using rule 52 (algebraic_expression -> INT .)
    LESSEQ          reduce using rule 52 (algebraic_expression -> INT .)
    NEQUAL          reduce using rule 52 (algebraic_expression -> INT .)
    CPAR            reduce using rule 52 (algebraic_expression -> INT .)
    COMMA           reduce using rule 52 (algebraic_expression -> INT .)


state 41

    (53) algebraic_expression -> FLOAT .

    PLUS            reduce using rule 53 (algebraic_expression -> FLOAT .)
    MINUS           reduce using rule 53 (algebraic_expression -> FLOAT .)
    MUL             reduce using rule 53 (algebraic_expression -> FLOAT .)
    DIV             reduce using rule 53 (algebraic_expression -> FLOAT .)
    EQUAL           reduce using rule 53 (algebraic_expression -> FLOAT .)
    GREATER         reduce using rule 53 (algebraic_expression -> FLOAT .)
    LESS            reduce using rule 53 (algebraic_expression -> FLOAT .)
    GREATEREQ       reduce using rule 53 (algebraic_expression -> FLOAT .)
    LESSEQ          reduce using rule 53 (algebraic_expression -> FLOAT .)
    NEQUAL          reduce using rule 53 (algebraic_expression -> FLOAT .)
    CPAR            reduce using rule 53 (algebraic_expression -> FLOAT .)
    COMMA           reduce using rule 53 (algebraic_expression -> FLOAT .)


state 42

    (60) algebraic_expression -> MINUS . algebraic_expression
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    algebraic_expression           shift and go to state 72
    numeric_function               shift and go to state 59
    graph_expression               shift and go to state 73

state 43

    (15) For_vertex_instr -> FORVERTEX ID IN . ID BEGIN Instructions END

    ID              shift and go to state 74


state 44

    (18) Assign_instr -> ID ASSIGN graph_expression .
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression

    PLOT            reduce using rule 18 (Assign_instr -> ID ASSIGN graph_expression .)
    IF              reduce using rule 18 (Assign_instr -> ID ASSIGN graph_expression .)
    FORVERTEX       reduce using rule 18 (Assign_instr -> ID ASSIGN graph_expression .)
    ID              reduce using rule 18 (Assign_instr -> ID ASSIGN graph_expression .)
    FOREDGE         reduce using rule 18 (Assign_instr -> ID ASSIGN graph_expression .)
    K_COLOR_PLOT    reduce using rule 18 (Assign_instr -> ID ASSIGN graph_expression .)
    $end            reduce using rule 18 (Assign_instr -> ID ASSIGN graph_expression .)
    END             reduce using rule 18 (Assign_instr -> ID ASSIGN graph_expression .)
    UNION           shift and go to state 50
    INTERSECTION    shift and go to state 51
    DIFFERENCE      shift and go to state 52
    CONCAT          shift and go to state 53


state 45

    (19) Add_vertex_instr -> ID ADD OPAR . vertex_expression CPAR
    (21) Add_edge_instr -> ID ADD OPAR . edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> ID ADD OPAR . vertex_expression COMMA edge_expression CPAR
    (34) vertex_expression -> . vertex_expression INT
    (35) vertex_expression -> . INT
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (42) edge_expression -> . empty
    (61) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    INT             shift and go to state 78
    OPAR            shift and go to state 75
    CPAR            reduce using rule 61 (empty -> .)

  ! OPAR            [ reduce using rule 61 (empty -> .) ]

    vertex_expression              shift and go to state 76
    edge_expression                shift and go to state 77
    empty                          shift and go to state 79

state 46

    (16) For_edge_instr -> FOREDGE ID IN . ID BEGIN Instructions END

    ID              shift and go to state 80


state 47

    (20) K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression . CPAR
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 81
    UNION           shift and go to state 50
    INTERSECTION    shift and go to state 51
    DIFFERENCE      shift and go to state 52
    CONCAT          shift and go to state 53


state 48

    (23) graph_expression -> OPAR graph_expression . CPAR
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 82
    UNION           shift and go to state 50
    INTERSECTION    shift and go to state 51
    DIFFERENCE      shift and go to state 52
    CONCAT          shift and go to state 53


state 49

    (17) Plot_instr -> PLOT OPAR graph_expression CPAR .

    PLOT            reduce using rule 17 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    IF              reduce using rule 17 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 17 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    ID              reduce using rule 17 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 17 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 17 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    $end            reduce using rule 17 (Plot_instr -> PLOT OPAR graph_expression CPAR .)
    END             reduce using rule 17 (Plot_instr -> PLOT OPAR graph_expression CPAR .)


state 50

    (28) graph_expression -> graph_expression UNION . graph_expression
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    graph_expression               shift and go to state 83

state 51

    (29) graph_expression -> graph_expression INTERSECTION . graph_expression
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    graph_expression               shift and go to state 84

state 52

    (30) graph_expression -> graph_expression DIFFERENCE . graph_expression
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    graph_expression               shift and go to state 85

state 53

    (31) graph_expression -> graph_expression CONCAT . graph_expression
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    graph_expression               shift and go to state 86

state 54

    (24) graph_expression -> GRAPH OPAR . value_expression COMMA edge_expression CPAR
    (26) graph_expression -> GRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (50) value_expression -> . algebraic_expression
    (51) value_expression -> . numeric_function
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    OBR             shift and go to state 88
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    value_expression               shift and go to state 87
    algebraic_expression           shift and go to state 37
    numeric_function               shift and go to state 38
    graph_expression               shift and go to state 73

state 55

    (25) graph_expression -> DIGRAPH OPAR . value_expression COMMA edge_expression CPAR
    (27) graph_expression -> DIGRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (50) value_expression -> . algebraic_expression
    (51) value_expression -> . numeric_function
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    OBR             shift and go to state 90
    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    value_expression               shift and go to state 89
    algebraic_expression           shift and go to state 37
    numeric_function               shift and go to state 38
    graph_expression               shift and go to state 73

state 56

    (32) graph_expression -> COMPLEMENT OPAR . graph_expression CPAR
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    OPAR            shift and go to state 27
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    graph_expression               shift and go to state 91

state 57

    (54) algebraic_expression -> OPAR algebraic_expression . CPAR
    (56) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (57) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (58) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (59) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    CPAR            shift and go to state 92
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70


state 58

    (23) graph_expression -> OPAR graph_expression . CPAR
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression
    (62) numeric_function -> graph_expression . POINT NODES_COUNT
    (63) numeric_function -> graph_expression . POINT EDGES_COUNT
    (64) numeric_function -> graph_expression . POINT WEIGHT_SUM

    CPAR            shift and go to state 82
    UNION           shift and go to state 50
    INTERSECTION    shift and go to state 51
    DIFFERENCE      shift and go to state 52
    CONCAT          shift and go to state 53
    POINT           shift and go to state 93


state 59

    (55) algebraic_expression -> numeric_function .

    CPAR            reduce using rule 55 (algebraic_expression -> numeric_function .)
    PLUS            reduce using rule 55 (algebraic_expression -> numeric_function .)
    MINUS           reduce using rule 55 (algebraic_expression -> numeric_function .)
    MUL             reduce using rule 55 (algebraic_expression -> numeric_function .)
    DIV             reduce using rule 55 (algebraic_expression -> numeric_function .)
    EQUAL           reduce using rule 55 (algebraic_expression -> numeric_function .)
    GREATER         reduce using rule 55 (algebraic_expression -> numeric_function .)
    LESS            reduce using rule 55 (algebraic_expression -> numeric_function .)
    GREATEREQ       reduce using rule 55 (algebraic_expression -> numeric_function .)
    LESSEQ          reduce using rule 55 (algebraic_expression -> numeric_function .)
    NEQUAL          reduce using rule 55 (algebraic_expression -> numeric_function .)
    COMMA           reduce using rule 55 (algebraic_expression -> numeric_function .)


state 60

    (13) If_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END
    (14) If_else_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END ELSE BEGIN Instructions END

    BEGIN           shift and go to state 94


state 61

    (43) logic_expression -> value_expression EQUAL . value_expression
    (50) value_expression -> . algebraic_expression
    (51) value_expression -> . numeric_function
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    value_expression               shift and go to state 95
    algebraic_expression           shift and go to state 37
    numeric_function               shift and go to state 38
    graph_expression               shift and go to state 73

state 62

    (44) logic_expression -> value_expression GREATER . value_expression
    (50) value_expression -> . algebraic_expression
    (51) value_expression -> . numeric_function
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    value_expression               shift and go to state 96
    algebraic_expression           shift and go to state 37
    numeric_function               shift and go to state 38
    graph_expression               shift and go to state 73

state 63

    (45) logic_expression -> value_expression LESS . value_expression
    (50) value_expression -> . algebraic_expression
    (51) value_expression -> . numeric_function
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    value_expression               shift and go to state 97
    algebraic_expression           shift and go to state 37
    numeric_function               shift and go to state 38
    graph_expression               shift and go to state 73

state 64

    (46) logic_expression -> value_expression GREATEREQ . value_expression
    (50) value_expression -> . algebraic_expression
    (51) value_expression -> . numeric_function
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    value_expression               shift and go to state 98
    algebraic_expression           shift and go to state 37
    numeric_function               shift and go to state 38
    graph_expression               shift and go to state 73

state 65

    (47) logic_expression -> value_expression LESSEQ . value_expression
    (50) value_expression -> . algebraic_expression
    (51) value_expression -> . numeric_function
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    value_expression               shift and go to state 99
    algebraic_expression           shift and go to state 37
    numeric_function               shift and go to state 38
    graph_expression               shift and go to state 73

state 66

    (48) logic_expression -> value_expression NEQUAL . value_expression
    (50) value_expression -> . algebraic_expression
    (51) value_expression -> . numeric_function
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    value_expression               shift and go to state 100
    algebraic_expression           shift and go to state 37
    numeric_function               shift and go to state 38
    graph_expression               shift and go to state 73

state 67

    (56) algebraic_expression -> algebraic_expression PLUS . algebraic_expression
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    algebraic_expression           shift and go to state 101
    numeric_function               shift and go to state 59
    graph_expression               shift and go to state 73

state 68

    (57) algebraic_expression -> algebraic_expression MINUS . algebraic_expression
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    algebraic_expression           shift and go to state 102
    numeric_function               shift and go to state 59
    graph_expression               shift and go to state 73

state 69

    (58) algebraic_expression -> algebraic_expression MUL . algebraic_expression
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    algebraic_expression           shift and go to state 103
    numeric_function               shift and go to state 59
    graph_expression               shift and go to state 73

state 70

    (59) algebraic_expression -> algebraic_expression DIV . algebraic_expression
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    algebraic_expression           shift and go to state 104
    numeric_function               shift and go to state 59
    graph_expression               shift and go to state 73

state 71

    (65) logic_function -> graph_expression POINT . CONTAIN_VERTEX value_expression
    (66) logic_function -> graph_expression POINT . CONTAIN_EDGES edge_expression
    (62) numeric_function -> graph_expression POINT . NODES_COUNT
    (63) numeric_function -> graph_expression POINT . EDGES_COUNT
    (64) numeric_function -> graph_expression POINT . WEIGHT_SUM

    CONTAIN_VERTEX  shift and go to state 105
    CONTAIN_EDGES   shift and go to state 106
    NODES_COUNT     shift and go to state 107
    EDGES_COUNT     shift and go to state 108
    WEIGHT_SUM      shift and go to state 109


state 72

    (60) algebraic_expression -> MINUS algebraic_expression .
    (56) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (57) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (58) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (59) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)
    MINUS           reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)
    MUL             reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)
    DIV             reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)
    EQUAL           reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)
    GREATER         reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)
    LESS            reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)
    LESSEQ          reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)
    NEQUAL          reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)
    CPAR            reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)
    COMMA           reduce using rule 60 (algebraic_expression -> MINUS algebraic_expression .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]


state 73

    (62) numeric_function -> graph_expression . POINT NODES_COUNT
    (63) numeric_function -> graph_expression . POINT EDGES_COUNT
    (64) numeric_function -> graph_expression . POINT WEIGHT_SUM
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression

    POINT           shift and go to state 93
    UNION           shift and go to state 50
    INTERSECTION    shift and go to state 51
    DIFFERENCE      shift and go to state 52
    CONCAT          shift and go to state 53


state 74

    (15) For_vertex_instr -> FORVERTEX ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 110


state 75

    (37) edge_expression -> OPAR . INT COMMA INT CPAR
    (39) edge_expression -> OPAR . INT COMMA INT COMMA INT CPAR
    (41) edge_expression -> OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 111


state 76

    (19) Add_vertex_instr -> ID ADD OPAR vertex_expression . CPAR
    (22) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression . COMMA edge_expression CPAR
    (34) vertex_expression -> vertex_expression . INT

    CPAR            shift and go to state 112
    COMMA           shift and go to state 113
    INT             shift and go to state 114


state 77

    (21) Add_edge_instr -> ID ADD OPAR edge_expression . CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 116
    OPAR            shift and go to state 115


state 78

    (35) vertex_expression -> INT .

    CPAR            reduce using rule 35 (vertex_expression -> INT .)
    COMMA           reduce using rule 35 (vertex_expression -> INT .)
    INT             reduce using rule 35 (vertex_expression -> INT .)
    CBR             reduce using rule 35 (vertex_expression -> INT .)


state 79

    (42) edge_expression -> empty .

    CPAR            reduce using rule 42 (edge_expression -> empty .)
    OPAR            reduce using rule 42 (edge_expression -> empty .)


state 80

    (16) For_edge_instr -> FOREDGE ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 117


state 81

    (20) K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .

    PLOT            reduce using rule 20 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    IF              reduce using rule 20 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 20 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    ID              reduce using rule 20 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 20 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 20 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    $end            reduce using rule 20 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)
    END             reduce using rule 20 (K_color_plot_instr -> K_COLOR_PLOT OPAR graph_expression CPAR .)


state 82

    (23) graph_expression -> OPAR graph_expression CPAR .

    CPAR            reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    UNION           reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    POINT           reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    PLOT            reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    IF              reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    ID              reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    $end            reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)
    END             reduce using rule 23 (graph_expression -> OPAR graph_expression CPAR .)


state 83

    (28) graph_expression -> graph_expression UNION graph_expression .
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    UNION           reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    INTERSECTION    reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    DIFFERENCE      reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    CONCAT          reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    POINT           reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    PLOT            reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    IF              reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    FORVERTEX       reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    ID              reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    FOREDGE         reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    K_COLOR_PLOT    reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    $end            reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)
    END             reduce using rule 28 (graph_expression -> graph_expression UNION graph_expression .)

  ! UNION           [ shift and go to state 50 ]
  ! INTERSECTION    [ shift and go to state 51 ]
  ! DIFFERENCE      [ shift and go to state 52 ]
  ! CONCAT          [ shift and go to state 53 ]


state 84

    (29) graph_expression -> graph_expression INTERSECTION graph_expression .
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    UNION           reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    INTERSECTION    reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    DIFFERENCE      reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    CONCAT          reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    POINT           reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    PLOT            reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    IF              reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FORVERTEX       reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    ID              reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FOREDGE         reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    K_COLOR_PLOT    reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    $end            reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    END             reduce using rule 29 (graph_expression -> graph_expression INTERSECTION graph_expression .)

  ! UNION           [ shift and go to state 50 ]
  ! INTERSECTION    [ shift and go to state 51 ]
  ! DIFFERENCE      [ shift and go to state 52 ]
  ! CONCAT          [ shift and go to state 53 ]


state 85

    (30) graph_expression -> graph_expression DIFFERENCE graph_expression .
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    UNION           reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    INTERSECTION    reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    DIFFERENCE      reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    CONCAT          reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    POINT           reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    PLOT            reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    IF              reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FORVERTEX       reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    ID              reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FOREDGE         reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    K_COLOR_PLOT    reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    $end            reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    END             reduce using rule 30 (graph_expression -> graph_expression DIFFERENCE graph_expression .)

  ! UNION           [ shift and go to state 50 ]
  ! INTERSECTION    [ shift and go to state 51 ]
  ! DIFFERENCE      [ shift and go to state 52 ]
  ! CONCAT          [ shift and go to state 53 ]


state 86

    (31) graph_expression -> graph_expression CONCAT graph_expression .
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .)
    CONCAT          reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .)
    POINT           reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .)
    PLOT            reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .)
    IF              reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .)
    FORVERTEX       reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .)
    ID              reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .)
    FOREDGE         reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .)
    K_COLOR_PLOT    reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .)
    $end            reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .)
    END             reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .)
    UNION           shift and go to state 50
    INTERSECTION    shift and go to state 51
    DIFFERENCE      shift and go to state 52

  ! UNION           [ reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! DIFFERENCE      [ reduce using rule 31 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! CONCAT          [ shift and go to state 53 ]


state 87

    (24) graph_expression -> GRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 118


state 88

    (26) graph_expression -> GRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (34) vertex_expression -> . vertex_expression INT
    (35) vertex_expression -> . INT

    INT             shift and go to state 78

    vertex_expression              shift and go to state 119

state 89

    (25) graph_expression -> DIGRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 120


state 90

    (27) graph_expression -> DIGRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (34) vertex_expression -> . vertex_expression INT
    (35) vertex_expression -> . INT

    INT             shift and go to state 78

    vertex_expression              shift and go to state 121

state 91

    (32) graph_expression -> COMPLEMENT OPAR graph_expression . CPAR
    (28) graph_expression -> graph_expression . UNION graph_expression
    (29) graph_expression -> graph_expression . INTERSECTION graph_expression
    (30) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (31) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 122
    UNION           shift and go to state 50
    INTERSECTION    shift and go to state 51
    DIFFERENCE      shift and go to state 52
    CONCAT          shift and go to state 53


state 92

    (54) algebraic_expression -> OPAR algebraic_expression CPAR .

    PLUS            reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    MINUS           reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    MUL             reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    DIV             reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    EQUAL           reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    GREATER         reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    LESS            reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    GREATEREQ       reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    LESSEQ          reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    NEQUAL          reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    CPAR            reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)
    COMMA           reduce using rule 54 (algebraic_expression -> OPAR algebraic_expression CPAR .)


state 93

    (62) numeric_function -> graph_expression POINT . NODES_COUNT
    (63) numeric_function -> graph_expression POINT . EDGES_COUNT
    (64) numeric_function -> graph_expression POINT . WEIGHT_SUM

    NODES_COUNT     shift and go to state 107
    EDGES_COUNT     shift and go to state 108
    WEIGHT_SUM      shift and go to state 109


state 94

    (13) If_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END
    (14) If_else_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END ELSE BEGIN Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (17) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (13) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (15) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (18) Assign_instr -> . ID ASSIGN graph_expression
    (16) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (19) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (21) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (20) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 13
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 16
    FOREDGE         shift and go to state 17
    K_COLOR_PLOT    shift and go to state 18

    Instructions                   shift and go to state 123
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12

state 95

    (43) logic_expression -> value_expression EQUAL value_expression .

    CPAR            reduce using rule 43 (logic_expression -> value_expression EQUAL value_expression .)


state 96

    (44) logic_expression -> value_expression GREATER value_expression .

    CPAR            reduce using rule 44 (logic_expression -> value_expression GREATER value_expression .)


state 97

    (45) logic_expression -> value_expression LESS value_expression .

    CPAR            reduce using rule 45 (logic_expression -> value_expression LESS value_expression .)


state 98

    (46) logic_expression -> value_expression GREATEREQ value_expression .

    CPAR            reduce using rule 46 (logic_expression -> value_expression GREATEREQ value_expression .)


state 99

    (47) logic_expression -> value_expression LESSEQ value_expression .

    CPAR            reduce using rule 47 (logic_expression -> value_expression LESSEQ value_expression .)


state 100

    (48) logic_expression -> value_expression NEQUAL value_expression .

    CPAR            reduce using rule 48 (logic_expression -> value_expression NEQUAL value_expression .)


state 101

    (56) algebraic_expression -> algebraic_expression PLUS algebraic_expression .
    (56) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (57) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (58) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (59) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MINUS           reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    EQUAL           reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATER         reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESS            reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATEREQ       reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESSEQ          reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    NEQUAL          reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    CPAR            reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    COMMA           reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MUL             shift and go to state 69
    DIV             shift and go to state 70

  ! MUL             [ reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 56 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]


state 102

    (57) algebraic_expression -> algebraic_expression MINUS algebraic_expression .
    (56) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (57) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (58) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (59) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MINUS           reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    EQUAL           reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATER         reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESS            reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESSEQ          reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    NEQUAL          reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    CPAR            reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    COMMA           reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MUL             shift and go to state 69
    DIV             shift and go to state 70

  ! MUL             [ reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 57 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]


state 103

    (58) algebraic_expression -> algebraic_expression MUL algebraic_expression .
    (56) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (57) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (58) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (59) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MINUS           reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MUL             reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    DIV             reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    EQUAL           reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATER         reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESS            reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATEREQ       reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESSEQ          reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    NEQUAL          reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    CPAR            reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    COMMA           reduce using rule 58 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]


state 104

    (59) algebraic_expression -> algebraic_expression DIV algebraic_expression .
    (56) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (57) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (58) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (59) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MINUS           reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MUL             reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    DIV             reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    EQUAL           reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATER         reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESS            reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATEREQ       reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESSEQ          reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    NEQUAL          reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    CPAR            reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    COMMA           reduce using rule 59 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! MUL             [ shift and go to state 69 ]
  ! DIV             [ shift and go to state 70 ]


state 105

    (65) logic_function -> graph_expression POINT CONTAIN_VERTEX . value_expression
    (50) value_expression -> . algebraic_expression
    (51) value_expression -> . numeric_function
    (52) algebraic_expression -> . INT
    (53) algebraic_expression -> . FLOAT
    (54) algebraic_expression -> . OPAR algebraic_expression CPAR
    (55) algebraic_expression -> . numeric_function
    (56) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (57) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (58) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (59) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (60) algebraic_expression -> . MINUS algebraic_expression
    (62) numeric_function -> . graph_expression POINT NODES_COUNT
    (63) numeric_function -> . graph_expression POINT EDGES_COUNT
    (64) numeric_function -> . graph_expression POINT WEIGHT_SUM
    (23) graph_expression -> . OPAR graph_expression CPAR
    (24) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (25) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (26) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (27) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (28) graph_expression -> . graph_expression UNION graph_expression
    (29) graph_expression -> . graph_expression INTERSECTION graph_expression
    (30) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (31) graph_expression -> . graph_expression CONCAT graph_expression
    (32) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (33) graph_expression -> . ID

    INT             shift and go to state 40
    FLOAT           shift and go to state 41
    OPAR            shift and go to state 33
    MINUS           shift and go to state 42
    GRAPH           shift and go to state 29
    DIGRAPH         shift and go to state 30
    COMPLEMENT      shift and go to state 31
    ID              shift and go to state 32

    graph_expression               shift and go to state 73
    value_expression               shift and go to state 124
    algebraic_expression           shift and go to state 37
    numeric_function               shift and go to state 38

state 106

    (66) logic_function -> graph_expression POINT CONTAIN_EDGES . edge_expression
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (42) edge_expression -> . empty
    (61) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 75
    CPAR            reduce using rule 61 (empty -> .)

  ! OPAR            [ reduce using rule 61 (empty -> .) ]

    edge_expression                shift and go to state 125
    empty                          shift and go to state 79

state 107

    (62) numeric_function -> graph_expression POINT NODES_COUNT .

    EQUAL           reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)
    GREATER         reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)
    LESS            reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)
    GREATEREQ       reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)
    LESSEQ          reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)
    NEQUAL          reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)
    PLUS            reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)
    MINUS           reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)
    MUL             reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)
    DIV             reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)
    CPAR            reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)
    COMMA           reduce using rule 62 (numeric_function -> graph_expression POINT NODES_COUNT .)


state 108

    (63) numeric_function -> graph_expression POINT EDGES_COUNT .

    EQUAL           reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    GREATER         reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    LESS            reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    GREATEREQ       reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    LESSEQ          reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    NEQUAL          reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    PLUS            reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    MINUS           reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    MUL             reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    DIV             reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    CPAR            reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)
    COMMA           reduce using rule 63 (numeric_function -> graph_expression POINT EDGES_COUNT .)


state 109

    (64) numeric_function -> graph_expression POINT WEIGHT_SUM .

    EQUAL           reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    GREATER         reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    LESS            reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    GREATEREQ       reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    LESSEQ          reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    NEQUAL          reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    PLUS            reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    MINUS           reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    MUL             reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    DIV             reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    CPAR            reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)
    COMMA           reduce using rule 64 (numeric_function -> graph_expression POINT WEIGHT_SUM .)


state 110

    (15) For_vertex_instr -> FORVERTEX ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (17) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (13) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (15) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (18) Assign_instr -> . ID ASSIGN graph_expression
    (16) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (19) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (21) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (20) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 13
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 16
    FOREDGE         shift and go to state 17
    K_COLOR_PLOT    shift and go to state 18

    Instructions                   shift and go to state 126
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12

state 111

    (37) edge_expression -> OPAR INT . COMMA INT CPAR
    (39) edge_expression -> OPAR INT . COMMA INT COMMA INT CPAR
    (41) edge_expression -> OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 127


state 112

    (19) Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .

    PLOT            reduce using rule 19 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    IF              reduce using rule 19 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FORVERTEX       reduce using rule 19 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    ID              reduce using rule 19 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FOREDGE         reduce using rule 19 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 19 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    $end            reduce using rule 19 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    END             reduce using rule 19 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)


state 113

    (22) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA . edge_expression CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (42) edge_expression -> . empty
    (61) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 75
    CPAR            reduce using rule 61 (empty -> .)

  ! OPAR            [ reduce using rule 61 (empty -> .) ]

    edge_expression                shift and go to state 128
    empty                          shift and go to state 79

state 114

    (34) vertex_expression -> vertex_expression INT .

    CPAR            reduce using rule 34 (vertex_expression -> vertex_expression INT .)
    COMMA           reduce using rule 34 (vertex_expression -> vertex_expression INT .)
    INT             reduce using rule 34 (vertex_expression -> vertex_expression INT .)
    CBR             reduce using rule 34 (vertex_expression -> vertex_expression INT .)


state 115

    (36) edge_expression -> edge_expression OPAR . INT COMMA INT CPAR
    (38) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 129


state 116

    (21) Add_edge_instr -> ID ADD OPAR edge_expression CPAR .

    PLOT            reduce using rule 21 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    IF              reduce using rule 21 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FORVERTEX       reduce using rule 21 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    ID              reduce using rule 21 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FOREDGE         reduce using rule 21 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 21 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    $end            reduce using rule 21 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    END             reduce using rule 21 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)


state 117

    (16) For_edge_instr -> FOREDGE ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (17) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (13) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (15) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (18) Assign_instr -> . ID ASSIGN graph_expression
    (16) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (19) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (21) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (20) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 13
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 16
    FOREDGE         shift and go to state 17
    K_COLOR_PLOT    shift and go to state 18

    Instructions                   shift and go to state 130
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12

state 118

    (24) graph_expression -> GRAPH OPAR value_expression COMMA . edge_expression CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (42) edge_expression -> . empty
    (61) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 75
    CPAR            reduce using rule 61 (empty -> .)

  ! OPAR            [ reduce using rule 61 (empty -> .) ]

    edge_expression                shift and go to state 131
    empty                          shift and go to state 79

state 119

    (26) graph_expression -> GRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (34) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 132
    INT             shift and go to state 114


state 120

    (25) graph_expression -> DIGRAPH OPAR value_expression COMMA . edge_expression CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (42) edge_expression -> . empty
    (61) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 75
    CPAR            reduce using rule 61 (empty -> .)

  ! OPAR            [ reduce using rule 61 (empty -> .) ]

    edge_expression                shift and go to state 133
    empty                          shift and go to state 79

state 121

    (27) graph_expression -> DIGRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (34) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 134
    INT             shift and go to state 114


state 122

    (32) graph_expression -> COMPLEMENT OPAR graph_expression CPAR .

    CPAR            reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    UNION           reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    POINT           reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    PLOT            reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    IF              reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    ID              reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    $end            reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    END             reduce using rule 32 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)


state 123

    (13) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END
    (14) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END ELSE BEGIN Instructions END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (17) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (13) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (15) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (18) Assign_instr -> . ID ASSIGN graph_expression
    (16) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (19) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (21) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (20) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR

    END             shift and go to state 135
    PLOT            shift and go to state 13
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 16
    FOREDGE         shift and go to state 17
    K_COLOR_PLOT    shift and go to state 18

    Instruction                    shift and go to state 19
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12

state 124

    (65) logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression .

    CPAR            reduce using rule 65 (logic_function -> graph_expression POINT CONTAIN_VERTEX value_expression .)


state 125

    (66) logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression .
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            reduce using rule 66 (logic_function -> graph_expression POINT CONTAIN_EDGES edge_expression .)
    OPAR            shift and go to state 115


state 126

    (15) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (17) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (13) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (15) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (18) Assign_instr -> . ID ASSIGN graph_expression
    (16) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (19) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (21) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (20) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR

    END             shift and go to state 136
    PLOT            shift and go to state 13
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 16
    FOREDGE         shift and go to state 17
    K_COLOR_PLOT    shift and go to state 18

    Instruction                    shift and go to state 19
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12

state 127

    (37) edge_expression -> OPAR INT COMMA . INT CPAR
    (39) edge_expression -> OPAR INT COMMA . INT COMMA INT CPAR
    (41) edge_expression -> OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 137


state 128

    (22) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression . CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 138
    OPAR            shift and go to state 115


state 129

    (36) edge_expression -> edge_expression OPAR INT . COMMA INT CPAR
    (38) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA INT CPAR
    (40) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 139


state 130

    (16) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (17) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (13) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (15) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (18) Assign_instr -> . ID ASSIGN graph_expression
    (16) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (19) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (21) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (20) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR

    END             shift and go to state 140
    PLOT            shift and go to state 13
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 16
    FOREDGE         shift and go to state 17
    K_COLOR_PLOT    shift and go to state 18

    Instruction                    shift and go to state 19
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12

state 131

    (24) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression . CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 141
    OPAR            shift and go to state 115


state 132

    (26) graph_expression -> GRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 142


state 133

    (25) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression . CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 143
    OPAR            shift and go to state 115


state 134

    (27) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 144


state 135

    (13) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .
    (14) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END . ELSE BEGIN Instructions END

    PLOT            reduce using rule 13 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    IF              reduce using rule 13 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FORVERTEX       reduce using rule 13 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ID              reduce using rule 13 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FOREDGE         reduce using rule 13 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 13 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    $end            reduce using rule 13 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    END             reduce using rule 13 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ELSE            shift and go to state 145


state 136

    (15) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 15 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 15 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 15 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 15 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 15 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 15 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 15 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    END             reduce using rule 15 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)


state 137

    (37) edge_expression -> OPAR INT COMMA INT . CPAR
    (39) edge_expression -> OPAR INT COMMA INT . COMMA INT CPAR
    (41) edge_expression -> OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 147
    COMMA           shift and go to state 146


state 138

    (22) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .

    PLOT            reduce using rule 22 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 22 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 22 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 22 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 22 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 22 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 22 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    END             reduce using rule 22 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)


state 139

    (36) edge_expression -> edge_expression OPAR INT COMMA . INT CPAR
    (38) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA INT CPAR
    (40) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 148


state 140

    (16) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 16 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 16 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 16 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 16 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 16 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 16 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 16 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    END             reduce using rule 16 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)


state 141

    (24) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .

    CPAR            reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    UNION           reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 24 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 142

    (26) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (42) edge_expression -> . empty
    (61) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 75
    CPAR            reduce using rule 61 (empty -> .)

  ! OPAR            [ reduce using rule 61 (empty -> .) ]

    edge_expression                shift and go to state 149
    empty                          shift and go to state 79

state 143

    (25) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .

    CPAR            reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    UNION           reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 25 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 144

    (27) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (36) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (37) edge_expression -> . OPAR INT COMMA INT CPAR
    (38) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (39) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (41) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (42) edge_expression -> . empty
    (61) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 75
    CPAR            reduce using rule 61 (empty -> .)

  ! OPAR            [ reduce using rule 61 (empty -> .) ]

    edge_expression                shift and go to state 150
    empty                          shift and go to state 79

state 145

    (14) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE . BEGIN Instructions END

    BEGIN           shift and go to state 151


state 146

    (39) edge_expression -> OPAR INT COMMA INT COMMA . INT CPAR
    (41) edge_expression -> OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 152
    FLOAT           shift and go to state 153


state 147

    (37) edge_expression -> OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 37 (edge_expression -> OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 37 (edge_expression -> OPAR INT COMMA INT CPAR .)


state 148

    (36) edge_expression -> edge_expression OPAR INT COMMA INT . CPAR
    (38) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA INT CPAR
    (40) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 155
    COMMA           shift and go to state 154


state 149

    (26) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 156
    OPAR            shift and go to state 115


state 150

    (27) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (36) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (38) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (40) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 157
    OPAR            shift and go to state 115


state 151

    (14) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (17) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (13) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (15) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (18) Assign_instr -> . ID ASSIGN graph_expression
    (16) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (19) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (21) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (20) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR

    PLOT            shift and go to state 13
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 16
    FOREDGE         shift and go to state 17
    K_COLOR_PLOT    shift and go to state 18

    Instructions                   shift and go to state 158
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12

state 152

    (39) edge_expression -> OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 159


state 153

    (41) edge_expression -> OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 160


state 154

    (38) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . INT CPAR
    (40) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 161
    FLOAT           shift and go to state 162


state 155

    (36) edge_expression -> edge_expression OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 36 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 36 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)


state 156

    (26) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    CPAR            reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    UNION           reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 26 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 157

    (27) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    CPAR            reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    UNION           reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    K_COLOR_PLOT    reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 27 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 158

    (14) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (12) Instruction -> . K_color_plot_instr
    (17) Plot_instr -> . PLOT OPAR graph_expression CPAR
    (13) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (14) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (15) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (18) Assign_instr -> . ID ASSIGN graph_expression
    (16) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (19) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (21) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (22) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR
    (20) K_color_plot_instr -> . K_COLOR_PLOT OPAR graph_expression CPAR

    END             shift and go to state 163
    PLOT            shift and go to state 13
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 16
    FOREDGE         shift and go to state 17
    K_COLOR_PLOT    shift and go to state 18

    Instruction                    shift and go to state 19
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11
    K_color_plot_instr             shift and go to state 12

state 159

    (39) edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 39 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 39 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)


state 160

    (41) edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 41 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 41 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 161

    (38) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 164


state 162

    (40) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 165


state 163

    (14) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .

    PLOT            reduce using rule 14 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    IF              reduce using rule 14 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FORVERTEX       reduce using rule 14 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    ID              reduce using rule 14 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FOREDGE         reduce using rule 14 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    K_COLOR_PLOT    reduce using rule 14 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    $end            reduce using rule 14 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    END             reduce using rule 14 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)


state 164

    (38) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 38 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 38 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)


state 165

    (40) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 40 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 40 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPAR in state 45 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 106 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 113 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 118 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 120 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 142 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 144 resolved as shift
WARNING: reduce/reduce conflict in state 38 resolved using rule (value_expression -> numeric_function)
WARNING: rejected rule (algebraic_expression -> numeric_function) in state 38
