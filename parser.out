Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EDGE
    ELIF
    MULTIGRAPH
    PSEUDOGRAPH
    STRING

Grammar

Rule 0     S' -> Instructions
Rule 1     Instructions -> Instructions Instruction
Rule 2     Instructions -> Instruction
Rule 3     Instruction -> Plot_instr
Rule 4     Instruction -> If_instr
Rule 5     Instruction -> If_else_instr
Rule 6     Instruction -> For_vertex_instr
Rule 7     Instruction -> Assign_instr
Rule 8     Instruction -> For_edge_instr
Rule 9     Instruction -> Add_vertex_instr
Rule 10    Instruction -> Add_edge_instr
Rule 11    Instruction -> Add_vertex_and_edge_instr
Rule 12    If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END
Rule 13    If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
Rule 14    For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END
Rule 15    For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END
Rule 16    Plot_instr -> PLOT OPAR ID CPAR
Rule 17    Assign_instr -> ID ASSIGN graph_expression
Rule 18    Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR
Rule 19    Add_edge_instr -> ID ADD OPAR edge_expression CPAR
Rule 20    Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR
Rule 21    graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 22    graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR
Rule 23    graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 24    graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
Rule 25    graph_expression -> graph_expression UNION graph_expression
Rule 26    graph_expression -> graph_expression INTERSECTION graph_expression
Rule 27    graph_expression -> graph_expression DIFFERENCE graph_expression
Rule 28    graph_expression -> graph_expression CONCAT graph_expression
Rule 29    graph_expression -> COMPLEMENT OPAR graph_expression CPAR
Rule 30    graph_expression -> ID
Rule 31    vertex_expression -> vertex_expression INT
Rule 32    vertex_expression -> INT
Rule 33    edge_expression -> edge_expression OPAR INT COMMA INT CPAR
Rule 34    edge_expression -> OPAR INT COMMA INT CPAR
Rule 35    edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR
Rule 36    edge_expression -> OPAR INT COMMA INT COMMA INT CPAR
Rule 37    edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 38    edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR
Rule 39    edge_expression -> empty
Rule 40    logic_expression -> value_expression EQUAL value_expression
Rule 41    logic_expression -> value_expression GREATER value_expression
Rule 42    logic_expression -> value_expression LESS value_expression
Rule 43    logic_expression -> value_expression GREATEREQ value_expression
Rule 44    logic_expression -> value_expression LESSEQ value_expression
Rule 45    logic_expression -> value_expression NEQUAL value_expression
Rule 46    value_expression -> algebraic_expression
Rule 47    value_expression -> function
Rule 48    algebraic_expression -> INT
Rule 49    algebraic_expression -> FLOAT
Rule 50    algebraic_expression -> function
Rule 51    algebraic_expression -> algebraic_expression PLUS algebraic_expression
Rule 52    algebraic_expression -> algebraic_expression MINUS algebraic_expression
Rule 53    algebraic_expression -> algebraic_expression MUL algebraic_expression
Rule 54    algebraic_expression -> algebraic_expression DIV algebraic_expression
Rule 55    algebraic_expression -> MINUS algebraic_expression
Rule 56    empty -> <empty>
Rule 57    function -> graph_expression POINT NODES_COUNT

Terminals, with rules where they appear

ADD                  : 18 19 20
ASSIGN               : 17
BEGIN                : 12 13 13 14 15
CBR                  : 23 24
COMMA                : 20 21 22 23 24 33 34 35 35 36 36 37 37 38 38
COMPLEMENT           : 29
CONCAT               : 28
CPAR                 : 12 13 16 18 19 20 21 22 23 24 29 33 34 35 36 37 38
DIFFERENCE           : 27
DIGRAPH              : 22 24
DIV                  : 54
EDGE                 : 
ELIF                 : 
ELSE                 : 13
END                  : 12 13 13 14 15
EQUAL                : 40
FLOAT                : 37 38 49
FOREDGE              : 15
FORVERTEX            : 14
GRAPH                : 21 23
GREATER              : 41
GREATEREQ            : 43
ID                   : 14 14 15 15 16 17 18 19 20 30
IF                   : 12 13
IN                   : 14 15
INT                  : 31 32 33 33 34 34 35 35 35 36 36 36 37 37 38 38 48
INTERSECTION         : 26
LESS                 : 42
LESSEQ               : 44
MINUS                : 52 55
MUL                  : 53
MULTIGRAPH           : 
NEQUAL               : 45
NODES_COUNT          : 57
OBR                  : 23 24
OPAR                 : 12 13 16 18 19 20 21 22 23 24 29 33 34 35 36 37 38
PLOT                 : 16
PLUS                 : 51
POINT                : 57
PSEUDOGRAPH          : 
STRING               : 
UNION                : 25
error                : 

Nonterminals, with rules where they appear

Add_edge_instr       : 10
Add_vertex_and_edge_instr : 11
Add_vertex_instr     : 9
Assign_instr         : 7
For_edge_instr       : 8
For_vertex_instr     : 6
If_else_instr        : 5
If_instr             : 4
Instruction          : 1 2
Instructions         : 1 12 13 13 14 15 0
Plot_instr           : 3
algebraic_expression : 46 51 51 52 52 53 53 54 54 55
edge_expression      : 19 20 21 22 23 24 33 35 37
empty                : 39
function             : 47 50
graph_expression     : 17 25 25 26 26 27 27 28 28 29 57
logic_expression     : 12 13
value_expression     : 21 22 40 40 41 41 42 42 43 43 44 44 45 45
vertex_expression    : 18 20 23 24 31

Parsing method: LALR

state 0

    (0) S' -> . Instructions
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 1
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 1

    (0) S' -> Instructions .
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 2

    (2) Instructions -> Instruction .

    PLOT            reduce using rule 2 (Instructions -> Instruction .)
    IF              reduce using rule 2 (Instructions -> Instruction .)
    FORVERTEX       reduce using rule 2 (Instructions -> Instruction .)
    ID              reduce using rule 2 (Instructions -> Instruction .)
    FOREDGE         reduce using rule 2 (Instructions -> Instruction .)
    $end            reduce using rule 2 (Instructions -> Instruction .)
    END             reduce using rule 2 (Instructions -> Instruction .)


state 3

    (3) Instruction -> Plot_instr .

    PLOT            reduce using rule 3 (Instruction -> Plot_instr .)
    IF              reduce using rule 3 (Instruction -> Plot_instr .)
    FORVERTEX       reduce using rule 3 (Instruction -> Plot_instr .)
    ID              reduce using rule 3 (Instruction -> Plot_instr .)
    FOREDGE         reduce using rule 3 (Instruction -> Plot_instr .)
    $end            reduce using rule 3 (Instruction -> Plot_instr .)
    END             reduce using rule 3 (Instruction -> Plot_instr .)


state 4

    (4) Instruction -> If_instr .

    PLOT            reduce using rule 4 (Instruction -> If_instr .)
    IF              reduce using rule 4 (Instruction -> If_instr .)
    FORVERTEX       reduce using rule 4 (Instruction -> If_instr .)
    ID              reduce using rule 4 (Instruction -> If_instr .)
    FOREDGE         reduce using rule 4 (Instruction -> If_instr .)
    $end            reduce using rule 4 (Instruction -> If_instr .)
    END             reduce using rule 4 (Instruction -> If_instr .)


state 5

    (5) Instruction -> If_else_instr .

    PLOT            reduce using rule 5 (Instruction -> If_else_instr .)
    IF              reduce using rule 5 (Instruction -> If_else_instr .)
    FORVERTEX       reduce using rule 5 (Instruction -> If_else_instr .)
    ID              reduce using rule 5 (Instruction -> If_else_instr .)
    FOREDGE         reduce using rule 5 (Instruction -> If_else_instr .)
    $end            reduce using rule 5 (Instruction -> If_else_instr .)
    END             reduce using rule 5 (Instruction -> If_else_instr .)


state 6

    (6) Instruction -> For_vertex_instr .

    PLOT            reduce using rule 6 (Instruction -> For_vertex_instr .)
    IF              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FORVERTEX       reduce using rule 6 (Instruction -> For_vertex_instr .)
    ID              reduce using rule 6 (Instruction -> For_vertex_instr .)
    FOREDGE         reduce using rule 6 (Instruction -> For_vertex_instr .)
    $end            reduce using rule 6 (Instruction -> For_vertex_instr .)
    END             reduce using rule 6 (Instruction -> For_vertex_instr .)


state 7

    (7) Instruction -> Assign_instr .

    PLOT            reduce using rule 7 (Instruction -> Assign_instr .)
    IF              reduce using rule 7 (Instruction -> Assign_instr .)
    FORVERTEX       reduce using rule 7 (Instruction -> Assign_instr .)
    ID              reduce using rule 7 (Instruction -> Assign_instr .)
    FOREDGE         reduce using rule 7 (Instruction -> Assign_instr .)
    $end            reduce using rule 7 (Instruction -> Assign_instr .)
    END             reduce using rule 7 (Instruction -> Assign_instr .)


state 8

    (8) Instruction -> For_edge_instr .

    PLOT            reduce using rule 8 (Instruction -> For_edge_instr .)
    IF              reduce using rule 8 (Instruction -> For_edge_instr .)
    FORVERTEX       reduce using rule 8 (Instruction -> For_edge_instr .)
    ID              reduce using rule 8 (Instruction -> For_edge_instr .)
    FOREDGE         reduce using rule 8 (Instruction -> For_edge_instr .)
    $end            reduce using rule 8 (Instruction -> For_edge_instr .)
    END             reduce using rule 8 (Instruction -> For_edge_instr .)


state 9

    (9) Instruction -> Add_vertex_instr .

    PLOT            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    IF              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FORVERTEX       reduce using rule 9 (Instruction -> Add_vertex_instr .)
    ID              reduce using rule 9 (Instruction -> Add_vertex_instr .)
    FOREDGE         reduce using rule 9 (Instruction -> Add_vertex_instr .)
    $end            reduce using rule 9 (Instruction -> Add_vertex_instr .)
    END             reduce using rule 9 (Instruction -> Add_vertex_instr .)


state 10

    (10) Instruction -> Add_edge_instr .

    PLOT            reduce using rule 10 (Instruction -> Add_edge_instr .)
    IF              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FORVERTEX       reduce using rule 10 (Instruction -> Add_edge_instr .)
    ID              reduce using rule 10 (Instruction -> Add_edge_instr .)
    FOREDGE         reduce using rule 10 (Instruction -> Add_edge_instr .)
    $end            reduce using rule 10 (Instruction -> Add_edge_instr .)
    END             reduce using rule 10 (Instruction -> Add_edge_instr .)


state 11

    (11) Instruction -> Add_vertex_and_edge_instr .

    PLOT            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    IF              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FORVERTEX       reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    ID              reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    FOREDGE         reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    $end            reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)
    END             reduce using rule 11 (Instruction -> Add_vertex_and_edge_instr .)


state 12

    (16) Plot_instr -> PLOT . OPAR ID CPAR

    OPAR            shift and go to state 18


state 13

    (17) Assign_instr -> ID . ASSIGN graph_expression
    (18) Add_vertex_instr -> ID . ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> ID . ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> ID . ADD OPAR vertex_expression COMMA edge_expression CPAR

    ASSIGN          shift and go to state 19
    ADD             shift and go to state 20


state 14

    (12) If_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> IF . OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    OPAR            shift and go to state 21


state 15

    (14) For_vertex_instr -> FORVERTEX . ID IN ID BEGIN Instructions END

    ID              shift and go to state 22


state 16

    (15) For_edge_instr -> FOREDGE . ID IN ID BEGIN Instructions END

    ID              shift and go to state 23


state 17

    (1) Instructions -> Instructions Instruction .

    PLOT            reduce using rule 1 (Instructions -> Instructions Instruction .)
    IF              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FORVERTEX       reduce using rule 1 (Instructions -> Instructions Instruction .)
    ID              reduce using rule 1 (Instructions -> Instructions Instruction .)
    FOREDGE         reduce using rule 1 (Instructions -> Instructions Instruction .)
    $end            reduce using rule 1 (Instructions -> Instructions Instruction .)
    END             reduce using rule 1 (Instructions -> Instructions Instruction .)


state 18

    (16) Plot_instr -> PLOT OPAR . ID CPAR

    ID              shift and go to state 24


state 19

    (17) Assign_instr -> ID ASSIGN . graph_expression
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    graph_expression               shift and go to state 26

state 20

    (18) Add_vertex_instr -> ID ADD . OPAR vertex_expression CPAR
    (19) Add_edge_instr -> ID ADD . OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> ID ADD . OPAR vertex_expression COMMA edge_expression CPAR

    OPAR            shift and go to state 30


state 21

    (12) If_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> IF OPAR . logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (40) logic_expression -> . value_expression EQUAL value_expression
    (41) logic_expression -> . value_expression GREATER value_expression
    (42) logic_expression -> . value_expression LESS value_expression
    (43) logic_expression -> . value_expression GREATEREQ value_expression
    (44) logic_expression -> . value_expression LESSEQ value_expression
    (45) logic_expression -> . value_expression NEQUAL value_expression
    (46) value_expression -> . algebraic_expression
    (47) value_expression -> . function
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    logic_expression               shift and go to state 31
    value_expression               shift and go to state 32
    algebraic_expression           shift and go to state 33
    function                       shift and go to state 34
    graph_expression               shift and go to state 38

state 22

    (14) For_vertex_instr -> FORVERTEX ID . IN ID BEGIN Instructions END

    IN              shift and go to state 39


state 23

    (15) For_edge_instr -> FOREDGE ID . IN ID BEGIN Instructions END

    IN              shift and go to state 40


state 24

    (16) Plot_instr -> PLOT OPAR ID . CPAR

    CPAR            shift and go to state 41


state 25

    (30) graph_expression -> ID .

    UNION           reduce using rule 30 (graph_expression -> ID .)
    INTERSECTION    reduce using rule 30 (graph_expression -> ID .)
    DIFFERENCE      reduce using rule 30 (graph_expression -> ID .)
    CONCAT          reduce using rule 30 (graph_expression -> ID .)
    PLOT            reduce using rule 30 (graph_expression -> ID .)
    IF              reduce using rule 30 (graph_expression -> ID .)
    FORVERTEX       reduce using rule 30 (graph_expression -> ID .)
    ID              reduce using rule 30 (graph_expression -> ID .)
    FOREDGE         reduce using rule 30 (graph_expression -> ID .)
    $end            reduce using rule 30 (graph_expression -> ID .)
    END             reduce using rule 30 (graph_expression -> ID .)
    POINT           reduce using rule 30 (graph_expression -> ID .)
    CPAR            reduce using rule 30 (graph_expression -> ID .)


state 26

    (17) Assign_instr -> ID ASSIGN graph_expression .
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (28) graph_expression -> graph_expression . CONCAT graph_expression

    PLOT            reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    IF              reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    FORVERTEX       reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    ID              reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    FOREDGE         reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    $end            reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    END             reduce using rule 17 (Assign_instr -> ID ASSIGN graph_expression .)
    UNION           shift and go to state 42
    INTERSECTION    shift and go to state 43
    DIFFERENCE      shift and go to state 44
    CONCAT          shift and go to state 45


state 27

    (21) graph_expression -> GRAPH . OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> GRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 46


state 28

    (22) graph_expression -> DIGRAPH . OPAR value_expression COMMA edge_expression CPAR
    (24) graph_expression -> DIGRAPH . OPAR OBR vertex_expression CBR COMMA edge_expression CPAR

    OPAR            shift and go to state 47


state 29

    (29) graph_expression -> COMPLEMENT . OPAR graph_expression CPAR

    OPAR            shift and go to state 48


state 30

    (18) Add_vertex_instr -> ID ADD OPAR . vertex_expression CPAR
    (19) Add_edge_instr -> ID ADD OPAR . edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> ID ADD OPAR . vertex_expression COMMA edge_expression CPAR
    (31) vertex_expression -> . vertex_expression INT
    (32) vertex_expression -> . INT
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (38) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . empty
    (56) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    INT             shift and go to state 52
    OPAR            shift and go to state 49
    CPAR            reduce using rule 56 (empty -> .)

  ! OPAR            [ reduce using rule 56 (empty -> .) ]

    vertex_expression              shift and go to state 50
    edge_expression                shift and go to state 51
    empty                          shift and go to state 53

state 31

    (12) If_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END
    (13) If_else_instr -> IF OPAR logic_expression . CPAR BEGIN Instructions END ELSE BEGIN Instructions END

    CPAR            shift and go to state 54


state 32

    (40) logic_expression -> value_expression . EQUAL value_expression
    (41) logic_expression -> value_expression . GREATER value_expression
    (42) logic_expression -> value_expression . LESS value_expression
    (43) logic_expression -> value_expression . GREATEREQ value_expression
    (44) logic_expression -> value_expression . LESSEQ value_expression
    (45) logic_expression -> value_expression . NEQUAL value_expression

    EQUAL           shift and go to state 55
    GREATER         shift and go to state 56
    LESS            shift and go to state 57
    GREATEREQ       shift and go to state 58
    LESSEQ          shift and go to state 59
    NEQUAL          shift and go to state 60


state 33

    (46) value_expression -> algebraic_expression .
    (51) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (52) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (53) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (54) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    EQUAL           reduce using rule 46 (value_expression -> algebraic_expression .)
    GREATER         reduce using rule 46 (value_expression -> algebraic_expression .)
    LESS            reduce using rule 46 (value_expression -> algebraic_expression .)
    GREATEREQ       reduce using rule 46 (value_expression -> algebraic_expression .)
    LESSEQ          reduce using rule 46 (value_expression -> algebraic_expression .)
    NEQUAL          reduce using rule 46 (value_expression -> algebraic_expression .)
    COMMA           reduce using rule 46 (value_expression -> algebraic_expression .)
    CPAR            reduce using rule 46 (value_expression -> algebraic_expression .)
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64


state 34

    (47) value_expression -> function .
    (50) algebraic_expression -> function .

  ! reduce/reduce conflict for EQUAL resolved using rule 47 (value_expression -> function .)
  ! reduce/reduce conflict for GREATER resolved using rule 47 (value_expression -> function .)
  ! reduce/reduce conflict for LESS resolved using rule 47 (value_expression -> function .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 47 (value_expression -> function .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 47 (value_expression -> function .)
  ! reduce/reduce conflict for NEQUAL resolved using rule 47 (value_expression -> function .)
  ! reduce/reduce conflict for COMMA resolved using rule 47 (value_expression -> function .)
  ! reduce/reduce conflict for CPAR resolved using rule 47 (value_expression -> function .)
    EQUAL           reduce using rule 47 (value_expression -> function .)
    GREATER         reduce using rule 47 (value_expression -> function .)
    LESS            reduce using rule 47 (value_expression -> function .)
    GREATEREQ       reduce using rule 47 (value_expression -> function .)
    LESSEQ          reduce using rule 47 (value_expression -> function .)
    NEQUAL          reduce using rule 47 (value_expression -> function .)
    COMMA           reduce using rule 47 (value_expression -> function .)
    CPAR            reduce using rule 47 (value_expression -> function .)
    PLUS            reduce using rule 50 (algebraic_expression -> function .)
    MINUS           reduce using rule 50 (algebraic_expression -> function .)
    MUL             reduce using rule 50 (algebraic_expression -> function .)
    DIV             reduce using rule 50 (algebraic_expression -> function .)

  ! EQUAL           [ reduce using rule 50 (algebraic_expression -> function .) ]
  ! GREATER         [ reduce using rule 50 (algebraic_expression -> function .) ]
  ! LESS            [ reduce using rule 50 (algebraic_expression -> function .) ]
  ! GREATEREQ       [ reduce using rule 50 (algebraic_expression -> function .) ]
  ! LESSEQ          [ reduce using rule 50 (algebraic_expression -> function .) ]
  ! NEQUAL          [ reduce using rule 50 (algebraic_expression -> function .) ]
  ! COMMA           [ reduce using rule 50 (algebraic_expression -> function .) ]
  ! CPAR            [ reduce using rule 50 (algebraic_expression -> function .) ]


state 35

    (48) algebraic_expression -> INT .

    PLUS            reduce using rule 48 (algebraic_expression -> INT .)
    MINUS           reduce using rule 48 (algebraic_expression -> INT .)
    MUL             reduce using rule 48 (algebraic_expression -> INT .)
    DIV             reduce using rule 48 (algebraic_expression -> INT .)
    EQUAL           reduce using rule 48 (algebraic_expression -> INT .)
    GREATER         reduce using rule 48 (algebraic_expression -> INT .)
    LESS            reduce using rule 48 (algebraic_expression -> INT .)
    GREATEREQ       reduce using rule 48 (algebraic_expression -> INT .)
    LESSEQ          reduce using rule 48 (algebraic_expression -> INT .)
    NEQUAL          reduce using rule 48 (algebraic_expression -> INT .)
    COMMA           reduce using rule 48 (algebraic_expression -> INT .)
    CPAR            reduce using rule 48 (algebraic_expression -> INT .)


state 36

    (49) algebraic_expression -> FLOAT .

    PLUS            reduce using rule 49 (algebraic_expression -> FLOAT .)
    MINUS           reduce using rule 49 (algebraic_expression -> FLOAT .)
    MUL             reduce using rule 49 (algebraic_expression -> FLOAT .)
    DIV             reduce using rule 49 (algebraic_expression -> FLOAT .)
    EQUAL           reduce using rule 49 (algebraic_expression -> FLOAT .)
    GREATER         reduce using rule 49 (algebraic_expression -> FLOAT .)
    LESS            reduce using rule 49 (algebraic_expression -> FLOAT .)
    GREATEREQ       reduce using rule 49 (algebraic_expression -> FLOAT .)
    LESSEQ          reduce using rule 49 (algebraic_expression -> FLOAT .)
    NEQUAL          reduce using rule 49 (algebraic_expression -> FLOAT .)
    COMMA           reduce using rule 49 (algebraic_expression -> FLOAT .)
    CPAR            reduce using rule 49 (algebraic_expression -> FLOAT .)


state 37

    (55) algebraic_expression -> MINUS . algebraic_expression
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    algebraic_expression           shift and go to state 65
    function                       shift and go to state 66
    graph_expression               shift and go to state 38

state 38

    (57) function -> graph_expression . POINT NODES_COUNT
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (28) graph_expression -> graph_expression . CONCAT graph_expression

    POINT           shift and go to state 67
    UNION           shift and go to state 42
    INTERSECTION    shift and go to state 43
    DIFFERENCE      shift and go to state 44
    CONCAT          shift and go to state 45


state 39

    (14) For_vertex_instr -> FORVERTEX ID IN . ID BEGIN Instructions END

    ID              shift and go to state 68


state 40

    (15) For_edge_instr -> FOREDGE ID IN . ID BEGIN Instructions END

    ID              shift and go to state 69


state 41

    (16) Plot_instr -> PLOT OPAR ID CPAR .

    PLOT            reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    IF              reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    FORVERTEX       reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    ID              reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    FOREDGE         reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    $end            reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)
    END             reduce using rule 16 (Plot_instr -> PLOT OPAR ID CPAR .)


state 42

    (25) graph_expression -> graph_expression UNION . graph_expression
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    graph_expression               shift and go to state 70

state 43

    (26) graph_expression -> graph_expression INTERSECTION . graph_expression
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    graph_expression               shift and go to state 71

state 44

    (27) graph_expression -> graph_expression DIFFERENCE . graph_expression
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    graph_expression               shift and go to state 72

state 45

    (28) graph_expression -> graph_expression CONCAT . graph_expression
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    graph_expression               shift and go to state 73

state 46

    (21) graph_expression -> GRAPH OPAR . value_expression COMMA edge_expression CPAR
    (23) graph_expression -> GRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (46) value_expression -> . algebraic_expression
    (47) value_expression -> . function
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    OBR             shift and go to state 75
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    value_expression               shift and go to state 74
    algebraic_expression           shift and go to state 33
    function                       shift and go to state 34
    graph_expression               shift and go to state 38

state 47

    (22) graph_expression -> DIGRAPH OPAR . value_expression COMMA edge_expression CPAR
    (24) graph_expression -> DIGRAPH OPAR . OBR vertex_expression CBR COMMA edge_expression CPAR
    (46) value_expression -> . algebraic_expression
    (47) value_expression -> . function
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    OBR             shift and go to state 77
    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    value_expression               shift and go to state 76
    algebraic_expression           shift and go to state 33
    function                       shift and go to state 34
    graph_expression               shift and go to state 38

state 48

    (29) graph_expression -> COMPLEMENT OPAR . graph_expression CPAR
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    graph_expression               shift and go to state 78

state 49

    (34) edge_expression -> OPAR . INT COMMA INT CPAR
    (36) edge_expression -> OPAR . INT COMMA INT COMMA INT CPAR
    (38) edge_expression -> OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 79


state 50

    (18) Add_vertex_instr -> ID ADD OPAR vertex_expression . CPAR
    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression . COMMA edge_expression CPAR
    (31) vertex_expression -> vertex_expression . INT

    CPAR            shift and go to state 80
    COMMA           shift and go to state 81
    INT             shift and go to state 82


state 51

    (19) Add_edge_instr -> ID ADD OPAR edge_expression . CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 84
    OPAR            shift and go to state 83


state 52

    (32) vertex_expression -> INT .

    CPAR            reduce using rule 32 (vertex_expression -> INT .)
    COMMA           reduce using rule 32 (vertex_expression -> INT .)
    INT             reduce using rule 32 (vertex_expression -> INT .)
    CBR             reduce using rule 32 (vertex_expression -> INT .)


state 53

    (39) edge_expression -> empty .

    CPAR            reduce using rule 39 (edge_expression -> empty .)
    OPAR            reduce using rule 39 (edge_expression -> empty .)


state 54

    (12) If_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END
    (13) If_else_instr -> IF OPAR logic_expression CPAR . BEGIN Instructions END ELSE BEGIN Instructions END

    BEGIN           shift and go to state 85


state 55

    (40) logic_expression -> value_expression EQUAL . value_expression
    (46) value_expression -> . algebraic_expression
    (47) value_expression -> . function
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    value_expression               shift and go to state 86
    algebraic_expression           shift and go to state 33
    function                       shift and go to state 34
    graph_expression               shift and go to state 38

state 56

    (41) logic_expression -> value_expression GREATER . value_expression
    (46) value_expression -> . algebraic_expression
    (47) value_expression -> . function
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    value_expression               shift and go to state 87
    algebraic_expression           shift and go to state 33
    function                       shift and go to state 34
    graph_expression               shift and go to state 38

state 57

    (42) logic_expression -> value_expression LESS . value_expression
    (46) value_expression -> . algebraic_expression
    (47) value_expression -> . function
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    value_expression               shift and go to state 88
    algebraic_expression           shift and go to state 33
    function                       shift and go to state 34
    graph_expression               shift and go to state 38

state 58

    (43) logic_expression -> value_expression GREATEREQ . value_expression
    (46) value_expression -> . algebraic_expression
    (47) value_expression -> . function
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    value_expression               shift and go to state 89
    algebraic_expression           shift and go to state 33
    function                       shift and go to state 34
    graph_expression               shift and go to state 38

state 59

    (44) logic_expression -> value_expression LESSEQ . value_expression
    (46) value_expression -> . algebraic_expression
    (47) value_expression -> . function
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    value_expression               shift and go to state 90
    algebraic_expression           shift and go to state 33
    function                       shift and go to state 34
    graph_expression               shift and go to state 38

state 60

    (45) logic_expression -> value_expression NEQUAL . value_expression
    (46) value_expression -> . algebraic_expression
    (47) value_expression -> . function
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    value_expression               shift and go to state 91
    algebraic_expression           shift and go to state 33
    function                       shift and go to state 34
    graph_expression               shift and go to state 38

state 61

    (51) algebraic_expression -> algebraic_expression PLUS . algebraic_expression
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    algebraic_expression           shift and go to state 92
    function                       shift and go to state 66
    graph_expression               shift and go to state 38

state 62

    (52) algebraic_expression -> algebraic_expression MINUS . algebraic_expression
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    algebraic_expression           shift and go to state 93
    function                       shift and go to state 66
    graph_expression               shift and go to state 38

state 63

    (53) algebraic_expression -> algebraic_expression MUL . algebraic_expression
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    algebraic_expression           shift and go to state 94
    function                       shift and go to state 66
    graph_expression               shift and go to state 38

state 64

    (54) algebraic_expression -> algebraic_expression DIV . algebraic_expression
    (48) algebraic_expression -> . INT
    (49) algebraic_expression -> . FLOAT
    (50) algebraic_expression -> . function
    (51) algebraic_expression -> . algebraic_expression PLUS algebraic_expression
    (52) algebraic_expression -> . algebraic_expression MINUS algebraic_expression
    (53) algebraic_expression -> . algebraic_expression MUL algebraic_expression
    (54) algebraic_expression -> . algebraic_expression DIV algebraic_expression
    (55) algebraic_expression -> . MINUS algebraic_expression
    (57) function -> . graph_expression POINT NODES_COUNT
    (21) graph_expression -> . GRAPH OPAR value_expression COMMA edge_expression CPAR
    (22) graph_expression -> . DIGRAPH OPAR value_expression COMMA edge_expression CPAR
    (23) graph_expression -> . GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (24) graph_expression -> . DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR
    (25) graph_expression -> . graph_expression UNION graph_expression
    (26) graph_expression -> . graph_expression INTERSECTION graph_expression
    (27) graph_expression -> . graph_expression DIFFERENCE graph_expression
    (28) graph_expression -> . graph_expression CONCAT graph_expression
    (29) graph_expression -> . COMPLEMENT OPAR graph_expression CPAR
    (30) graph_expression -> . ID

    INT             shift and go to state 35
    FLOAT           shift and go to state 36
    MINUS           shift and go to state 37
    GRAPH           shift and go to state 27
    DIGRAPH         shift and go to state 28
    COMPLEMENT      shift and go to state 29
    ID              shift and go to state 25

    algebraic_expression           shift and go to state 95
    function                       shift and go to state 66
    graph_expression               shift and go to state 38

state 65

    (55) algebraic_expression -> MINUS algebraic_expression .
    (51) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (52) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (53) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (54) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)
    MINUS           reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)
    MUL             reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)
    DIV             reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)
    EQUAL           reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)
    GREATER         reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)
    LESS            reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)
    LESSEQ          reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)
    NEQUAL          reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)
    COMMA           reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)
    CPAR            reduce using rule 55 (algebraic_expression -> MINUS algebraic_expression .)

  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! MUL             [ shift and go to state 63 ]
  ! DIV             [ shift and go to state 64 ]


state 66

    (50) algebraic_expression -> function .

    PLUS            reduce using rule 50 (algebraic_expression -> function .)
    MINUS           reduce using rule 50 (algebraic_expression -> function .)
    MUL             reduce using rule 50 (algebraic_expression -> function .)
    DIV             reduce using rule 50 (algebraic_expression -> function .)
    EQUAL           reduce using rule 50 (algebraic_expression -> function .)
    GREATER         reduce using rule 50 (algebraic_expression -> function .)
    LESS            reduce using rule 50 (algebraic_expression -> function .)
    GREATEREQ       reduce using rule 50 (algebraic_expression -> function .)
    LESSEQ          reduce using rule 50 (algebraic_expression -> function .)
    NEQUAL          reduce using rule 50 (algebraic_expression -> function .)
    COMMA           reduce using rule 50 (algebraic_expression -> function .)
    CPAR            reduce using rule 50 (algebraic_expression -> function .)


state 67

    (57) function -> graph_expression POINT . NODES_COUNT

    NODES_COUNT     shift and go to state 96


state 68

    (14) For_vertex_instr -> FORVERTEX ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 97


state 69

    (15) For_edge_instr -> FOREDGE ID IN ID . BEGIN Instructions END

    BEGIN           shift and go to state 98


state 70

    (25) graph_expression -> graph_expression UNION graph_expression .
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (28) graph_expression -> graph_expression . CONCAT graph_expression

    UNION           reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    INTERSECTION    reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    DIFFERENCE      reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    CONCAT          reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    PLOT            reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    IF              reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    FORVERTEX       reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    ID              reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    FOREDGE         reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    $end            reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    END             reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    POINT           reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)
    CPAR            reduce using rule 25 (graph_expression -> graph_expression UNION graph_expression .)

  ! UNION           [ shift and go to state 42 ]
  ! INTERSECTION    [ shift and go to state 43 ]
  ! DIFFERENCE      [ shift and go to state 44 ]
  ! CONCAT          [ shift and go to state 45 ]


state 71

    (26) graph_expression -> graph_expression INTERSECTION graph_expression .
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (28) graph_expression -> graph_expression . CONCAT graph_expression

    UNION           reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    INTERSECTION    reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    DIFFERENCE      reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    CONCAT          reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    PLOT            reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    IF              reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FORVERTEX       reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    ID              reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    FOREDGE         reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    $end            reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    END             reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    POINT           reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)
    CPAR            reduce using rule 26 (graph_expression -> graph_expression INTERSECTION graph_expression .)

  ! UNION           [ shift and go to state 42 ]
  ! INTERSECTION    [ shift and go to state 43 ]
  ! DIFFERENCE      [ shift and go to state 44 ]
  ! CONCAT          [ shift and go to state 45 ]


state 72

    (27) graph_expression -> graph_expression DIFFERENCE graph_expression .
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (28) graph_expression -> graph_expression . CONCAT graph_expression

  ! shift/reduce conflict for UNION resolved as shift
  ! shift/reduce conflict for INTERSECTION resolved as shift
  ! shift/reduce conflict for DIFFERENCE resolved as shift
  ! shift/reduce conflict for CONCAT resolved as shift
    PLOT            reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    IF              reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FORVERTEX       reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    ID              reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    FOREDGE         reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    $end            reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    END             reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    POINT           reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    CPAR            reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .)
    UNION           shift and go to state 42
    INTERSECTION    shift and go to state 43
    DIFFERENCE      shift and go to state 44
    CONCAT          shift and go to state 45

  ! UNION           [ reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .) ]
  ! DIFFERENCE      [ reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .) ]
  ! CONCAT          [ reduce using rule 27 (graph_expression -> graph_expression DIFFERENCE graph_expression .) ]


state 73

    (28) graph_expression -> graph_expression CONCAT graph_expression .
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (28) graph_expression -> graph_expression . CONCAT graph_expression

  ! shift/reduce conflict for UNION resolved as shift
  ! shift/reduce conflict for INTERSECTION resolved as shift
  ! shift/reduce conflict for DIFFERENCE resolved as shift
  ! shift/reduce conflict for CONCAT resolved as shift
    PLOT            reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .)
    IF              reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .)
    FORVERTEX       reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .)
    ID              reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .)
    FOREDGE         reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .)
    $end            reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .)
    END             reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .)
    POINT           reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .)
    CPAR            reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .)
    UNION           shift and go to state 42
    INTERSECTION    shift and go to state 43
    DIFFERENCE      shift and go to state 44
    CONCAT          shift and go to state 45

  ! UNION           [ reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! INTERSECTION    [ reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! DIFFERENCE      [ reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .) ]
  ! CONCAT          [ reduce using rule 28 (graph_expression -> graph_expression CONCAT graph_expression .) ]


state 74

    (21) graph_expression -> GRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 99


state 75

    (23) graph_expression -> GRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (31) vertex_expression -> . vertex_expression INT
    (32) vertex_expression -> . INT

    INT             shift and go to state 52

    vertex_expression              shift and go to state 100

state 76

    (22) graph_expression -> DIGRAPH OPAR value_expression . COMMA edge_expression CPAR

    COMMA           shift and go to state 101


state 77

    (24) graph_expression -> DIGRAPH OPAR OBR . vertex_expression CBR COMMA edge_expression CPAR
    (31) vertex_expression -> . vertex_expression INT
    (32) vertex_expression -> . INT

    INT             shift and go to state 52

    vertex_expression              shift and go to state 102

state 78

    (29) graph_expression -> COMPLEMENT OPAR graph_expression . CPAR
    (25) graph_expression -> graph_expression . UNION graph_expression
    (26) graph_expression -> graph_expression . INTERSECTION graph_expression
    (27) graph_expression -> graph_expression . DIFFERENCE graph_expression
    (28) graph_expression -> graph_expression . CONCAT graph_expression

    CPAR            shift and go to state 103
    UNION           shift and go to state 42
    INTERSECTION    shift and go to state 43
    DIFFERENCE      shift and go to state 44
    CONCAT          shift and go to state 45


state 79

    (34) edge_expression -> OPAR INT . COMMA INT CPAR
    (36) edge_expression -> OPAR INT . COMMA INT COMMA INT CPAR
    (38) edge_expression -> OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 104


state 80

    (18) Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .

    PLOT            reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    IF              reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FORVERTEX       reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    ID              reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    FOREDGE         reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    $end            reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)
    END             reduce using rule 18 (Add_vertex_instr -> ID ADD OPAR vertex_expression CPAR .)


state 81

    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA . edge_expression CPAR
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (38) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . empty
    (56) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 49
    CPAR            reduce using rule 56 (empty -> .)

  ! OPAR            [ reduce using rule 56 (empty -> .) ]

    edge_expression                shift and go to state 105
    empty                          shift and go to state 53

state 82

    (31) vertex_expression -> vertex_expression INT .

    CPAR            reduce using rule 31 (vertex_expression -> vertex_expression INT .)
    COMMA           reduce using rule 31 (vertex_expression -> vertex_expression INT .)
    INT             reduce using rule 31 (vertex_expression -> vertex_expression INT .)
    CBR             reduce using rule 31 (vertex_expression -> vertex_expression INT .)


state 83

    (33) edge_expression -> edge_expression OPAR . INT COMMA INT CPAR
    (35) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> edge_expression OPAR . INT COMMA INT COMMA FLOAT CPAR

    INT             shift and go to state 106


state 84

    (19) Add_edge_instr -> ID ADD OPAR edge_expression CPAR .

    PLOT            reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    IF              reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FORVERTEX       reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    ID              reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    FOREDGE         reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    $end            reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)
    END             reduce using rule 19 (Add_edge_instr -> ID ADD OPAR edge_expression CPAR .)


state 85

    (12) If_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END
    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN . Instructions END ELSE BEGIN Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 107
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 86

    (40) logic_expression -> value_expression EQUAL value_expression .

    CPAR            reduce using rule 40 (logic_expression -> value_expression EQUAL value_expression .)


state 87

    (41) logic_expression -> value_expression GREATER value_expression .

    CPAR            reduce using rule 41 (logic_expression -> value_expression GREATER value_expression .)


state 88

    (42) logic_expression -> value_expression LESS value_expression .

    CPAR            reduce using rule 42 (logic_expression -> value_expression LESS value_expression .)


state 89

    (43) logic_expression -> value_expression GREATEREQ value_expression .

    CPAR            reduce using rule 43 (logic_expression -> value_expression GREATEREQ value_expression .)


state 90

    (44) logic_expression -> value_expression LESSEQ value_expression .

    CPAR            reduce using rule 44 (logic_expression -> value_expression LESSEQ value_expression .)


state 91

    (45) logic_expression -> value_expression NEQUAL value_expression .

    CPAR            reduce using rule 45 (logic_expression -> value_expression NEQUAL value_expression .)


state 92

    (51) algebraic_expression -> algebraic_expression PLUS algebraic_expression .
    (51) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (52) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (53) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (54) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MINUS           reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    EQUAL           reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATER         reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESS            reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    GREATEREQ       reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    LESSEQ          reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    NEQUAL          reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    COMMA           reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    CPAR            reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .)
    MUL             shift and go to state 63
    DIV             shift and go to state 64

  ! MUL             [ reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 51 (algebraic_expression -> algebraic_expression PLUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]


state 93

    (52) algebraic_expression -> algebraic_expression MINUS algebraic_expression .
    (51) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (52) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (53) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (54) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MINUS           reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    EQUAL           reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATER         reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESS            reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    GREATEREQ       reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    LESSEQ          reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    NEQUAL          reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    COMMA           reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    CPAR            reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .)
    MUL             shift and go to state 63
    DIV             shift and go to state 64

  ! MUL             [ reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! DIV             [ reduce using rule 52 (algebraic_expression -> algebraic_expression MINUS algebraic_expression .) ]
  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]


state 94

    (53) algebraic_expression -> algebraic_expression MUL algebraic_expression .
    (51) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (52) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (53) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (54) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MINUS           reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    MUL             reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    DIV             reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    EQUAL           reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATER         reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESS            reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    GREATEREQ       reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    LESSEQ          reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    NEQUAL          reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    COMMA           reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)
    CPAR            reduce using rule 53 (algebraic_expression -> algebraic_expression MUL algebraic_expression .)

  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! MUL             [ shift and go to state 63 ]
  ! DIV             [ shift and go to state 64 ]


state 95

    (54) algebraic_expression -> algebraic_expression DIV algebraic_expression .
    (51) algebraic_expression -> algebraic_expression . PLUS algebraic_expression
    (52) algebraic_expression -> algebraic_expression . MINUS algebraic_expression
    (53) algebraic_expression -> algebraic_expression . MUL algebraic_expression
    (54) algebraic_expression -> algebraic_expression . DIV algebraic_expression

    PLUS            reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MINUS           reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    MUL             reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    DIV             reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    EQUAL           reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATER         reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESS            reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    GREATEREQ       reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    LESSEQ          reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    NEQUAL          reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    COMMA           reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)
    CPAR            reduce using rule 54 (algebraic_expression -> algebraic_expression DIV algebraic_expression .)

  ! PLUS            [ shift and go to state 61 ]
  ! MINUS           [ shift and go to state 62 ]
  ! MUL             [ shift and go to state 63 ]
  ! DIV             [ shift and go to state 64 ]


state 96

    (57) function -> graph_expression POINT NODES_COUNT .

    EQUAL           reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)
    GREATER         reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)
    LESS            reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)
    GREATEREQ       reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)
    LESSEQ          reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)
    NEQUAL          reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)
    PLUS            reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)
    MINUS           reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)
    MUL             reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)
    DIV             reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)
    COMMA           reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)
    CPAR            reduce using rule 57 (function -> graph_expression POINT NODES_COUNT .)


state 97

    (14) For_vertex_instr -> FORVERTEX ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 108
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 98

    (15) For_edge_instr -> FOREDGE ID IN ID BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 109
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 99

    (21) graph_expression -> GRAPH OPAR value_expression COMMA . edge_expression CPAR
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (38) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . empty
    (56) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 49
    CPAR            reduce using rule 56 (empty -> .)

  ! OPAR            [ reduce using rule 56 (empty -> .) ]

    edge_expression                shift and go to state 110
    empty                          shift and go to state 53

state 100

    (23) graph_expression -> GRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (31) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 111
    INT             shift and go to state 82


state 101

    (22) graph_expression -> DIGRAPH OPAR value_expression COMMA . edge_expression CPAR
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (38) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . empty
    (56) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 49
    CPAR            reduce using rule 56 (empty -> .)

  ! OPAR            [ reduce using rule 56 (empty -> .) ]

    edge_expression                shift and go to state 112
    empty                          shift and go to state 53

state 102

    (24) graph_expression -> DIGRAPH OPAR OBR vertex_expression . CBR COMMA edge_expression CPAR
    (31) vertex_expression -> vertex_expression . INT

    CBR             shift and go to state 113
    INT             shift and go to state 82


state 103

    (29) graph_expression -> COMPLEMENT OPAR graph_expression CPAR .

    UNION           reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    INTERSECTION    reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    DIFFERENCE      reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    CONCAT          reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    PLOT            reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    IF              reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FORVERTEX       reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    ID              reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    FOREDGE         reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    $end            reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    END             reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    POINT           reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)
    CPAR            reduce using rule 29 (graph_expression -> COMPLEMENT OPAR graph_expression CPAR .)


state 104

    (34) edge_expression -> OPAR INT COMMA . INT CPAR
    (36) edge_expression -> OPAR INT COMMA . INT COMMA INT CPAR
    (38) edge_expression -> OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 114


state 105

    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression . CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 115
    OPAR            shift and go to state 83


state 106

    (33) edge_expression -> edge_expression OPAR INT . COMMA INT CPAR
    (35) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA INT CPAR
    (37) edge_expression -> edge_expression OPAR INT . COMMA INT COMMA FLOAT CPAR

    COMMA           shift and go to state 116


state 107

    (12) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END
    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions . END ELSE BEGIN Instructions END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 117
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 108

    (14) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 118
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 109

    (15) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 119
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 110

    (21) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression . CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 120
    OPAR            shift and go to state 83


state 111

    (23) graph_expression -> GRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 121


state 112

    (22) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression . CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 122
    OPAR            shift and go to state 83


state 113

    (24) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR . COMMA edge_expression CPAR

    COMMA           shift and go to state 123


state 114

    (34) edge_expression -> OPAR INT COMMA INT . CPAR
    (36) edge_expression -> OPAR INT COMMA INT . COMMA INT CPAR
    (38) edge_expression -> OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 125
    COMMA           shift and go to state 124


state 115

    (20) Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .

    PLOT            reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)
    END             reduce using rule 20 (Add_vertex_and_edge_instr -> ID ADD OPAR vertex_expression COMMA edge_expression CPAR .)


state 116

    (33) edge_expression -> edge_expression OPAR INT COMMA . INT CPAR
    (35) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA INT CPAR
    (37) edge_expression -> edge_expression OPAR INT COMMA . INT COMMA FLOAT CPAR

    INT             shift and go to state 126


state 117

    (12) If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .
    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END . ELSE BEGIN Instructions END

    PLOT            reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    IF              reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FORVERTEX       reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ID              reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    FOREDGE         reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    $end            reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    END             reduce using rule 12 (If_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END .)
    ELSE            shift and go to state 127


state 118

    (14) For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)
    END             reduce using rule 14 (For_vertex_instr -> FORVERTEX ID IN ID BEGIN Instructions END .)


state 119

    (15) For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .

    PLOT            reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    IF              reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FORVERTEX       reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    ID              reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    FOREDGE         reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    $end            reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)
    END             reduce using rule 15 (For_edge_instr -> FOREDGE ID IN ID BEGIN Instructions END .)


state 120

    (21) graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .

    UNION           reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CPAR            reduce using rule 21 (graph_expression -> GRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 121

    (23) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (38) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . empty
    (56) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 49
    CPAR            reduce using rule 56 (empty -> .)

  ! OPAR            [ reduce using rule 56 (empty -> .) ]

    edge_expression                shift and go to state 128
    empty                          shift and go to state 53

state 122

    (22) graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .

    UNION           reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    PLOT            reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    IF              reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    ID              reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    $end            reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    END             reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    POINT           reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)
    CPAR            reduce using rule 22 (graph_expression -> DIGRAPH OPAR value_expression COMMA edge_expression CPAR .)


state 123

    (24) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA . edge_expression CPAR
    (33) edge_expression -> . edge_expression OPAR INT COMMA INT CPAR
    (34) edge_expression -> . OPAR INT COMMA INT CPAR
    (35) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA INT CPAR
    (36) edge_expression -> . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> . edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR
    (38) edge_expression -> . OPAR INT COMMA INT COMMA FLOAT CPAR
    (39) edge_expression -> . empty
    (56) empty -> .

  ! shift/reduce conflict for OPAR resolved as shift
    OPAR            shift and go to state 49
    CPAR            reduce using rule 56 (empty -> .)

  ! OPAR            [ reduce using rule 56 (empty -> .) ]

    edge_expression                shift and go to state 129
    empty                          shift and go to state 53

state 124

    (36) edge_expression -> OPAR INT COMMA INT COMMA . INT CPAR
    (38) edge_expression -> OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 130
    FLOAT           shift and go to state 131


state 125

    (34) edge_expression -> OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 34 (edge_expression -> OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 34 (edge_expression -> OPAR INT COMMA INT CPAR .)


state 126

    (33) edge_expression -> edge_expression OPAR INT COMMA INT . CPAR
    (35) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA INT CPAR
    (37) edge_expression -> edge_expression OPAR INT COMMA INT . COMMA FLOAT CPAR

    CPAR            shift and go to state 133
    COMMA           shift and go to state 132


state 127

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE . BEGIN Instructions END

    BEGIN           shift and go to state 134


state 128

    (23) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 135
    OPAR            shift and go to state 83


state 129

    (24) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression . CPAR
    (33) edge_expression -> edge_expression . OPAR INT COMMA INT CPAR
    (35) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA INT CPAR
    (37) edge_expression -> edge_expression . OPAR INT COMMA INT COMMA FLOAT CPAR

    CPAR            shift and go to state 136
    OPAR            shift and go to state 83


state 130

    (36) edge_expression -> OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 137


state 131

    (38) edge_expression -> OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 138


state 132

    (35) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . INT CPAR
    (37) edge_expression -> edge_expression OPAR INT COMMA INT COMMA . FLOAT CPAR

    INT             shift and go to state 139
    FLOAT           shift and go to state 140


state 133

    (33) edge_expression -> edge_expression OPAR INT COMMA INT CPAR .

    CPAR            reduce using rule 33 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)
    OPAR            reduce using rule 33 (edge_expression -> edge_expression OPAR INT COMMA INT CPAR .)


state 134

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN . Instructions END
    (1) Instructions -> . Instructions Instruction
    (2) Instructions -> . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instructions                   shift and go to state 141
    Instruction                    shift and go to state 2
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 135

    (23) graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    UNION           reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CPAR            reduce using rule 23 (graph_expression -> GRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 136

    (24) graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .

    UNION           reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    INTERSECTION    reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    DIFFERENCE      reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CONCAT          reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    PLOT            reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    IF              reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FORVERTEX       reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    ID              reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    FOREDGE         reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    $end            reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    END             reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    POINT           reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)
    CPAR            reduce using rule 24 (graph_expression -> DIGRAPH OPAR OBR vertex_expression CBR COMMA edge_expression CPAR .)


state 137

    (36) edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 36 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 36 (edge_expression -> OPAR INT COMMA INT COMMA INT CPAR .)


state 138

    (38) edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 38 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 38 (edge_expression -> OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 139

    (35) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT . CPAR

    CPAR            shift and go to state 142


state 140

    (37) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT . CPAR

    CPAR            shift and go to state 143


state 141

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions . END
    (1) Instructions -> Instructions . Instruction
    (3) Instruction -> . Plot_instr
    (4) Instruction -> . If_instr
    (5) Instruction -> . If_else_instr
    (6) Instruction -> . For_vertex_instr
    (7) Instruction -> . Assign_instr
    (8) Instruction -> . For_edge_instr
    (9) Instruction -> . Add_vertex_instr
    (10) Instruction -> . Add_edge_instr
    (11) Instruction -> . Add_vertex_and_edge_instr
    (16) Plot_instr -> . PLOT OPAR ID CPAR
    (12) If_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END
    (13) If_else_instr -> . IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END
    (14) For_vertex_instr -> . FORVERTEX ID IN ID BEGIN Instructions END
    (17) Assign_instr -> . ID ASSIGN graph_expression
    (15) For_edge_instr -> . FOREDGE ID IN ID BEGIN Instructions END
    (18) Add_vertex_instr -> . ID ADD OPAR vertex_expression CPAR
    (19) Add_edge_instr -> . ID ADD OPAR edge_expression CPAR
    (20) Add_vertex_and_edge_instr -> . ID ADD OPAR vertex_expression COMMA edge_expression CPAR

    END             shift and go to state 144
    PLOT            shift and go to state 12
    IF              shift and go to state 14
    FORVERTEX       shift and go to state 15
    ID              shift and go to state 13
    FOREDGE         shift and go to state 16

    Instruction                    shift and go to state 17
    Plot_instr                     shift and go to state 3
    If_instr                       shift and go to state 4
    If_else_instr                  shift and go to state 5
    For_vertex_instr               shift and go to state 6
    Assign_instr                   shift and go to state 7
    For_edge_instr                 shift and go to state 8
    Add_vertex_instr               shift and go to state 9
    Add_edge_instr                 shift and go to state 10
    Add_vertex_and_edge_instr      shift and go to state 11

state 142

    (35) edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .

    CPAR            reduce using rule 35 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)
    OPAR            reduce using rule 35 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA INT CPAR .)


state 143

    (37) edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .

    CPAR            reduce using rule 37 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)
    OPAR            reduce using rule 37 (edge_expression -> edge_expression OPAR INT COMMA INT COMMA FLOAT CPAR .)


state 144

    (13) If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .

    PLOT            reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    IF              reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FORVERTEX       reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    ID              reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    FOREDGE         reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    $end            reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)
    END             reduce using rule 13 (If_else_instr -> IF OPAR logic_expression CPAR BEGIN Instructions END ELSE BEGIN Instructions END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OPAR in state 30 resolved as shift
WARNING: shift/reduce conflict for UNION in state 72 resolved as shift
WARNING: shift/reduce conflict for INTERSECTION in state 72 resolved as shift
WARNING: shift/reduce conflict for DIFFERENCE in state 72 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 72 resolved as shift
WARNING: shift/reduce conflict for UNION in state 73 resolved as shift
WARNING: shift/reduce conflict for INTERSECTION in state 73 resolved as shift
WARNING: shift/reduce conflict for DIFFERENCE in state 73 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 73 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 81 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 99 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 101 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 121 resolved as shift
WARNING: shift/reduce conflict for OPAR in state 123 resolved as shift
WARNING: reduce/reduce conflict in state 34 resolved using rule (value_expression -> function)
WARNING: rejected rule (algebraic_expression -> function) in state 34
